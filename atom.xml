<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>geekbang</title>
  
  
  <link href="https://zhuansun.github.io/geekbang/atom.xml" rel="self"/>
  
  <link href="https://zhuansun.github.io/geekbang/"/>
  <updated>2024-02-27T07:30:58.220Z</updated>
  <id>https://zhuansun.github.io/geekbang/</id>
  
  <author>
    <name>码农张三</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01 | 职级体系：你意识到级别鸿沟了吗？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/2218521578.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/2218521578.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-职级体系：你意识到级别鸿沟了吗？"><a href="#01-职级体系：你意识到级别鸿沟了吗？" class="headerlink" title="01 | 职级体系：你意识到级别鸿沟了吗？"></a>01 | 职级体系：你意识到级别鸿沟了吗？</h1><p>你好，我是华仔。</p><p>今天我们开始课程的第一讲，我想和你聊聊 <strong>职级体系</strong> 这个事儿。</p><p>如果我们把职场晋升的过程比作在游戏中打排位赛来提升段位的话，那么职级体系就是游戏的 <strong>段位规则</strong>。它定义了整体的段位等级分布（比如从倔强青铜到荣耀王者），每个段位的要求（比如钻石段位以后要学会怎么重新匹配一局游戏），还有晋级的规则（比如每个段位几颗星可以晋升下一个段位）。</p><p>如果你所在的公司已经有明确的职级体系，那么深刻理解职级体系的特点，有利于你设定合理的晋升目标和规划。这样你就能避免因为急于求成而心浮气躁，或者因为埋头苦干而错失晋级的机会。</p><p>如果你想跳槽到心仪的公司，那么全面了解对方的职级体系，有利于你合理地进行自我评估，在面试的时候拿到更好的定级结果和薪资报酬。</p><p>不同性质的公司和机构，采用的职级体系差异很大，最常见的有以下两种。</p><p>第一种是 <strong>职称体系</strong>。</p><p>“职称”的正式名称是“专业技术职务任职资格”。常见的教师、医生、会计和律师等职业基本上用的都是这套体系。</p><p>它的优势在于 <strong>标准统一</strong>，全国通行，可以无缝切换。比如一个医生在A医院是副主任医师，换到B医院的话，职称是可以平移的。职称这套体系在公务员、事业单位、国企等机构是通行的标准，但是在互联网行业很少应用。</p><p>第二种是 <strong>自立体系</strong>。</p><p>互联网公司用的往往是这种方式，也就是说，公司自己制定完整的职级体系，内部评估员工的级别，并根据职级体系设计相关的薪酬福利等激励机制。</p><p>自立体系的优势在于，公司可以根据自己的实际情况 <strong>灵活操作</strong>，并不断演进；而它的劣势是，由于行业缺乏统一的标准，一个公司在吸纳其他公司的人才时， <strong>不太容易直接对标</strong>。</p><p>对于软件行业来说，国内大部分互联网和软件公司基本都是民企，基本上都是采取自立体系的方式来制定自己的职级体系。同时，由于领头羊腾讯和阿里的强大影响力，行业内部逐步形成了对标腾讯和阿里职级的做法，于是阿里和腾讯的职级也就成了“硬通货”。</p><p>虽然自立体系可以灵活多样，但是从本质上说，基本上都是按照以下方式设计的：</p><ol><li>职级体系划分为 <strong>专业线</strong> 和 <strong>管理线</strong>，专业线指员工在某个专业领域晋升，管理线指员工在管理岗位晋升。软件行业的研发、测试、运维、产品经理、运营、UI&#x2F;UE、HR等都属于专业线晋升。</li><li>专业线按照其设计特点又可以划分为两类，那就是 <strong>跨越式职级</strong> 和 <strong>阶梯式职级</strong>，涵盖了从毕业生到业界精英的各个级别。</li><li>管理线一般不会再分领域，而且你在专业线达到一定级别后，才能转管理线发展（例如某公司规定专业线要达到阿里P9级别才可以选择转管理线发展）。这样做的目的在于 <strong>鼓励员工积累足够的专业技能</strong>，而不要变成只会发号施令开会写报告的纯管理者。</li><li>以前也有公司尝试专业线和管理线 <strong>双通道</strong> 发展的模式。但是这种模式被实践证明存在很多问题，比如投入大、不好评估员工能力、外行管内行等，所以现在已经很少用到了。</li></ol><p>这门课程的内容聚焦于专业线的晋升指导和技巧。虽然我是技术出身，课程中的案例大多也是技术案例，但其中70%的内容其实是具有普适性的，同样适用于产品经理、运营和策划等岗位。</p><p>接下来，我会为你详细介绍专业线的两类职级体系的特点。</p><h2 id="跨越式职级"><a href="#跨越式职级" class="headerlink" title="跨越式职级"></a>跨越式职级</h2><p>我们先来看跨越式职级。简单来说，在这个体系下两个级别之间的差异很大，就像有一条 <strong>“级别鸿沟”</strong>，你需要用很大的力气才能跨越这条鸿沟。</p><p>目前国内知名公司当中，采用跨越式职级的有阿里、百度、滴滴和头条等。其中阿里的职级体系比较典型，也是我最熟悉的，所以接下来我就以阿里的职级体系为例，来具体说明跨越式职级的特点。</p><p>下面这个表格总结了阿里职级体系的级别设置和基本定义（关于各个级别详细的定义和要求，我在后续课程中会详细介绍）。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/8c4d083304cfe1ffded18fb672ce288d.jpg"></p><p>以技术人员为例，本科应届生初定级是P5；随着能力和经验的积累逐步升级，大部分人可以升到P7；能够升到P8的人已经是很厉害的了，而能够升到P9的，虽然不至于凤毛麟角，但也算得上是百里挑一，我工作十多年也就是P9而已；至于P10和P10以上的级别，往往可遇不可求，能升到这个位置的都是业界响当当的人物了。</p><p>表格中P6和P7标了黄色，也是说明绝大部分工程师是处于这两个级别。</p><p>那么，这种职级体系有什么特征呢？</p><p>第一个特征是， <strong>相邻两个级别的差异比较大</strong>。</p><h5 id="因此，晋级的时候不是简单地要求能力“有提升”就可以了，而是要求有-“本质的提升”。"><a href="#因此，晋级的时候不是简单地要求能力“有提升”就可以了，而是要求有-“本质的提升”。" class="headerlink" title="因此，晋级的时候不是简单地要求能力“有提升”就可以了，而是要求有 “本质的提升”。"></a>因此，晋级的时候不是简单地要求能力“有提升”就可以了，而是要求有 <strong>“本质的提升”</strong>。</h5><p>举个简单的例子，你带3个人或者4个人，团队管理能力是没有本质的区别的；但是如果让你带30个人，团队管理的能力和带3个人的时候肯定差别很大，这就是本质的提升。</p><p>这样的要求会导致一种常见的现象，让很多人难以理解，甚至心有不甘。那就是，一个员工在当前这个级别做得很好，绩效不错，主管和同事也都认可，但是在晋级的时候却多次通不过。</p><p>大部分人在分析原因的时候，会认为是“自己紧张，所以没发挥好”，或者“评委对我不熟，所以没有发现我的能力”。如果遇到这种情况，你是不是也这样想？</p><p>然而，真实原因很可能并非如此。根据我多年的经验，确实有小部分人是由于紧张等原因没能通过晋级，但绝大部分人其实是因为 <strong>没有意识到这个级别鸿沟的存在</strong>。</p><p>他们没有意识到，自己的能力虽然在当前这个级别做得很好，但确实没有产生质变，没能达到下一个级别的要求。而如果主管也没有认清问题的本质原因，从而有针对性地指导的话，就会导致看起来很优秀的技术人员多次晋级受阻。</p><p>跨越式职级的第二个特征就是，因为级别的差异比较大，所以 <strong>晋升的机会比较少</strong>。</p><p>通常情况下，公司会要求申请晋升的员工在当前级别至少工作2年以上。实际上，除了P5升P6之外，在当前级别工作2年就能够晋升下一级别的人已经非常厉害了，大部分技术人员可能需要3年。</p><p>这样算下来，如果你刚毕业是P5，2年升P6，3年升P7，3年升P8，那么升到P8基本上也要9年了。这还是一切顺利的情况，要是有一两次晋级不通过，时间就更长了。</p><p>晋级机会少带来的一个问题就是， <strong>晋级成功对很多人来说就意味着成长停止</strong>。</p><p>这一点在P7阶段特别明显。大家都知道升P8比较难、机会比较少，所以很多同学升到P7后可能就不会去想太多了。因为他们知道，反正只要在P7的岗位把绩效做好，回报一样很丰厚，做起来还得心应手，压力也没那么大。</p><p>跨越式职级的第三个特征，就是 <strong>同级别的回报差异是比较大的</strong>。</p><p>比如，你工作2年，评级为P6；而你的同事工作5年，评级可能也是P6。虽然级别一样，但在面试官或者主管看来，这两个P6的能力差异其实还是比较大的，因此在回报上差异也会比较明显。比方说，你们的工资可能相差50%以上。</p><p>有的公司为了区别同级别不同能力的人员，在招聘的时候还会有一个档位区分，比如分为“ABC”或者“初级&#x2F;正常&#x2F;优秀”等细分档位。这样做的主要目的在于帮助HR确定合理的 <strong>工资区间</strong>。</p><p>因此，如果你面试的时候发现对方公司采取跨越式职级体系，除了确认级别外，你最好还确认一下是否有ABC这种区分，因为不同档位的薪酬是有差异的。</p><p>但是，这种区分一般只在招聘的时候用，不会在内部评级的时候用。如果内部也采用这种方式，整个职级体系就变成了接下来要讲的“阶梯式职级”了。</p><h2 id="阶梯式职级"><a href="#阶梯式职级" class="headerlink" title="阶梯式职级"></a>阶梯式职级</h2><p>阶梯式职级，简单来说，就是两个级别之间的差异不大，就像 <strong>台阶</strong> 一样稳步提升。</p><p>目前国内采取阶梯式职级的公司主要有腾讯、华为和（2020年调整前的）美团等，其中，腾讯的职级体系是典型的阶梯式职级。虽然腾讯在2019年对职级体系进行了调整，不再按照之前“2.1&#x2F;2.2&#x2F;2.3”这种方式进行命名，而是改为“6&#x2F;7&#x2F;8级工程师”，但这并没有改变它阶梯式职级的本质。</p><p>下面这张表整理、对比了腾讯的新旧职级体系（ <a href="https://www.infoq.cn/article/z77*1qu3MtVNP5O2kvRW">来源</a>）：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/e86dac506996ab899d9104553649843f.jpg"></p><p>由于业内对腾讯的旧职级体系比较熟悉，而且腾讯新旧职级体系本质上没有改变，都是阶梯式职级，因此我们还是以旧的职级体系为例来说明。</p><p>本科应届生定级一般是1.2，研究生是1.3；毕业1<del>2年社招是2.1</del>2.2；毕业3年及以上社招是2.2~2.3；从T3开始就不能简单地按照工作年限推断了，因为T3以上的评级主要看能力和水平。</p><p>阶梯式职级具体是怎么设置的呢？主要通过两个指标： <strong>职级</strong> 和 <strong>职等</strong>。</p><p>还是以腾讯为例，职级就是“工程师”“高级工程师”这种明显的级别划分，这一点和跨越式职级基本类似；职等就是每个职级内部细分的不同等级，例如同样都是“工程师”，还会划分为“2.1&#x2F;2.2&#x2F;2.3”3个等级（有的公司用ABC来表示，例如2A&#x2F;2B&#x2F;2C）。</p><p>阶梯式职级的级别差异没有跨越式职级没那么大，并没有明显的鸿沟。因此，阶梯式职级的特征，也和跨越式职级正好相反。</p><p>第一个特征是， <strong>相邻级别差异小。</strong></p><p>由于阶梯式职级的级别之间的差异没有跨越式职级那么大，基本上按部就班逐级逐等晋升即可，过程相对平稳。通常情况下同一级别内，如果绩效和表现还可以的话，逐等晋升问题都不大；如果表现很优秀，跨等晋升也是可以的，例如可以申请从2.1直接晋级到2.3。</p><p>第二个特征是 <strong>，晋升机会更多。</strong></p><p>因为职级划分得比较细，所以同级别内的等级差异不明显。如果像跨越式阶梯那样2～3年才能晋升一次，那从2.1晋升到2.3要5～6年时间，这明显是不合理的。阶梯式职级基本上每年都可以申请晋升，我当年在松鼠厂的时候，公司每半年都有晋升评级，升到当前等级1年后就可以再次申请晋级。</p><p>第三个特征是， <strong>同级别的回报差异不大</strong>。</p><p>因为级别划分已经比较细了，所以回报的范围区间就会比较小。</p><p>看到这里，你肯定有疑问了： <strong>看起来阶梯式职级比跨越式职级要好很多啊，为何不统一采用阶梯式职级呢？</strong></p><p>原因在于，虽然阶梯式职级有前面说的各种优点，但它也有一个 <strong>核心缺陷</strong>，那就是， <strong>很难客观地定义和评估两个等级之间的差异！</strong></p><p>我之前所在的松鼠厂，级别和腾讯类似，采用的是2A&#x2F;2B&#x2F;2C这种等级。但是如果你仔细研究2A和2B、2B和2C的定义描述，就会发现里面都是一些模凌两可的话。</p><p>比如关于某项能力的描述，2A是“掌握”，2B是“熟练掌握”，2C是“精通”。但实际上在晋级评审的时候，评委对于“掌握”“熟练掌握”和“精通”的区分很难客观。</p><p>因此，可能会出现一种比较奇特的现象：某个技术人员的某个专业技能，在晋升2A的时候问了一遍，在晋升2B的时候又问了一遍，在晋升2C的时候还会再问一遍，而这个人给出的答案可能都一样。</p><p>以Java服务端开发为例，对于JVM的垃圾回收算法和调优，基本上是属于必问的。绝大部分开发人员都会把相关参数、垃圾回收器原理都准备好，因此晋升2A的时候基本上都已经算熟练掌握甚至精通了。所以就算升到2C，他掌握的其实还是这些技能，和2A时并没有明显的差异。</p><p>为了弥补阶梯式职级的这个缺陷，公司可以采取详细定义每个等级的技能要求。还是以Java服务端开发为例，可以在2A阶段只要求“JVM垃圾回收”技能，2C才开始要求“多线程开发”。</p><p>但在实际工作中，这种详细定义的指导意义并不大。因为同级别不同等级的技术人员所做的事情，范围基本都是一致的。实际的开发项目是 <strong>按需求来划分任务</strong> 的，主管几乎不可能让一个2A的Java工程师不做多线程开发，而将所有的多线程开发任务都分配给2C的工程师。</p><p>阶梯式职级另外一个缺陷和跨越式职级类似， <strong>就是当出现跨级晋升的时候，其实还是有“级别鸿沟”的</strong>。这个鸿沟远远大于同级别不同等级的差距，但由于阶梯式职级的设计，很多人以为他们面临的仍然只是一次普通的晋升。</p><p>以腾讯为例，从2.3到3.1其实是一次大的跨越，而不是一次简单的晋升，它的难度和要求跟从2.2到2.3是完全不同的。</p><p>我当年在松鼠厂时就遇到过很多类似的案例，一些比较优秀的技术人员从2A一路顺利晋升到2C，但从2C晋升到3A却屡屡碰壁。关键是，这些技术人员的绩效和表现还非常优秀，屡次晋升失败对于他们工作积极性和个人自信心的打击还是比较大的。</p><p>所以结合过往我自己晋级、评审和管理的经验来看，我反而推荐跨越式职级这种体系。</p><p>因为确实只有能力发生了质的飞跃后，大家才能比较准确地判断；而同级别内的能力成长，更多的是技能熟练程度的提升，没有那么明显。跨越式职级很早就把这个问题暴露出来，你更容易发现并做出调整；阶梯式职级却把问题隐藏得更深，你反而没那么容易意识到。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲重点介绍了国内互联网公司中流行的两类职级体系的特点，目的在于帮助你透过表面信息看到职级体系的本质，从而解答你关于晋升的很多疑惑。掌握晋升的游戏规则之后，你才能做出更好的职业规划。</p><p>现在，我们回顾一下重点：</p><ol><li>互联网公司倾向于采用自立体系而不是职称体系。由于阿里和腾讯强大的影响力，国内的互联网公司一般都会对标它们的职级体系。</li><li>跨越式职级的典型代表是阿里，它的特征是：级别差异大、晋升机会少、同级别回报差异比较大。</li><li>阶梯式职级的典型代表是腾讯，它的特征是：级别差异小、晋升机会多、同级别回报差异比较小。</li><li>不管是跨越式职级还是阶梯式职级，都存在一个问题，那就是“级别鸿沟”，它是很多人晋升过程中的拦路虎。当你的晋升遇到瓶颈时，不妨想想自己有没有“本质的提升”，是不是充分地向大家证明了这种提升。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/e203df6e278d11bff70c972668a42823.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧：你所在的公司目前采取的职级体系是哪种？你在晋升过程中遇到的最大困难或者挑战是什么？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/5f8a0be282e99d171cc2554432bb4534.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-职级体系：你意识到级别鸿沟了吗？&quot;&gt;&lt;a href=&quot;#01-职级体系：你意识到级别鸿沟了吗？&quot; class=&quot;headerlink&quot; title=&quot;01 | 职级体系：你意识到级别鸿沟了吗？&quot;&gt;&lt;/a&gt;01 | 职级体系：你意识到级别鸿沟了吗？&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>03 | 晋升原则：什么样的人更容易晋升？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3256034811.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3256034811.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="03-晋升原则：什么样的人更容易晋升？"><a href="#03-晋升原则：什么样的人更容易晋升？" class="headerlink" title="03 | 晋升原则：什么样的人更容易晋升？"></a>03 | 晋升原则：什么样的人更容易晋升？</h1><p>你好，我是华仔。</p><p>当你了解了晋升的游戏规则和通关流程之后，自然就会产生一个疑问：我应该怎么做才能更快地晋升？</p><p>其实这门课后续的所有内容，都是在回答这个问题。但毕竟晋升涉及的因素太多了，不同的行业、公司和团队，你本人的经历、性格和爱好，可能都会影响晋升策略的选择。</p><p>虽然大部分的情况下，你可以直接套用我在这门课中传授的方法，但总是会有一些特殊情况，你需要靠自己来做出判断和选择。</p><p>所以，我给你总结了三条晋升的核心原则，告诉你什么样的人更容易晋升成功。当你在准备晋升的过程中，遇到困惑、挫折等各种问题的时候，就可以根据你的实际情况来逐一对比这三条原则，找到自己做得不够好的地方，然后有针对性地进行提升。</p><h2 id="主动原则：主动做事"><a href="#主动原则：主动做事" class="headerlink" title="主动原则：主动做事"></a>主动原则：主动做事</h2><p>工作要积极主动，这句话你一定听过吧，但你对它的理解真的准确吗？很多人，尤其是刚进入职场的同学，可能会以为“服从命令听指挥”“领导指哪打哪”就是积极主动，结果反而容易养成两个不好的习惯。</p><p>第一个不好的习惯是，认为主管肯定会帮你搞定晋升。</p><p>你可能非常信任主管，认为自己只要把主管安排的任务做好，晋升就是水到渠成的事情。所以你就算觉得现在分配的任务对自己的成长帮助不大，也不会主动跟主管沟通，而是认为“他这么安排肯定是有道理的”“也许过一段时间他就会给我安排新的任务”。这其实是不对的。</p><p>首先，并不是每个主管都会关注组员的成长。主管的做事风格可能有很多种。</p><ul><li>有的主管特别关注业务目标是否达成，所以会花很多时间跟产品经理和项目经理沟通交流；</li><li>有的主管特别关注团队形象，要求所有对外承诺的事情都一定不能延期、一定不能出问题，所以会特别重视进度、质量和风险等情况的跟进和监控；</li><li>有的主管特别关注自己的职位爬升，所以团队成员对他来说，只是一种可利用的资源……</li></ul><p>所以，如果你遇到的恰好是不关注组员成长的主管，就不要等着他给你分配任务了。不然你就只能长时间地留在当前的级别，做他手底下的“工具人”。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/86d64b07e6c2d7b854162463a784302d.jpg"></p><p>其次，就算主管关注组员的成长，他的判断也有可能跟你的判断不一致。</p><p>比如主管认为你还需要在当前岗位继续锻炼，而你却觉得自己应该尝试新的挑战了。这时候如果你不去找他沟通，他还会继续给你安排熟悉的重复任务。这样你肯定很没意思，工作状态不会太好，工作积极性也不会太高。</p><p>所以，如果你觉得自己的岗位没有太多挑战和能力提升空间的时候，就不要等着主管给你分配任务了。不然你身上的潜力就激发不出来，没法以最快的速度晋升。</p><p>第二个不好的习惯是， <strong>被动接收信息</strong>。</p><p>你可能认为把自己的本职工作做好就够了，其他事情自然有对应岗位的人去负责，因此你很少去主动了解很多工作相关的信息。比如下面这些信息，对于技术人员来说，它们不属于自己岗位职责的范畴，但是在晋升的时候，它们却是评判技术人员综合能力的重要考察内容：</p><ul><li>业务功能上线后业务效果如何？</li><li>业务效果不好的可能原因是什么？</li><li>整体的业务机房的部署结构是什么样的？</li></ul><p>这些信息，有的需要找产品运营要数据，有的需要跟业务负责人探讨，还有的需要和另外的团队交流，都需要你主动去找机会才有可能获取的。</p><p>主动规划工作任务，主动跟别人了解更多信息，合起来就是我说的 <strong>主动做事</strong>。 <strong>主动做事的人，比等着别人安排的人更容易晋升</strong>，这就是我总结的第一条原则， <strong>主动原则</strong>。</p><p>掌握主动原则之后，我们就知道要具体要怎么做了。</p><p>第一，我们要主动找主管沟通工作。</p><p>不管主管是什么风格，你都应该 <strong>定期或者不定期</strong> 地找他沟通关于工作任务的想法和意愿。一方面是听听他对自己的看法，获取指导建议；另一方面，你也可以借此机会了解更多关于团队、业务和部门的信息，有机会的情况下尽量主动承担有挑战性的工作。</p><p>不要以为主管会自己把知道的所有信息都一一跟组员分享。很多隐藏信息、非正式信息和小道信息，如果你不主动找他聊天，他不一定跟你讲的。</p><p>第二，我们要主动找别人沟通，了解更多信息。</p><p>很多人害怕主动找别人要东西，可能有性格方面的原因，但更主要的原因还是动力不足。如果你能够意识到主动沟通带来的价值，很多时候就敢放开手脚干了。这就像一个笑话说的，一个人问：“打一巴掌给100块，你干不干？”结果另一个人回答说：“我能让你打到破产。”</p><p>怎么获得动力呢？有个方法特别有效，就是从晋升答辩的角度来看。每当你想退缩的时候，就可以问问自己：“如果评委问到这个问题，自己能回答上来吗？”</p><p>事实上，晋升答辩的时候评委很可能会对这些问题感兴趣，比如“这个业务上线后效果怎么样？”“没有达到预期，主要原因是什么？”“机房的部署结构是什么样的？”“新加坡机房跟美国机房怎么同步？”……想到这一层，你就会逼着自己去沟通了。</p><h2 id="成长原则：不断挖掘成长点"><a href="#成长原则：不断挖掘成长点" class="headerlink" title="成长原则：不断挖掘成长点"></a>成长原则：不断挖掘成长点</h2><p>掌握了主动原则之后，你是不是已经壮志满怀，准备好大包大揽地干活儿了呢？先等一下，这里可能还有两个思维陷阱等着你。</p><p>第一个陷阱是， <strong>以为事情做得多，自然就能晋升。</strong></p><p>这个陷阱很有迷惑性。不过你仔细想想，一匹马拉磨拉了10年，另一匹马则是征战10年，这两匹马的经验能一样吗？虽然拉磨的马走的距离可能更长，但如果征战的马见过的场面一定更复杂、更多样。</p><p>其实人也是这样。只做自己会做的事情，不断地重复，你只会变成熟练工，而不会成为技术专家。所以，不要把1年的工作经验重复10年，而要真正积累10年的工作经验。</p><p>第二个思维陷阱更有迷惑性，那就是 <strong>以为事情做得好，自然就能晋升。</strong></p><p>很多人都有一种朴素的想法：“我把老板安排的任务做完，保证效率和质量，拿到好的绩效，晋升肯定没问题。”结果，他们虽然拿到了好的绩效，但晋升却屡屡碰壁。</p><p>为什么会出现这种情况呢？因为不同级别的能力要求是有本质的区别的，而不仅仅是熟练度的区别。能够把事情做好，只能说明你已经熟练掌握当前级别所要求的能力，但并不一定意味着你的能力就自动达到下一职级的要求了。</p><p>现在，你可能觉得更乱了，怎么多做事、把事情做好反倒不对了呢？其实，多做事、把事情做好，当然是有用的。但它们的作用，主要体现在帮你拿到更好的绩效，更多的奖金和一定程度的工资提升。至于晋升，不光要看功劳和苦劳，更要看成长。</p><p>所以， <strong>一边做事一边挖掘成长点、提升自己能力的人，比光顾着做事的人更容易晋升</strong>，这就是我总结的第二条原则， <strong>成长原则</strong>。</p><p>现在我们再来看看，基于成长原则，我们做事时正确的做法是什么。</p><p>如果现在的工作，你已经可以得心应手地轻松完成了，就应该尝试更高难度、更高复杂度的事情了，而不是一味地刷熟练度，沉迷在自我感觉良好的状态里。</p><p>比如你一直做业务开发，已经成为了组里的骨干，不但效率高，而且质量又好。那么你就可以试着完成方案设计、架构设计、架构重构和系统优化等工作。</p><p>另外，不管事情做好了还是没做好，你都应该多做复盘总结，找到可以提升优化的点。</p><p>对于踩了坑、犯了错的事情，你肯定知道要复盘，毕竟教训的印象是非常深刻的；但是做得顺利的事情，你可能做完就完事了，不会主动去挖掘可以成长的点，这样无形中就失去了很多成长的机会，即使把事情做好了，能力提升也不大。</p><h2 id="价值原则：学习为公司产出价值的技能"><a href="#价值原则：学习为公司产出价值的技能" class="headerlink" title="价值原则：学习为公司产出价值的技能"></a>价值原则：学习为公司产出价值的技能</h2><p>掌握了成长原则之后，你是不是又像“打了鸡血”一样，准备好好学习，提升几项技能了呢？别着急，我先给你讲一个真实的故事。</p><p>有一次，一个老同学问我：“华仔，你是怎么学习编译原理的？”</p><p>我觉得有点奇怪，因为他是做Android App业务开发的，怎么会想到要学编译原理呢？于是，我们有了下面这段对话。</p><p>我问：“你怎么想到学编译原理了？”</p><p>他说：“编译原理是所有编程语言的基础，这个算基础的技术能力吧，我觉得肯定要学。”</p><p>我又问：“你们什么时候会用到编译原理呢？”</p><p>他想了一会，说：“好像没有用到的时候。不过我觉得，多学点技术总没坏事，说不定哪天就用上了。”</p><p>我接着问：“那你学了多久了，效果怎么样？”</p><p>他叹了口气，说：“学了半年了，但是感觉没学懂，所以来问问你，看看你有什么经验。”</p><p>我说：“我也不懂，而且我建议你别学了。编译原理虽然是基础技术，但它跟你现在的工作基本没有什么关系，学习编译原理并不能让你把开发做得更好，或者给你的业务带来新的有用的功能。”</p><p>我想你一定能看出来，这位老同学很有上进心，也非常努力。但是很遗憾，编译原理这个技能对他目前的工作其实没什么帮助。换句话说，如果 <strong>从晋升角度考虑</strong>，他学习的技能无法为当前的公司创造价值，这六个月的时间其实白白浪费掉了。</p><p>为什么我会这么说呢？其实你站在公司的角度来看，就很好理解了。</p><p>公司设计职级体系的初衷，是为了衡量不同员工的能力级别，然后根据级别来制定相应的薪酬、福利、管理等制度，同时鼓励员工尽量提升自己的能力，为公司产出更大的价值。</p><p>这里面有两个关键点， <strong>能力级别</strong> 和 <strong>公司价值</strong>，但是大部分人都只关注了能力级别，而忽略了公司价值这个点。</p><p>这也是晋升和面试最大的区别之一。面试的时候，面试官主要考察你的能力级别，因为这时候没有办法准确评估你能为公司带来的价值；但是在晋升的时候，不论你把能力吹得多么天花乱坠，如果不能体现在对公司价值的实际产出上，那一切都是废话。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/2e777d307d0dc283db0ec30995d43926.jpg"></p><p>所以，也许你为了晋升，花了很多的时间和精力来提升一些“很重要”“很基础”的能力，但实际上它们可能对你的晋升根本起不到什么作用。学习编译原理，研究Linux内核源码，天天刷LeetCode题目，关注人工智能发展前沿……这些都是技术人员提升能力的时候经常踩的坑。</p><p>当然，我绝对不是说这些技能一定没有用，任何人都不应该学；而是说如果你想晋升，在投入时间和精力学一项技能之前，不妨先思考一下，你学了这个，能为公司带来什么。</p><p><strong>有能力为公司产出价值的人，比空有一身能力的人更容易晋升</strong>。这就是我总结的第三条原则， <strong>价值原则</strong>。</p><p>所以，能为公司产出价值的能力，才是值得优先学的能力。现在我们以“人工智能”为例，用价值原则来判断一下，如果你的时间很宝贵，还值不值得学。</p><ul><li>如果你是P5&#x2F;P6级别，做Android App业务功能开发，那么用不着学人工智能，因为你现在主要工作还是把开发任务做好。</li><li>如果你是P7&#x2F;P8级别，是带一个团队做Android开发的Team Leader，或者是负责App架构设计的技术专家，可能就有必要学人工智能了，因为你需要规划和思考团队与业务下一步的技术演进方向跟实施步骤。</li><li>如果你是P9级别，那么不管是什么技术方向，肯定都要了解人工智能，因为这是一个新的技术领域和方向，而新的技术往往会带来业务上质的突破。</li></ul><p>价值原则除了告诉我们某项技能值不值得学以外，还能告诉我们要学到什么程度。还是以“人工智能”为例，不同的人来学，学习的方法和深度也是不一样的，一定要避免陷入“学习等于看源码”这个误区。</p><ul><li>如果你是做算法的，人工智能应用场景、算法原理、框架源码都需要去学习；</li><li>如果你是做App开发的，学习的重点可能就是人工智能的原理和应用场景了；</li><li>如果你是P9级别，学习的重点可能是人工智能的基本原理、行业的发展现状、成功和失败的案例，还有相关的产业链信息。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在我们做个总结，这一讲我为你介绍了三条晋升的核心原则：</p><ol><li>第一条原则是主动原则，主动做事的人，比等着别人安排的人更容易晋升。所以你应该定期或者不定期地主动找主管沟通，交流关于工作任务的想法和意愿，寻求机会；同时，你也要主动找同事沟通，了解更多工作相关信息。</li><li>第二条原则是成长原则，一边做事一边挖掘成长点、提升自己能力的人，比光顾着做事的人更容易晋升。所以如果你已经能得心应手地完成现在的任务，就应该主动跳出舒适区，尝试更高难度和更高复杂度的事情；同时，不管事情做好了还是没做好，你都应该多做复盘总结，找到可以提升优化的点。</li><li>第三条原则是价值原则，有能力为公司产出价值的人，比空有一身能力的人更容易晋升。所以，如果你的时间很宝贵，就应该优先学能为公司产出价值的技能。</li></ol><p>当你理解了这些原则，并且在实际做事过程中有意识地去应用这些原则之后，既能够为公司创造更大的价值，拿到好的绩效；又能够快速地提升自己的能力，满足晋升的要求。下次晋升的不是你，还能是谁呢？</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧：你觉得自己日常工作中违背了这一讲提到的哪些原则，具体是如何表现的？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/a92acc60caee2f9716d436147203e325.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;03-晋升原则：什么样的人更容易晋升？&quot;&gt;&lt;a href=&quot;#03-晋升原则：什么样的人更容易晋升？&quot; class=&quot;headerlink&quot; title=&quot;03 | 晋升原则：什么样的人更容易晋升？&quot;&gt;&lt;/a&gt;03 | 晋升原则：什么样的人更容易晋升？&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>04 | 晋升逻辑：别人怎么判断你有没有达到晋升要求？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/2790644674.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/2790644674.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="04-晋升逻辑：别人怎么判断你有没有达到晋升要求？"><a href="#04-晋升逻辑：别人怎么判断你有没有达到晋升要求？" class="headerlink" title="04 | 晋升逻辑：别人怎么判断你有没有达到晋升要求？"></a>04 | 晋升逻辑：别人怎么判断你有没有达到晋升要求？</h1><p>你好，我是华仔。</p><p>上一讲我介绍了晋升的三大原则，分析了什么样的人更容易晋升，帮你明确了努力的方向。但是努力提升之后，你的能力到底有没有达到晋升的要求呢？</p><p>也许你自己信心满满，但评审的人不一定认可你的能力。如果你的直接主管不认可，你连被提名的机会都没有；如果部门内的管理者不认可，你在预审的时候就会被刷掉；而如果评委团不认可，你在评审阶段还是会倒下。</p><p>那么，什么样的能力水平才经得起不同评审者和不同视角的考核，怎样才能几乎没有争议地顺利晋升呢？</p><p>针对这个问题，我将用连续3讲的篇幅为你给出完整的回答。今天的第4讲，先带你认清判断能力最本质的 <strong>底层逻辑</strong>；第5讲，会教你掌握一套把能力要求具体化的 <strong>通用模型</strong>；第6讲，会带你纵向地透视不同层级对能力的 <strong>核心要求</strong>。</p><h2 id="一些看似客观的常见做法"><a href="#一些看似客观的常见做法" class="headerlink" title="一些看似客观的常见做法"></a>一些看似客观的常见做法</h2><p>接下来，我们就从判断能力的一些常见做法开始讲起。</p><p>在 <a href="https://time.geekbang.org/column/article/313540">第2讲</a> 介绍晋升流程的时候，我曾经说过，在评审阶段正式判断你的能力是否达到晋升要求的是 <strong>评委团</strong>。</p><p>但是在这之前的提名和预审阶段，判断你能力的人，是你的主管，可能还有HR、经理和总监等。这些人并不会像评委那样通过将近一个小时的时间来仔细确认你有没有达到晋升要求，而是会结合你的晋升材料，凭主观感觉来判断。</p><p>实际上， <strong>主管等人</strong> 通过主观感觉来判断你能力的时候，他们的心理压力也很大。因为没有统一的客观标准，就很容易出现 <strong>说服力不足</strong> 的问题。</p><p>对于没有掌握正确判断方法的人来说，为了避免在提名或预审阶段引起争议，他们可能会采取简单粗暴的逻辑， <strong>完全以客观条件为标准</strong>。常见的做法，有下面3种。</p><p>第1种是以 <strong>当前级别的年限</strong> 为标准。比如同样都是P6，你在这个级别待了2年了，而坐你隔壁的老王已经待了4年了，你的主管可能会优先提名老王去晋升。这也是很多人私底下吐槽的“优先保老员工”的现象。</p><p>第2种是以 <strong>工作年限</strong> 为标准。它跟第1种有点像，区别在于它看的是总的工作年限，而不只是在当前级别的工作时间。这也有一定的合理性，因为一些社招员工虽然来公司时间不长，但是他们之前就已经积累了很多工作经验，跟新人还是不一样的。</p><p>第3种是以 <strong>绩效</strong> 为标准。简单地说，就是把绩效跟能力直接挂钩，绩效好就可以去申请晋升。这样做最方便，因为绩效结果是明确的。</p><p>你可能对这些做法很熟悉，甚至觉得很有道理，但其实它们都只是 <strong>看似客观</strong> 而已。</p><p>因为年限和绩效这些条件虽然都是确定的、可以量化的，但是它们跟能力并没有直接的正相关关系。在晋升体系完备的大公司，我从来没见过评委最后靠这些条件，来判断申请者的能力有没有达到晋升要求；相反，评委们在最后总结的时候，会特别提醒主管以下两个要点：</p><ol><li><p><strong>无论什么年限都不是我们判断能力的标准</strong>。花1年时间掌握某项技能然后重复9年，和10年时间不断在提升，两者的能力差距是巨大的。</p></li><li><p><strong>绩效不能等同于能力。</strong> 绩效好有很多种可能的原因，能力强只是其中之一。更何况，公司已经在工资&#x2F;奖金&#x2F;股票方面对绩效进行了回报。至于晋升，它是对“能力提升”的一种认可，不能拿来作为绩效的回报。换句话说， <strong>绩效关注的是业务结果，晋升关注的是能力提升。</strong> 某些人可能在当前级别做事得心应手，可以拿到很好的绩效，但是能力并没有本质的提升。</p></li></ol><h2 id="第一条逻辑：提前做下一级别的事"><a href="#第一条逻辑：提前做下一级别的事" class="headerlink" title="第一条逻辑：提前做下一级别的事"></a>第一条逻辑：提前做下一级别的事</h2><p>既然如此，在“互联网大厂”，评委们怎么判断你有没有达到晋升的要求呢？其实很简单，他们会审查你做过的事情，看看是不是体现了 <strong>下一级别</strong> 需要的能力。</p><p>这就是我分享的第一条晋升逻辑： <strong>在当前级别做下一级别事情的人，才有机会晋升</strong>。</p><p>这条逻辑可能会颠覆你对晋升和工作任务安排的认知。因为按照大部分人的想法，什么级别就做什么事情，只要做好了当前级别的事情，就可以申请晋升，然后到下一级别再去做下一级别的事情。</p><p>然而实际情况是，你得提前做下一级别的事情，做好了才能申请晋升。这也就解释了为什么很多P6和P7做的事情差不多的现象。</p><p>所以，如果要判断自己是不是能够申请晋升了，一种简单有效的方式是， <strong>看你做的事情是不是和下一级别的人类似。</strong> 想晋升的P6就对比P7，想晋升的P7就对比P8……以此类推。</p><p>举个例子，在很多大厂，如果你是P6级别的技术人员，想要申请P7，必须要“带过小项目或者小团队”（3～5人左右）才有机会。如果你一直只是完成别人安排的项目任务，就算做得很熟练，也很难获得提名；就算主管帮你提名了，答辩的时候也很难通过。</p><h2 id="第二条逻辑：做好当前级别的事"><a href="#第二条逻辑：做好当前级别的事" class="headerlink" title="第二条逻辑：做好当前级别的事"></a>第二条逻辑：做好当前级别的事</h2><p>学完第一条晋升逻辑，你可能会想到一条晋升的捷径： <strong>晋升通过之后，立刻跟主管要求安排下一个级别的工作</strong>。这样你就可以按照下一级别的要求来提升自己的能力，很快就能迎来下一次晋升。</p><p>想的是挺美的，但是很遗憾，现实中这样做是行不通的。原因在于，就算是同一个级别，不同的人能力也还是有差异的。主管不敢把下一个级别的事情直接交给刚晋升的人来做。</p><p>所以我们还需要补充第二条晋升逻辑： <strong>只有把当前级别的事情做好了，才有机会晋升</strong>。</p><p>你可能会有疑问：我都晋升这个级别了，肯定已经具备这个级别的能力了，把这个级别的事情做好，不是理所当然的吗？</p><p>其实，真实的晋升逻辑并不是这样理解的。晋升成功只是意味着你的能力达到了当前级别的 <strong>基础</strong> 水平，但还不一定有 <strong>熟练</strong> 和 <strong>精通</strong> 的程度。如果你还想要晋升到下一个级别，就必须先在当前级别达到精通。</p><ul><li>如果是 <strong>跨越式</strong> 职级体系，同级的人其实会被分为几档，例如“P6-&#x2F;P6&#x2F;P6+”、“T2C&#x2F;T2B&#x2F;T2A”。（也有的公司会分为ABCD四档，但B和C的差异很难确定，所以我不推荐这种方式，这里也不多做介绍了。）</li><li>如果是 <strong>阶梯式</strong> 职级体系，同级不同等的人本来就是按照“基础”“熟练”和“精通”来区分的，比如腾讯旧职级体系下的T2.1&#x2F;T2.2&#x2F;T2.3。</li></ul><p>虽然这些档次不一定在管理系统中体现出来，但是在HR和主管的心里一般都会有这样一个级别的划分的。下图展示了这种划分的方式：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/a89dacf914fcb5d2f1b68ea2e0ccfde0.jpg"></p><p>我们可以看到，只有到了精通的程度，你才有机会晋升下一级别。换句话说，只有到了精通的程度，主管才会把下一级别的任务安排给你。这就像游戏王者荣耀一样，在星耀段位内部，还分了星耀V到星耀I一共5个等级，只有星耀I的玩家才能去打王者段位的晋级赛。</p><p>这也是我把P6+和T2.3级别标注为“精通&amp;提升”的原因。因为这个级别的人，既要做当前级别的事情（因为达到了精通的程度，做起来效率高），又要去做下一级别的事情（因为达到了精通的程度，要考虑晋升了）。</p><p>所以你刚完成晋升之后，不要立刻想着做下一个级别的事，急着晋升到下一级别；而应该先考虑怎么把当前级别的事情做好，把当前级别的能力提升到“精通”的程度。</p><h2 id="基础、熟练和精通的区别"><a href="#基础、熟练和精通的区别" class="headerlink" title="基础、熟练和精通的区别"></a>基础、熟练和精通的区别</h2><p>刚才我介绍的这两条晋升逻辑，都涉及一个关键的问题： <strong>怎么区分基础、熟练和精通呢？</strong></p><p>这其实是一个世界难题，到目前为止，还没有明确客观的标准可以直接套用。不过呢，我根据自己的经验和理解，总结出了一套相对比较容易操作的标准。我来简单描述下这套标准，你可以看看是不是很好用。</p><p><strong>基础意味着“会做”</strong>。如果你会做某个级别要求的事情，就说明已经具备了基础能力。当然，这里的“会”是指能够 <strong>独立自主</strong> 地完成，而不是别人想好之后告诉你，你再按照别人的话去做。</p><p><strong>熟练意味着“做好”</strong>。跟基础不同，熟练是指能够把当前级别的事情做好。做好体现在做事熟练，掌握了做事的 <strong>最佳实践</strong>，能够保证效率和质量，能够拿到好的结果。</p><p><strong>精通意味着“优化”</strong>。精通是指能够 <strong>优化</strong> 当前级别的事情，比如采取不同的方式、思维和工具来做同样的事情，并取得突破。</p><p>如果要再区分一下“做好”和“优化”，我们可以这么理解：做好只是意味着掌握了别人总结的成熟经验，而优化意味着你自己创造了 <strong>新的经验</strong>。</p><p>什么算“新的经验”呢？并不是说要“全球首创”，而是说在自己所处的环境中（团队、业务线、公司等）是新的。比如“微服务”架构，别的公司可能早就在用了，但如果把它引入到这家公司的人是你，这就算你的优化成果。</p><p>另外还要注意的是，我总结的这套标准，是用来判断在 <strong>某个级别</strong> 所要求的能力，而不是 <strong>单项技能</strong> 的水平。</p><p>比如，你从事开发工作，P5&#x2F;P6的核心职责是项目开发，而项目开发会涉及到业务理解、项目计划、编程语言和 Bug 修复等一系列的单项技能。对于这些具体技能的水平，用技术广度或者技术深度来区分会更合适。</p><h2 id="通用的晋升步骤"><a href="#通用的晋升步骤" class="headerlink" title="通用的晋升步骤"></a>通用的晋升步骤</h2><p>现在，我们掌握了两条关键的晋升逻辑，知道了主管和评委团是如何判断你有没有达到晋升要求的。再结合第3讲的晋升原则，我们就可以推导出适用于各个级别的 <strong>通用晋升步骤</strong> 了。具体来说，分为以下4步：</p><p>第1步，按照晋升原则的指导，在当前级别拿到好的结果，为公司创造价值，同时把当前级别要求的能力提升到精通程度（比如从P6-到P6+），这样你才有机会成为晋升备选人员。</p><p>第2步，到了精通程度之后，对照下一级别的要求来提升自己的各种能力（比如到了P6+之后，按照P7-的要求来提升自己），为可能的晋升机会做好准备。</p><p>第3步，主动寻找工作机会，尝试做下一个级别事情（比如提升了P7的能力之后，找P7级别做的事情来做，争取成为负责人，主导事情的推进和落地），继续拿到好的结果，向主管证明你具备下一级的能力。</p><p>第4步，拿到工作结果之后申请晋升，向评委介绍你做过的事情，展示相关的能力和结果，证明自己具备了下一级别要求的能力。</p><p>按照这个步骤来，你的晋升肯定就会容易很多。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，我们回顾一下这一讲的主要内容。针对能力判断的问题，我剖析了晋升的底层逻辑，并在此基础上提炼了一个通用的行动步骤。你需要记住的重点有这4条：</p><ol><li>晋升的第一条逻辑是，在当前级别做下一级别事情的人，才有机会晋升。</li><li>晋升的第二条逻辑是，只有把当前级别的事情做好了，才有机会晋升。</li><li>基础、熟练和精通三种水平的区别是，基础意味着会做，标志是能够独立完成；熟练意味着做好，标志是掌握最佳实践；精通意味着优化，标志是创造新的经验。</li><li>通用的晋升步骤是，先把当前级别要求的能力提升到精通水平，接着按照下一级别的能力要求继续提升，然后主动寻找工作机会，尝试下一个级别的工作，最后拿着工作成果申请晋升。</li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧：对照两条晋升逻辑评估一下自己的现状，你觉得自己可以去尝试申请晋升了么？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/046c4ffc98ddff0bf5a9a4d26319eec1.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;04-晋升逻辑：别人怎么判断你有没有达到晋升要求？&quot;&gt;&lt;a href=&quot;#04-晋升逻辑：别人怎么判断你有没有达到晋升要求？&quot; class=&quot;headerlink&quot; title=&quot;04 | 晋升逻辑：别人怎么判断你有没有达到晋升要求？&quot;&gt;&lt;/a&gt;04 | 晋升逻辑</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>05 | COMD能力模型：怎么把抽象的能力要求具体化？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3884438977.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3884438977.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="05-COMD能力模型：怎么把抽象的能力要求具体化？"><a href="#05-COMD能力模型：怎么把抽象的能力要求具体化？" class="headerlink" title="05 | COMD能力模型：怎么把抽象的能力要求具体化？"></a>05 | COMD能力模型：怎么把抽象的能力要求具体化？</h1><p>你好，我是华仔。</p><p>上一讲我分享了两条晋升逻辑和一套通用的晋升步骤。现在你已经知道，要先把当前级别要求的能力提升到精通程度，然后尝试做下一级别的事情。</p><p>不过在这个过程中，你还会遇到另一个麻烦，那就是不确定下一级别的能力要求到底是怎样的，所以你也不知道究竟要准备到什么程度。</p><p>举个最常见的例子，不同级别有不同的Title（头衔），比如“工程师”“高级工程师”和“专家工程师”等。但是，这样的 Title 对我们理解不同级别的能力要求，是完全没有什么用处的。“高级工程师”到底“高级”在哪，可能每个人的理解都不一样。</p><h2 id="公司统一的能力描述：抽象"><a href="#公司统一的能力描述：抽象" class="headerlink" title="公司统一的能力描述：抽象"></a>公司统一的能力描述：抽象</h2><p>为了指导员工晋升，公司一般都会对各个级别的能力要求给出描述。但是因为细分的领域实在太多了，所以公司只能进行非常抽象的描述。</p><p>比如，P7的要求是“具备系统思考的能力，能够全面掌握某个技术领域”，而P8的要求是“具备前瞻判断的能力，能够规划技术领域的发展方向”。</p><p>从实际的效果来看，这样的描述 <strong>基本没什么效果</strong>，绝大部分人看完还是一头雾水。在实际工作中，团队成员经常跟我反馈这样的困惑：</p><ul><li>什么是 <strong>系统思考</strong> 能力？P7才要求系统思考，可是我P6的时候参与项目开发，就需要考虑需求的合理性、索引设计高性能、接口的兼容性和易用性、上线的灰度方案这么多事情，这些难道不是系统思考吗？</li><li>什么是 <strong>前瞻判断</strong> 能力？P6要预测需求变化，P7要规划团队技术发展，这些也是前瞻判断呀，为什么P8要特别强调前瞻判断？</li></ul><p>可以说，晋升疑惑千千万，能力要求占一半。这一讲我要介绍的就是把抽象要求具体化的方法。</p><h2 id="领域定制的能力解读：比较具体"><a href="#领域定制的能力解读：比较具体" class="headerlink" title="领域定制的能力解读：比较具体"></a>领域定制的能力解读：比较具体</h2><p>因为公司的抽象描述很难指导实际工作，所以有些领域会独立定制自己的职级能力解读，一般是由P8或P9级别的员工以工作组的方式讨论得出来的。</p><p>比如“Java业务开发”这个领域，P6和P7级别的能力解读长什么样呢？你可以参考下面的表格。</p><p>（注：这张表格仅供参考。它不是完整的解读，不代表所有公司的实际要求。你也不需要看懂里面的所有内容，只要了解这个形式就可以了。）</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/0653e9a2yy8b3660d402fd70031190b7.jpg"></p><p>我们可以看到，这份标准跟公司的描述相比，已经具体很多了。如果按照这个思路，完整地把各个级别要求的能力一一列出来，不但可以作为晋升的标准，也可以作为学习的参考。</p><p>其实这种做法对员工是有利的，因为标准越明确，就越容易“照本宣科”地去做。但是从公司的角度来看，这种做法存在成本太高（有几十上百个专业领域要制定详细标准，每年都要更新）、限制创新（大家都只管对照公司标准来做事，其它一概不管）等问题，所以很少有公司会这么做。</p><h2 id="COMD能力模型：4种复杂度-3个维度"><a href="#COMD能力模型：4种复杂度-3个维度" class="headerlink" title="COMD能力模型：4种复杂度+3个维度"></a>COMD能力模型：4种复杂度+3个维度</h2><p>为了彻底解决要求不明确的问题，让你更好地理解不同职级的能力差异，我根据自己的思考和担任晋升评委的经验，提炼出了一套兼容性很强又容易理解的能力模型： <strong>面向复杂度的多维度能力模型</strong>（Complexity-Oriented &amp; Multi-Dimension Capability Model），简称 <strong>COMD能力模型</strong>。</p><p>COMD的CO是指Complexity-Oriented，意思是“面向复杂度”（灵感来源于“面向对象”）；MD是指Multi-dimension，意思是“多维度”，也就是技术、业务和管理3个维度。</p><p>COMD的核心指导思想是， <strong>通过事情的复杂度来判断能力的高低</strong>，级别越高，所做的事情复杂度也越高。</p><p>当然，如果只是单纯地用复杂度来判断能力高低，那么它本质上和其他方法也没什么不同，看不懂的地方还是看不懂，不同的人理解还是不同。</p><p>所以，为了清晰地描述不同能力层级的差异，COMD能力模型还进一步地明确了复杂度，具体包括规模复杂度、时间复杂度、环境复杂度和创新复杂度4种类型。</p><h3 id="1-规模复杂度"><a href="#1-规模复杂度" class="headerlink" title="1. 规模复杂度"></a>1. 规模复杂度</h3><p>规模复杂度是指和规模大小有关的复杂度。</p><p>规模越大，复杂度越高。原因在于规模越大，节点越多，节点间的关系越复杂，而且节点间的关系复杂度是指数增长的。就像下面的图片所展示的：当节点数只有3个时，节点间的关系也只有3个；而节点数达到6个时，节点间的关系就变成了15个，复杂度提升了5倍。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/eayyd87a3cf233299b58bb632e68a959.jpg"></p><p>按照这个原理，我们可以对一些常见工作维度的规模复杂度进行比较，具体如下表所示。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/a3d429b12fb94f239f6fac84376cb10c.jpg"></p><p>当然，以上对比的前提是，除了规模之外，其他条件都差不多。（对比其他几个复杂度时也是这样）。就像表格中200行代码和2000行代码对比，前提是代码复杂度是差不多的。因为200行核心代码的复杂度，显然比2000行拷贝粘贴的代码要高。</p><h3 id="2-时间复杂度"><a href="#2-时间复杂度" class="headerlink" title="2. 时间复杂度"></a>2. 时间复杂度</h3><p>时间复杂度是指和时间跨度有关的复杂度。</p><p>时间跨度越长，复杂度越高。原因在于万事万物都处于不断发展变化当中，时间跨度越长，变化的因素和可能方向越多，越难判断准确。</p><p>三大维度的时间复杂度的对比举例如下表所示。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/c742fb1d759eccccf5d2489f7be5bf95.jpg"></p><h3 id="3-环境复杂度"><a href="#3-环境复杂度" class="headerlink" title="3. 环境复杂度"></a>3. 环境复杂度</h3><p>环境复杂度是指和环境不确定性有关的复杂度。</p><p>我们很多的判断、决策和行为都依赖于对环境的认知和反应。总的来说，环境不确定性越高，复杂度越高。</p><p>环境的不确定性具体分为环境的稳定性、环境的透明性和环境的可预见性3个方面：</p><ul><li>环境的稳定性，指环境变化的速度快慢。</li><li>环境的透明性，指是否能够明确地获取环境相关的信息。</li><li>环境的可预见性，指是否会发生完全无法预料的黑天鹅事件。</li></ul><p>环境的稳定性、透明性和可预见性越低，它的不确定性就越高，复杂度也越高。</p><p>下面这个表格从宏观的角度分析了技术、管理和业务三个维度所面临的环境不确定性。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/b501ac73ffe078e0674d72f17d85b49e.jpg"></p><p>从表格中可以看出，对于互联网行业的业务来说，环境稳定性、透明性和可预见性都比较低，所以它的环境复杂度是最高的。这也是在互联网大厂，大部分P9&#x2F;P10都需要把很多时间和精力投入到业务上的主要原因。</p><h3 id="4-创新复杂度"><a href="#4-创新复杂度" class="headerlink" title="4. 创新复杂度"></a>4. 创新复杂度</h3><p>创新复杂度是指和创新程度有关的复杂度。</p><p>常见的创新包括理论的创新、思想（或者说方法）的创新和技巧的创新。理论创新的复杂度要高于思想创新，而思想创新的复杂度又高于技巧创新。</p><p>以高可用技术领域为例：</p><ul><li>FLP原理和CAP定理属于 <strong>理论创新</strong>。它们奠定了分布式高可用设计的基础和边界，无论是缓存系统、存储系统、批处理系统、流式处理系统还是采用微服务架构的业务系统等，都不能跳出这两个理论的约束和限制。</li><li>批处理和流处理属于 <strong>思想创新</strong>。对于大数据技术来说，一开始Google提出的批处理思路开启了大数据时代，而后来Storm开启了流处理这个新的技术领域。</li><li>实现Exactly Once特性属于 <strong>技巧创新</strong>。开源框架Flink使用Chandy-Lamport 算法，实现了流处理Exactly Once的特性，能够实现消息精确投递，避免重复消息导致业务出错。</li></ul><p>我们可以看到，创新复杂度越高，影响的范围往往也越大。理论创新会奠定整个行业的基础，而思想创新可能开辟一个新的技术领域。</p><p>另外，创新并不意味着一定要全球首创，只要相比团队当前现状来说有改进就行了；创新也不局限于技术领域，管理和业务一样可以创新。所以，下面这些事情都可以算是创新：</p><ol><li>开发Memcache</li><li>有了Memcache后开发Redis</li><li>引入设计模式优化代码</li><li>使用微服务来拆分系统</li><li>优化项目流程</li><li>提出一种新的业务模式</li></ol><p>三个维度的部分典型创新案例如下表所示，你可以参考对照。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/5cae1a8ed6d5ba85179d313a583de368.jpg"></p><p>除了刚才说的这4种通用的复杂度之外，在每个领域内部，也会有一些工作的复杂度本身就要比另一些工作高。</p><p>比方说在软件开发领域，我们一般认为各项工作的复杂度排序是这样的：</p><p>$$从0到1创造系统 &gt; 架构重构 &gt; 项目方案设计 &gt; 编码实现$$</p><p>不过这些认知是领域经验总结形成的共识，并不能通用。所以在使用COMD模型的时候，你还是需要结合领域经验综合判断。</p><h2 id="COMD与抽象描述的对比"><a href="#COMD与抽象描述的对比" class="headerlink" title="COMD与抽象描述的对比"></a>COMD与抽象描述的对比</h2><p>我想，你现在应该知道为什么公司写的那些抽象描述让人看不懂了。跟COMD能力模型的具体拆解比起来，它们只是脱离实际的文字游戏罢了。我就拿这一讲开头提出的“系统思考”和“前瞻判断”来说好了。</p><h3 id="系统思考"><a href="#系统思考" class="headerlink" title="系统思考"></a>系统思考</h3><p>比如在某些大厂，“系统思考”的确是写在P7级别的能力描述里，但它不是P7级别才有的能力特征。实际上，P6以上的级别都要求“系统思考”，区别只是 <strong>思考的范围</strong> 不同，也就是 <strong>规模复杂度</strong> 不同而已。</p><p>以B2C电商业务开发为例，在某些大厂，不同级别“系统思考”的范围如下图所示：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/256f46afaff6edb59ba7b1bf4ee47f76.jpg"></p><ul><li>对于P6来说，系统思考的范围是某个 <strong>需求</strong>，需要考虑需求的合理性、设计的可扩展性和上线后的稳定性等问题。</li><li>对于P7来说，系统思考的范围是单个 <strong>系统</strong>，需要考虑的是单个系统的架构设计、架构重构和技术选型等问题。</li><li>对于P8来说，系统思考的范围是某个 <strong>领域</strong>，需要考虑的是领域的发展趋势、架构演进、团队组织结构等问题。</li><li>对于P9来说，系统思考的范围是多个关联的业务域组成的 <strong>业务线</strong>，需要考虑业务发展趋势、架构演进、团队组织结构等问题。</li></ul><h3 id="前瞻判断"><a href="#前瞻判断" class="headerlink" title="前瞻判断"></a>前瞻判断</h3><p>同样地，在某些大厂，“前瞻判断”虽然写在了P8的能力描述里，但其实P6以上都有前瞻性的要求，区别只是在于前瞻范围、时间跨度和面临的环境不同而已。这些因素就分别对应了规模复杂度、时间复杂度和环境复杂度。</p><p>同样以B2C电商业务开发为例，某些大厂P6～P9级别的前瞻性要求如下表所示：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/7901c8dc04db3d0edef3003eba2e06a7.jpg"></p><p>所以说，如果你还在绞尽脑汁地钻研“为什么P7才提出系统思考”以及“P8要求的前瞻判断有什么深意”这样的问题，那就掉到文字陷阱的坑里去了，白白浪费脑细胞。至于怎么从坑里走出来呢？这就需要灵活应用COMD能力模型了。</p><h2 id="如何应用COMD"><a href="#如何应用COMD" class="headerlink" title="如何应用COMD"></a>如何应用COMD</h2><p>当你想要了解某个级别的能力要求的时候，不要再对着那些抽象和模糊的词语，不着边际地猜测和想象了。你应该静下心，坐下来填一个“能力矩阵”的表格，把每一项的要求都完整且具体地列出来。比如下面这个“能力矩阵”表格就摘录了P6级别的部分要求，可以作为参考。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/b10dcec32eb291c464da50636c2c3572.jpg"></p><p>如果表格里有些内容你填不出来，说明你对这个级别的理解还不到位。不过没有关系，我会在课程的第二部分，也就是职级详解中给出每个级别通用的衡量标准。</p><p>在这个基础上，你可以请教你的主管、HR和同事等人，来完善和细化表格内容。当你详细地填完了这个表格，你也就对这个级别了解得很清楚了。接下来，你就可以对照表格，针对性地提升自己的能力。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，我们回顾一下这一讲的主要内容。</p><ol><li>公司会对各个级别的能力要求给出一个抽象的描述，比如“系统思考”和“前瞻判断”等，但实际指导意义不大。</li><li>有些领域可能会独立定制相关技术方向的能力解读。虽然这种解读比公司的抽象描述稍微具体一些，但因为投入成本太大和限制创新等原因，很难大范围推广。</li><li>我总结的COMD能力模型，把能力分成技术、管理和业务三个维度，并通过规模、时间、环境和创新四个复杂度来判断能力的高低。</li><li>如果你想了解某个级别的能力要求，为晋升做准备，可以把这个级别的能力模型表格列出来，然后针对表格内容做针对性的提升。</li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，最后留一道课后思考题给你吧。记得有一次，团队成员跟我探讨职级的时候，问了我一个问题：“为什么说P6是独当一面，难道P7、P8和P9没有独当一面的要求吗？”学了COMD能力模型之后，你会怎么回答这个问题呢？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/83211d404c6701c8791c59df4170bb96.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;05-COMD能力模型：怎么把抽象的能力要求具体化？&quot;&gt;&lt;a href=&quot;#05-COMD能力模型：怎么把抽象的能力要求具体化？&quot; class=&quot;headerlink&quot; title=&quot;05 | COMD能力模型：怎么把抽象的能力要求具体化？&quot;&gt;&lt;/a&gt;05 | C</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>06 | 职级档次：你现在应该具备的核心能力是什么？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/1269041337.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/1269041337.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="06-职级档次：你现在应该具备的核心能力是什么？"><a href="#06-职级档次：你现在应该具备的核心能力是什么？" class="headerlink" title="06 | 职级档次：你现在应该具备的核心能力是什么？"></a>06 | 职级档次：你现在应该具备的核心能力是什么？</h1><p>你好，我是华仔。</p><p>上一讲我介绍了COMD能力模型，让你能够具体拆解一个级别的能力要求，不再纠结于抽象的描述。但你可能还是不清楚每个级别到底要求什么。这些具体要求，我会在课程第二部分，也就是 <strong>职级详解</strong> 部分一一介绍。</p><p>不过在这之前，我想先通过三个类比带你纵向透视职级档次，对不同档次的核心能力建立一个形象的认知。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/4bccb93fyyc2e9efb3315148d481374e.jpg"></p><h2 id="P5-P6：专业工匠"><a href="#P5-P6：专业工匠" class="headerlink" title="P5&#x2F;P6：专业工匠"></a>P5&#x2F;P6：专业工匠</h2><p>P5&#x2F;P6这一档相当于“专业工匠”，就像木匠、铁匠、粉刷匠一样，核心能力是 <strong>完成任务</strong>。</p><p>这里的任务是指每个岗位需要完成的事情，比如开发岗位需要完成代码编写，测试岗位需要完成测试用例执行。</p><p>P5和P6的职责一样，比较简单，不需要太多解读。这两个级别的区别是，P5需要 <strong>在别人的指导下</strong> 完成工作，而P6可以 <strong>独立</strong> 完成工作。其实只要有意愿在技术领域发展， <strong>基本上每个人都能达到P6的水平</strong>。</p><p>P5&#x2F;P6的核心职责如下表所示。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/c66280b04f93cf3ccd6c82bf8a0bd487.jpg"></p><p>需要强调的是，这里列举的只是一个岗位的核心职责，并不代表这个岗位只做这些事情，比方说开发岗位的P7&#x2F;P8也是要参与编码的。</p><p>另外，这里只列举了开发、测试和运维这些技术岗位的职责。产品、运营和市场等非技术岗位的同学，也可以根据你掌握的信息来整理你所在岗位的核心职责表格。</p><h2 id="P7-P8：乐团指挥"><a href="#P7-P8：乐团指挥" class="headerlink" title="P7&#x2F;P8：乐团指挥"></a>P7&#x2F;P8：乐团指挥</h2><p>P7&#x2F;P8这一档相当于“乐团指挥”，核心能力是 <strong>指挥团队</strong>。</p><p>为什么我要这么类比呢？因为P7&#x2F;P8的职责和乐团指挥的职责非常相似。乐团指挥的核心工作职责，具体可以分为三个阶段：</p><p>第一阶段是总谱研究，对总谱进行深入细致的研究分析，识别和标注演奏的重点、难点和风险点。</p><p>第二阶段是排练准备，明确演奏需要的人手和乐器，根据乐团情况制定排练计划。</p><p>第三阶段是正式排练，拆解具体排练步骤（比如个体练习、分声部练习和全体排练等），抓好每一个关键环节的落实，做好风险预防措施，推动整个乐团完成演奏。</p><p>P7&#x2F;P8的任务和乐团指挥非常像，也可以分为三个阶段，跟乐团指挥的三个阶段正好一一对应。你只要把总谱换成团队的工作目标，把人手和乐器换成资源，把演奏排练换成工作目标落地就行了。</p><p>首先是 <strong>分析阶段</strong>，对应乐团指挥的总谱研究；然后是 <strong>计划阶段</strong>，对应排练准备；最后是 <strong>落地阶段</strong>，对应正式排练。我把这个对应关系总结在了下面的表格里。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/1fe4ea49e3ea5435c73406d4be2e3c88.jpg"></p><p>那么P7和P8的区别是什么呢？P7只需要指挥 <strong>单个</strong> 团队，而P8往往要指挥 <strong>多个</strong> 团队。</p><p>另外还需要补充一点，我这里说的“团队”，包括两种类型：</p><ol><li>狭义上的团队：组织结构上的行政级别团队，比如P7担任的3～10人团队的Team Leader，负责团队管理、团队规划、团队考核和团队建设等管理职责。</li><li>广义上的团队：为了完成某个目标而成立的虚拟团队（或者说临时团队），比如某个项目投入的人员组成了“项目团队”（由公司立项成立），某个专项任务投入的人员组成了“专项团队”（由管理者安排，比如“研发效能提升工作组”）。</li></ol><p>P7&#x2F;P8的核心职责如下表所示。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/f651082f46406950985568e639f082c2.jpg"></p><h2 id="P9-P10：电影导演"><a href="#P9-P10：电影导演" class="headerlink" title="P9&#x2F;P10：电影导演"></a>P9&#x2F;P10：电影导演</h2><p>P9&#x2F;P10这一档相当于“电影导演”，核心能力是 <strong>导演作品</strong>。</p><p>为什么我会这么类比呢，因为P9&#x2F;P10的工作跟电影导演很像，具体表现在三个方面：</p><p><strong>第一，他们的工作都具有一定的规模。</strong></p><p>比如说你只是拍一段60秒的vlog，还算不上电影导演；真正的电影导演拍出来的是几十分钟以上，剧本、服饰、化妆、道具、表演、运镜和剪辑都非常成熟的作品。同样地，P5～P8这几个级别的工作都会产出一些成果，但这些成果在规模上还不足以跟P9&#x2F;P10这个级别相比。</p><p><strong>第二，他们都是总决策者。</strong></p><p>在一个剧组里，一般情况下导演就是老大，有绝对的话语权。同样地，虽然P6可以指导别人，P7&#x2F;P8可以带团队，但工作仍然会在很大程度上受到制约，关键的目标制定、资源整合和关键决策的工作，还是得由P9&#x2F;P10来完成。</p><p>具体一点说，P9&#x2F;P10需要制定有挑战的业务目标；整合不同的团队，包括多个技术团队（比如Android、iOS、前端、Java后端、测试、运维等）和多个业务团队（比如腾讯的广告平台的某个业务，可能涉及QQ、微信和应用宝等多个业务团队）；做出关键决策（例如要做什么、不做什么、先做什么和后做什么等）。</p><p><strong>第三，他们都是总负责人。</strong></p><p>一部电影作品会打上导演的烙印，甚至呈现出强烈的导演个人风格。电影拍得不好，观众第一个骂的就是导演；拍得好，赞美和荣誉也首先给到导演身上。</p><p>同样地，P9&#x2F;P10的水平、眼界、价值观和做事风格，直接决定了一条业务线的质量，因为这些因素会体现在工作过程中的各种决策里面，决定了最终的呈现效果。</p><p>另外，导演往往有自己擅长的题材，比如文艺片、喜剧片；而P9&#x2F;P10一般也都聚焦于某个业务或者专业领域，比如电商业务、出行业务、安全领域、算法领域，很少有跨领域样样精通的人才。</p><p>P9和P10的核心差异在于成果质量。我还是拿电影导演来类比，P9是 <strong>成熟</strong> 的导演，能拍出7分以上的作品（基本合格）；P10是 <strong>成名</strong> 的导演，能拍出8分以上的作品（比较优质）。</p><p>虽然对于P9&#x2F;P10的工作成果，并没有一个通用的打分机制，但是公司能通过一些硬指标来衡量，最典型的就是直接看业务结果。</p><p>如果你负责的业务结果实现了既定的业务目标，那么你就是成熟的导演，可以胜任P9；如果你负责的业务结果按照某个标准（用户量、收入和权威机构的测评等），进入了业界前列，有一定的名气和影响力，那么你就是成名的导演，可以胜任P10。</p><p>P9&#x2F;P10的核心职责如下表所示。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/eeb6175e8cae4e11c290907be255d8c5.jpg"></p><h2 id="这些类比有什么用"><a href="#这些类比有什么用" class="headerlink" title="这些类比有什么用"></a>这些类比有什么用</h2><p>在这一讲中，我使用了“专业工匠”“乐团指挥”和“电影导演”三种形象来类比不同的职级档次，但是这仅仅是针对职责的相似度来说的。这种档次划分对应了行政级别的高低，但不代表艺术成就的高低。比如P9&#x2F;P10的级别高于P8&#x2F;P7，但并不意味着电影导演的艺术成就一定高于乐团指挥。</p><p>之所以要把职级档次跟你熟悉的职业角色建立联系，是希望通过形象思维的方式帮你快速建立对每个级别的具体认知。以后我们再说到某个级别的时候，你就能一下子抓住它的核心要求。</p><p>需要注意的是，这一讲的类比只是宏观层面的特征提炼。如果你想了解每个级别能力的细节要求，还是需要参考课程职级详解部分关于每个级别的详细解读。</p><p>因为阿里的级别是业界的“职级硬通货”，辨识度高，认可度高，所以我采用了阿里P5～P9的级别作为例子进行讲解。不管你在大公司还是小公司，不管你公司现在是否有完善的职级体系，如果你想了解自己能力水平在行业内所处的级别，我建议你都对标阿里的职级来估计。</p><p>目前网络上已经有一些关于不同公司职级怎么对应的文章；而且我也专门准备了一期加餐，根据我的面试经验，提炼了几个典型互联网大厂的职级对应关系。这些信息你都可以参考。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，我们回顾一下这一讲的重点。P5～P10的6个等级，可以根据能力特征分成3个档次，分别对应三种职业角色。</p><ol><li>P5&#x2F;P6相当于专业工匠，核心能力是执行任务，P5和P6的差别在于能否独立完成任务。</li><li>P7&#x2F;P8相当于乐团指挥，核心能力是指挥团队，P7和P8的差别在于指挥的是单个团队还是多个团队。</li><li>P9&#x2F;P10相当于电影导演，核心能力是导演作品，P9和P10的差别在于导演出来的是成熟的作品还是成名的作品。</li></ol><p>我把这个对应关系总结在了下面这个表格里，供你参考。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/54bd26eb8d1b7fa99f7f8095fe2e4337.jpg"></p><p>最后再补充一点，高级别的能力要求包含低级别的能力要求。比如P9的核心能力是“导演成熟作品”，但肯定也要具备P8要求的“指挥多个团队”的能力。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。电影学院有专门的导演专业，学生可以不成为演员而直接学习如何成为导演。那么在职场晋升体系中，我们为什么不能直接学习P9&#x2F;P10的技能，然后直接晋升P9&#x2F;P10呢？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/14c0dd1336yyf86864d3452b90e9bdb8.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;06-职级档次：你现在应该具备的核心能力是什么？&quot;&gt;&lt;a href=&quot;#06-职级档次：你现在应该具备的核心能力是什么？&quot; class=&quot;headerlink&quot; title=&quot;06 | 职级档次：你现在应该具备的核心能力是什么？&quot;&gt;&lt;/a&gt;06 | 职级档次：你现</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>08 | P6提升攻略：怎么成为独立自主的“项目能手”？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3405429898.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3405429898.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="08-P6提升攻略：怎么成为独立自主的“项目能手”？"><a href="#08-P6提升攻略：怎么成为独立自主的“项目能手”？" class="headerlink" title="08 | P6提升攻略：怎么成为独立自主的“项目能手”？"></a>08 | P6提升攻略：怎么成为独立自主的“项目能手”？</h1><p>你好，我是华仔。</p><p>上一讲我们学到了，P5的核心能力要求是 <strong>在别人的指导下完成任务</strong>。如果能够从P5晋升到P6，就说明你已经完成了从学生到打工人的角色转变，成长为一名合格的员工了。这一讲我们就来了解一下P6的能力要求和提升建议。</p><p>P6对应的工作年限是2～5年，核心能力要求可以用一句话来概括， <strong>独立负责端到端的任务</strong>。这句话有两个关键词：</p><ul><li><p><strong>独立</strong>：P6做的事情跟P5差不多，但已经不需要别人带着做了。P5和P6的开发人员都会参加需求评审，只不过P5参加的时候只是在听，而P6可能就会针对需求直接提出意见。</p></li><li><p><strong>端到端</strong>：负责项目中的某部分功能的全流程相关事项。开发的端到端事项包括需求评审、方案设计、编码、修改bug和上线等；测试的端到端事项包括需求评审、测试方案设计、执行测试和上线等；而产品的端到端事项则包括用户分析、需求写作、数据分析和竞品分析等。</p></li></ul><p>P6和P7是业界主要的劳动力，这两个级别的人数加起来，估计能够占到团队总人数的60%～80%。P6级别的主要提升目标是成为独立自主的项目能手。接下来，我就从技术、业务和管理三个维度一一展开进行讲解。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/050d31ef60697972ea06a5f8ed73031d.jpg"></p><h2 id="技术：掌握团队用到的技术“套路”"><a href="#技术：掌握团队用到的技术“套路”" class="headerlink" title="技术：掌握团队用到的技术“套路”"></a>技术：掌握团队用到的技术“套路”</h2><p>P6在技术方面的核心要求是 <strong>熟练掌握端到端的工作流技术</strong>，因为P6是项目主力劳动力，需要参与项目流程中的某些阶段，完成分配的任务。</p><p>P6级别的技术详细要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/fc9160abecdc9c26b730d3aa2bbe5b02.jpg"></p><p>在P6阶段，提升技术能力的关键就是 <strong>掌握团队用到的各种技术的“套路”</strong>。以Android开发人员为例，套路包括设计模式、SOLID设计原则、Android的MVP架构和各类工具（比如Fiddler，Wireshark，tcpdump）等。不同岗位的“套路”不同，你可以自行整理，也可以求助团队中有经验的同事。</p><p>在P5阶段，你可能只要了解一些单个的技术点就能完成工作；但是到了P6，你就必须知道怎么 <strong>整合</strong> 这些技术套路，来完成端到端的项目开发任务。</p><p>以Java后端开发为例，P6需要知道如何将数据库、缓存、面向对象、设计模式、HTTP等技术点整合起来完成某个功能的开发。</p><h3 id="提升技术深度"><a href="#提升技术深度" class="headerlink" title="提升技术深度"></a>提升技术深度</h3><p>除了熟练使用套路，P6还需要深入理解套路背后的技术原理和细节，提升自己的 <strong>技术深度</strong>。</p><p>以设计模式为例，P5可能只知道每个设计模式是什么意思，但是P6还要知道什么时候用设计模式，什么时候不用设计模式，具体应该用哪个设计模式。</p><p>这也是P6能够指导P5的原因： <strong>P5只知道what，P6还知道why</strong>。</p><p>P6阶段提升技术的时候，很容易掉到一个陷阱里，那就是 <strong>贪多求全</strong>。你可能看了很多技术，其他人说起某个技术点的时候，你都有印象。但其实你只是蜻蜓点水，并没有深入学习。</p><p>正确的做法是什么呢？重点抓住跟当前工作内容强相关的技术点和技术套路，深入学习和研究，重点提升技术深度。如果有精力，你再去拓展学习一些暂时用不到、但以后很可能会用到的技术。</p><p>千万不要因为短时间内什么流行就去学什么，一会儿学这个一会学那个，结果什么都懂一点，什么都不精通。</p><h2 id="业务：掌握所有功能并深度理解处理逻辑"><a href="#业务：掌握所有功能并深度理解处理逻辑" class="headerlink" title="业务：掌握所有功能并深度理解处理逻辑"></a>业务：掌握所有功能并深度理解处理逻辑</h2><p>在业务能力上，P6相比P5的提升主要体现在两方面。</p><p><strong>一是P6对功能掌握得更全面。</strong> P5只掌握了其中一部分功能，而P6基本上要求掌握某类业务的所有功能。</p><p><strong>二是P6对处理逻辑的理解更深刻。</strong> P5只需要知道具体的需求处理逻辑是什么，而P6要求理解需求的“上下文信息”，比如需求给用户&#x2F;客户带来的价值是什么，解决了什么问题，为什么要设计5个步骤而不是3个步骤，为什么竞品的功能设计跟我们不一样。</p><p>P6级别的业务能力要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/2290b770eb4292c3ceb1dc0c0ac680e7.jpg"></p><p>P6级别提升业务能力的核心方法是我自创的 <strong>“5W1H8C1D”分析法</strong>。传统的“5W1H”分析法只关注需求的功能属性，所以我在“5W1H”基础上，又增加了对需求的质量属性（8C）和上线后效果（1D）的考虑。</p><p>这个方法不是一两句话能够讲清楚的，我会在课程的 <strong>专项提升</strong> 部分专门用1讲的篇幅为你详细介绍。</p><p>除了这个方法之外，认真做好 <strong>竞品分析</strong> 也很重要。通过对比竞品和自己的产品类似功能的差异、优劣，你能够更好地理解业务。</p><h2 id="管理：推进项目中的子任务"><a href="#管理：推进项目中的子任务" class="headerlink" title="管理：推进项目中的子任务"></a>管理：推进项目中的子任务</h2><p>P6管理能力的要求主要是能够 <strong>负责项目中的子任务推进。</strong></p><p>具体的管理要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/52fb8ed841cayy1efd42d41c375238b6.jpg"></p><h3 id="工作量评估：WBS分解法"><a href="#工作量评估：WBS分解法" class="headerlink" title="工作量评估：WBS分解法"></a>工作量评估：WBS分解法</h3><p>P6的管理职责包括任务的工作量评估、计划制定以及分配和跟踪等。其中工作量评估是P6的核心职责，而计划制定以及分配和跟踪，主要是配合项目经理来完成的。而且，工作量评估的准确性是第一步，会直接影响到后续工作的合理性。</p><p>所以，掌握工作量评估的有效方法，也是P6在管理方面的核心能力。</p><p>很多人在评估工作量的时候没有依据，所以心里比较虚，如果项目经理或者产品经理稍微挑战一下，就会很容易退让，导致工作量被压缩。到了实际项目执行的时候，他们发现工作量评估偏少了，为了赶上项目进度，就只能加班加点。</p><p>我在职业生涯中遇到过四种评估方法：</p><ol><li><strong>拍脑袋法</strong>：让团队有经验的人直接拍脑袋想一个工作量数字。</li><li><strong>扑克牌法</strong>：找3～5个人员，每人给一张小纸条，每个人把工作量评估写在纸条上，最后取平均值。</li><li><strong>对比法</strong>：参考曾经做过的类似的项目，看看之前的项目工作量是多少，然后以此为基础想一个数字。</li><li><strong>WBS分解法</strong>：把需求拆解为多项小任务，单独评估每个小任务的工作量，然后汇总；评估小任务的工作量的时候可能采取上面这3种方法。</li></ol><p>从实践经验来看，WBS分解法的效果是最好的，评估的误差基本上不会超过20%。</p><p>WBS的全称是Work Breakdown Structure，中文翻译是“工作分解结构”。WBS分解法的原理是，通过把项目工作按 <strong>阶段可交付成果</strong> 分解成更小的、更易于管理的组成部分，来提升项目管理的效率。</p><p>我们以朋友圈点赞为例，开发人员采用WBS分解方法，可以得到下面这个任务分解表格：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/71fa7dec065718a574c04788bayy7d2a.jpg"><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/2d347f7d1cde0527b61af684f1771ba8.jpg"></p><p>对于分解出来的子任务项，我们就可以用“拍脑袋法”评估工作量了。这样做能够兼顾效率和效果，因为子任务项已经比较小，基本上你凭经验就能够得到比较合理的结果。就算单个任务项有偏差，也是有的偏多有的偏少，最终的偏差反而会互相抵消。</p><h3 id="避免过于乐观：加Buffer"><a href="#避免过于乐观：加Buffer" class="headerlink" title="避免过于乐观：加Buffer"></a>避免过于乐观：加Buffer</h3><p>大部分人在评估工作量的时候都会比较乐观，而且在项目过程中可能有各种意外出现（比如某个开发或者测试人员生病）。在实践中，为了避免过于乐观的评估给后面的项目进度带来风险，我们往往会采取加Buffer（缓冲）的做法，也就是说，将评估的初步结果乘以一个大于1的系数来作为项目的工作量。</p><p>还是拿朋友圈点赞功能来说明，如果初步评估的工作量是14人天，Buffer系数取1.2，那么最终做项目计划时，参考工作量就是17人天（14*1.2 &#x3D; 16.8 ≈ 17）。</p><p>这个Buffer系数可以在1.2～1.6之间浮动，一般根据项目的复杂度决定。全新的业务功能Buffer会高一些，在已有业务功能上修改时Buffer会低一些。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲我基于COMD能力模型，给你详细解读了P6级别的具体要求以及对应的提升技巧。现在，我们回顾一下这一讲的重点：</p><ol><li>P6的核心能力要求是独立负责端到端的项目任务，主要提升目标是成为独立自主的“项目能手”。</li><li>技术方面，P6需要掌握团队用到的各种技术的“套路”，重点提升技术深度，学习时要避免贪多求全的心态，优先深入学习跟工作内容强相关的技术。</li><li>业务方面，P6需要掌握某类业务相关的所有功能，并深度理解处理逻辑，主要的提升方法是“5W1H8C1D”分析法和竞品分析。</li><li>管理方面，P6需要负责项目子任务推进，包括工作量评估、计划制定和沟通协调等。评估工作量的时候，建议使用WBS分解法，先拆解成容易评估的小任务，然后独立评估每项任务，最后汇总。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/6125c35396c1f8742b4bedb6a7ddd2dc.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。P6的能力要求已经比较全面地覆盖了技术、业务和管理三个维度。假如你是晋升评委，你会怎么分配这三个维度在职级能力中的占比呢，理由是什么？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/34151e4ae91f1fcce05d781936a3162f.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;08-P6提升攻略：怎么成为独立自主的“项目能手”？&quot;&gt;&lt;a href=&quot;#08-P6提升攻略：怎么成为独立自主的“项目能手”？&quot; class=&quot;headerlink&quot; title=&quot;08 | P6提升攻略：怎么成为独立自主的“项目能手”？&quot;&gt;&lt;/a&gt;08 | P</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>11 | P9提升攻略：怎么成为跨域整合的“业务导演”？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3338115098.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3338115098.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-P9提升攻略：怎么成为跨域整合的“业务导演”？"><a href="#11-P9提升攻略：怎么成为跨域整合的“业务导演”？" class="headerlink" title="11 | P9提升攻略：怎么成为跨域整合的“业务导演”？"></a>11 | P9提升攻略：怎么成为跨域整合的“业务导演”？</h1><p>你好，我是华仔。</p><p>上一讲我跟你提到，P8级别是技术能力的顶峰。而这一讲介绍的P9级别，则可以说是绝大部分人的职业发展巅峰。因为就算你很厉害，如果没有合适的机遇和运气，也很难晋升到P9，至于从P9继续往上晋升就更难了。</p><p>P9级别对应的工作年限一般是10年以上。在BAT级别的大厂，P9是管理层级分水岭，从这个级别开始就属于 <strong>中层管理者</strong> 了。</p><p>很多公司P9的Title仍然带着“技术”或者“工程师”这样的词，比如阿里的P9是“资深技术专家”，腾讯旧职级T4是“专家工程师”。但实际上，对于P9这个级别来说，业务和管理工作已经占据了核心地位，尤其是业务目标管理，比如分析业务情况，讨论业务方向、规划业务突破点或新业务等。</p><p>P9的核心能力要求可以用一句话来概括， <strong>导演成熟的作品</strong>。它的核心职责和电影导演类似，都包括制定目标（要拍一部什么样的电影）、整合资源（投资方、演员、编剧等）、做出决策（钱花在什么地方、找谁来主演等）以及完成作品（拍出最后上映的电影，并且拿到一定的票房，至少要赚钱）。</p><p>导演的表演水平可能比不上主演，写作水平可能比不上编剧，更不用说服装、道具、摄影这些专业技能了。但导演一定是跨领域专家，对每个领域都有一定的理解，能够结合自己的作品目标来整合行业资源。</p><p>P9也是这样，不一定精通每一个专业领域，但一定是跨领域整合的高手。虽然在某些职级体系中，P9和P8的Title看起来只是半斤和八两的差别（比如P9是“资深技术专家”，P8是“高级技术专家”），但实际上它们的能力要求已经发生了质的变化，就像拍电影的总导演和道具组组长的差别。</p><p>总的来说，P9的主要提升目标是 <strong>跨域整合的业务导演</strong>。接下来，我就从技术、业务和管理三个维度一一展开讲解。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/23de43154585315fe473f0b5fe2c270b.jpg"></p><h2 id="技术：跨领域整合能力"><a href="#技术：跨领域整合能力" class="headerlink" title="技术：跨领域整合能力"></a>技术：跨领域整合能力</h2><p>首先是技术维度。</p><p>我想你心里也许有这样的疑问：如果说P8就已经是技术能力的顶峰了，那么P9及以上级别的技术水平还能提升吗？业界有很多P9&#x2F;P10的技术专家，比如人工智能专家、算法资深专家，他们不是一直都是在技术领域发展么？</p><p>其实如果单论具体的某个领域的技术，P9除了自己原来在P8时深耕的那个领域外，其它领域可能还真不如对应领域的P8那么精通。</p><p>你可以这么理解，P9及以上级别在技术维度上的提升，并不是体现在单个领域 <strong>技术能力</strong> 本身，而是体现在 <strong>整合跨领域的技术方案来打造成熟落地的作品</strong> 上。</p><h3 id="案例：面向业务的立体化高可用架构设计"><a href="#案例：面向业务的立体化高可用架构设计" class="headerlink" title="案例：面向业务的立体化高可用架构设计"></a>案例：面向业务的立体化高可用架构设计</h3><p>就拿我自己晋升P9时展示的 <a href="https://blog.csdn.net/yunhua_lee/article/details/49867053">一个作品</a> 来说吧。我在2015年左右负责阿里游戏高可用项目，这个项目涵盖客户端（Android）、运维、后端架构重构和异地多活架构设计，整体结构如下：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/ec4aba63636f29dcdd3d03edfcc39ff1.jpg"></p><p>这个作品有三个特别的亮点：</p><ol><li>我们将“4个9”这种 <strong>不直观的高可用指标拆解</strong> 为“3分钟定位问题、5分钟恢复业务、平均最多2个月发生一次问题”。这是我在讨论的时候提出的一个创意，后来我看到很多公司都在用类似的表述。</li><li>这个高可用方案是 <strong>面向业务的立体化方案</strong>。通常说到高可用，大家首先想到的就是运维的各种保障，而我当时的核心理念是“高可用的系统是设计出来的，不是靠运维保障出来的”，所以设计了如上图展示的多个方案组合起来的立体化方案。</li><li>这是整个游戏业务线，甚至是整个UC，第一个真正 <strong>实现异地多活架构</strong> 的业务。并且我还提炼出了一套完整的异地多活设计方法论，后来指导了几个其他的业务顺利实现了异地多活。</li></ol><p>这3个点的要求是我作为“导演”提出的，但整个“作品”是由多个团队的多个P7&#x2F;P8协作完成的，客户端、运维和后端都有领域负责人参与。</p><p>我基于整体的架构思路给客户端和运维提出具体的要求，由各领域提出可选方案，然后我们一起讨论。能达成共识当然最好，如果达不成共识，那就主要由我来拍板，我自己参与的重点是在架构解耦（2014年的时候我们还没有用微服务的概念，其实就是微服务拆分）和异地多活这部分的设计。</p><p>看完了我的晋升案例，相信你已经能够初步体会到，所谓的“整合跨领域的技术打造成熟作品”到底是什么意思了。它的核心要求就是具备一定的 <strong>技术广度</strong>，能够结合作品来整合不同领域的技术，这也是P9阶段提升技术能力的关键。</p><h3 id="技术广度：跨领域的技术视野"><a href="#技术广度：跨领域的技术视野" class="headerlink" title="技术广度：跨领域的技术视野"></a>技术广度：跨领域的技术视野</h3><p>那么，什么是技术广度呢？我们不妨把它跟技术深度和技术宽度放在一起，对比理解。</p><p>比如说你是前端工程师：</p><ul><li>一开始，你努力钻研React技术直到熟练掌握，这是技术深度的提升；</li><li>接着，你又全面掌握前端领域的所有技术，包括vue、Js和小程序技术等，这是技术宽度的提升；</li><li>然后，你开始了解后端和AI等领域，拥有了跨领域整合的能力，这就是技术广度的提升。</li></ul><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9eb31b87b4c8afc0440af9e1678d8795.jpg"></p><p>P9级别的技术详细要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9d6c16c1884ed09a508cc993f65e5be7.jpg"></p><p>既然技术广度在P9阶段这么重要，我们应该怎么提升呢？</p><p>首先，你不要陷入到太细的技术细节中，比如某个工具的使用、API如何调用等，因为这样做花费的时间太多，而且对于做关键技术决策并没有什么帮助。相反，你需要从宏观层面熟悉多个领域的技术，包括技术原理、优缺点、适应场景和业界应用等。</p><p><strong>环式学习法</strong> 就是一个利器，它能通过闭环的思维大大提高技术广度的提升效率，我会在学习方法部分详细介绍。</p><p>另外一个提升重点就是 <strong>关注和学习新技术</strong>，比如人工智能、区块链和VR&#x2F;AR等，因为新技术可能会给业务带来新的突破。</p><p>但是因为新技术和业务的结合点并不是一目了然的，需要在目标不明确的情况下持续跟进1～2年时间，所以我不建议一开始就大张旗鼓地投入，也不建议直接安排别人去跟进。</p><p>最好的办法还是P9自己保持一定的关注度，等到时机成熟，再专门安排手下的P7&#x2F;P8去深入研究。</p><h2 id="业务：从理解规划到亲自导演"><a href="#业务：从理解规划到亲自导演" class="headerlink" title="业务：从理解规划到亲自导演"></a>业务：从理解规划到亲自导演</h2><p>在业务维度上，公司也对P9提出了更高的要求。</p><p>按照规模和组织形式来区分，P9负责的业务范围一般可以分为三类：</p><ol><li>独立的一个或者一类产品</li></ol><p>比如阿里云上的云数据库Redis版，或者云数据库Redis版 + 云数据库MongoDB版。</p><ol><li>某个行业中的一个或者一类业务</li></ol><p>比如美团App是一个覆盖“本地生活”行业的App，里面会划分外卖、美食、酒店、电影等几十个具体的业务，一般P9会负责其中一个或者一类业务。</p><ol><li>某个中台的一个或者一类业务域</li></ol><p>比如电商中台可以分为支付域、订单域、商品域和用户域等几十个业务域，一般P9会负责其中一个或者一类业务域。</p><p>至于P9到底是负责一个还是一类产品、业务、业务域，这跟产品、业务、业务域的复杂度、规模、公司的组织结构以及自己的能力（P9-还是P9+）都有关系。</p><h3 id="规划和突破"><a href="#规划和突破" class="headerlink" title="规划和突破"></a>规划和突破</h3><p>但是，不管负责哪一种业务范围，对P9级别的考核来说，业务结果所占的比重都大大增加了，甚至已经超过了对技术的要求。</p><p>我在 <a href="https://time.geekbang.org/column/article/317813">第6讲</a> 提到过，P9要导演出成熟的业务作品，就像合格的电影导演要拍出7分以上的电影作品。</p><p>也就是说，P9需要规划业务目标（可以独立规划，也可以跟其他人一起规划），协调整合资源来落地规划（可能是成立新团队，也可能是成立新项目），并且落地后还要拿到比较好的结果。</p><p>通常情况下，P9要能够拿到有突破的业务结果才能得到认可，如果只是将已有的业务数据提升一些是作用不大的，例如我的阿里游戏高可用方案，落地后真正实现了“3分钟发现问题，5分钟恢复业务”的目标，而在做这个方案前，我们的业务曾经1个月出了4次大故障，最长故障时长6小时。</p><p><strong>从理解业务规划到做出业务规划并拿到有突破性的结果，这是P9相对P8的核心提升点之一，也是P8晋升P9很难的一个因素。</strong></p><p>首先，好的业务机会本身就非常稀缺，毕竟行业的风口并不是经常有的，业务上大的发展和突破也不是年年都有。而如果业务本身没有大的发展或者突破，相关的各种机会就会比较少。例如我前面举例的阿里游戏高可用项目，核心原因是业务发展很快，用户量大增，原有技术架构存在严重缺陷。</p><p>我曾经跟朋友说过，如果让我现在以P7的身份加入大厂，我再干6年也不一定还能晋升到P9，因为机会是可遇不可求的。</p><p>其次，内部竞争激烈，做业务规划的机会不一定能落到自己头上。</p><p>虽然P8+的总体数量不是很多，但因为业务机会更加稀缺，结果还是僧多粥少。可能同一个业务机会抛出来，有好几个P8+都想抓住，但最后只有一个能够得到高层的认可和支持。</p><p>当然，P8+自己也可以提一些创新的业务突破方向。但是这些想法能不能得到高层的支持，有很大的不确定性，因为高层会面对各种创新的想法，不可能每个都采纳。</p><p>第三，业务能不能实现突破，运气成分很大。</p><p>即使你一路过关斩将，得到了高层的认可和授权，开始负责将业务规划落地，但是业务结果怎么样，还是有很大的运气因素。比如你负责的是微信支付的香港本地钱包业务，碰上这两年的政治事件和新冠疫情，业务开展肯定会受到很大的负面影响，更不用谈有什么突破性发展了。</p><p>P9级别对业务的详细要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/c694226af65c80924046c38b25374d43.jpg"></p><p>P9是业务规划和执行的核心人员，需要从战略的高度来思考业务方向。关于业务战略的理论和方法论很多，如果你想快速入门，我建议学习 <strong>宝洁战略模型</strong>。</p><p>在P8的提升攻略中，我也提到了可以借助宝洁战略模型来提升自己对业务规划的理解能力。不过到了P9级别，你就不只是用它来理解业务规划了，你还要通过这个模型塑造自己的战略思维，指导自己规划业务方向和目标。</p><p>另外，业务战略和行业是强相关的，你必须 <strong>在行业内经过一定时间的摸爬滚打</strong>，才能积累相关经验和理解。所以，不能光靠理论学习来提升业务战略，而要做到知行合一。</p><p>当你是P8+的时候，会有很多机会参与业务规划和分析的相关会议和讨论，你可以结合宝洁战略模型，学习P9&#x2F;P10或等高级别的人在分析和规划业务时的思路和逻辑。</p><h2 id="管理：授权但不要放羊"><a href="#管理：授权但不要放羊" class="headerlink" title="管理：授权但不要放羊"></a>管理：授权但不要放羊</h2><p>P9级别的管理要求整体来说和P8类似，核心工作也是团队梯度、业务目标和技术演进三大块。</p><p>P9级别对管理的详细要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9722ded5dd84yyfae35f78c29yy28635.jpg"></p><p>P9带团队的挑战在于，因为管理范围覆盖的领域比较多，你已经不可能在每一个具体领域都达到精通的水平了。</p><p>所以，你在管理P8的时候，需要尽量采用授权式管理。不过一定要注意，不要把授权式管理变成了放羊式管理。</p><p>有些P9因为自己曾经不是从某个专业领域升上来的，对这个领域不太熟悉，就干脆把这个领域的事情完全丢给一个P8了事。</p><p>但是这可能会导致在做关键的技术决策的时候出现脱节：P9懂业务，但是对某个专业领域不熟悉，而P8虽然在专业领域上很精通，但是对业务的理解一般，无论谁来做决策，都存在很大风险。</p><h3 id="案例：小游戏App项目"><a href="#案例：小游戏App项目" class="headerlink" title="案例：小游戏App项目"></a>案例：小游戏App项目</h3><p>举个例子吧，我在P9级别负责过一个小游戏的项目，简单来说，就是做一个小游戏的App，用户在里面可以玩各种小游戏。</p><p>这个项目App要采用什么技术方案呢？当时我们内部有两种不同的意见：</p><ol><li>Android和iOS团队都建议完全用原生的技术来实现，因为对于大部分玩小游戏的用户来说，手机性能都一般，用原生的技术他们的体验会更好。</li><li>前端团队建议用App + H5包壳的方式快速上线，因为这是一个快速尝试的创新项目，H5的方式能够让业务快速迭代。</li></ol><p>在讨论决策的时候，我的老板们（在业务线上带我的P9和P10）也倾向于用原生的技术方案，因为他们觉得用户体验是小游戏成功的关键。</p><p>但是经过分析，我认为App + H5包壳的方式更适合业务，因为小游戏体验的好坏关键在于小游戏本身。App的交互并不复杂，原生技术不会带来体验上的优势；相比之下，用H5实现既能够支撑业务快速迭代，又能够满足用户体验的需求。</p><p>最后，我顶着老板们的压力立下了军令状，确定了用App+H5包壳的方式来实现。而后续业务的发展，也印证了这个技术方案的先见之明。</p><p>一方面，我们内部测试的时候发现，小游戏本身的设计是用户体验的关键。很多游戏在上线之后都要经过不断调优才能够达到用户体验的要求，而小游戏App本身没有成为体验的瓶颈。</p><p>另一方面，小游戏App上线之后，推广很困难，让用户独立下载一个小游戏App的成本很高。于是我们很快就在业务方向上进行调整，从独立的App改为嵌入到集团内成熟的App。因为采用的是H5包壳的技术方案，所以迁移的成本比较小。</p><p>这个故事说明什么呢？虽然P9下面会有几个不同领域的P8专家支撑，但是这并不意味着你可以直接把技术工作全都交给他们。比方说小游戏App的技术方案，你不能甩给Android、iOS和H5三个领域的P8来进行辩论和PK，谁赢了就听谁的。</p><p>在做业务相关的关键技术决策时，P9必须根据对业务和技术的理解，自己拿主意。因为只有到了P9级别的人，才拥有 <strong>跨领域的技术理解，并且能够结合业务的发展来做出判断。</strong></p><p>跟P8相比，P9因为要负责业务目标的制定和实现，所以需要在业务和管理投入更多的精力，而技术上投入的精力则稍微少一点。</p><p>总的来说，P9在技术、管理和业务上的精力分配没有固定的标准。</p><p>如果业务稳步发展，你可以参考433的标准，也就是40%业务、30%管理、30%技术；而如果你作为空降的P9接手了一个原来表现不太好的团队，就得在业务和管理上面投入更多，按照40%业务、40%管理、20%技术来分配；而如果你负责的业务面临发展的天花板，那么按照631的比例也是可以的，也就是业务60%、管理30%、技术10%。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲我基于COMD能力模型，给你详细解读了P9级别的具体要求以及对应的提升技巧。现在，我们回顾一下这一讲的重点：</p><ol><li>P9的核心能力要求是导演成熟作品，主要提升目标是成为跨领域整合的业务导演。</li><li>技术维度上，P9需要具备跨领域整合的能力，重点提升领域技术广度，可以通过环式学习法来提升自己的技术广度，通过关注和跟进新技术来提升自己的创新能力。</li><li>业务维度上，P9需要规划业务目标，并且需要掌握战略规划相关的技能，指导自己做出好的业务规划，可以采取“宝洁战略模型”的方法快速提升自己的业务规划能力。</li><li>管理维度上，P9需要负责指挥多个不同领域的团队，除了抓住三个管理重点（搭建团队梯队、参与目标制定、关注技术演进）外，还可以采用授权的方式管理团队，但必须注意，不要把授权变成放羊。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/701e514a2c5cdc6273b2244ab50b97a1.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。既然P9级别管理和业务的能力比重大大上升，是否可以由技术出身的P9来管理产品运营团队，或者由产品运营出身的P9来管理技术团队？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9272cdf84a3d5d2d66b6c8fed931f403.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;11-P9提升攻略：怎么成为跨域整合的“业务导演”？&quot;&gt;&lt;a href=&quot;#11-P9提升攻略：怎么成为跨域整合的“业务导演”？&quot; class=&quot;headerlink&quot; title=&quot;11 | P9提升攻略：怎么成为跨域整合的“业务导演”？&quot;&gt;&lt;/a&gt;11 | P</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>13 | PPT写作：怎么写才能展现自己真正的实力？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3015926019.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3015926019.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-PPT写作：怎么写才能展现自己真正的实力？"><a href="#13-PPT写作：怎么写才能展现自己真正的实力？" class="headerlink" title="13 | PPT写作：怎么写才能展现自己真正的实力？"></a>13 | PPT写作：怎么写才能展现自己真正的实力？</h1><p>你好，我是华仔。</p><p>上一讲我们学习了晋升PPT的标准框架，这个框架里最重要的内容是自述材料，而自述材料总体的 <strong>写作指导思想</strong> 就是 <strong>金字塔原理</strong>。</p><p>根据金字塔原理，我总结了自述材料的标准模型，这个模型就像金字塔一样，中心明确，层次分明，逻辑清晰，一共包括3个层级。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/47a18ae196fafdb747615bd1eb4a5c18.jpg"></p><p>顶部是 <strong>中心主题</strong>，自述材料的中心主题很明确，就是向评委证明你的能力达到了目标级别的要求。</p><p>中间是 <strong>论据</strong>，也就是你用来证明自己的能力确实达到要求的依据，常见的论据包括：你负责或者参与过的项目，你带过的团队，你负责的系统或者业务。</p><p>底部是 <strong>STAR</strong>，也就是Situation（情景）、Task（任务）、Action（行动）和Result（结果）4个部分。</p><p>接下来，我就基于这个标准模型，谈谈具体的自述材料写作技巧。</p><h2 id="技巧一：把PPT当成提词器"><a href="#技巧一：把PPT当成提词器" class="headerlink" title="技巧一：把PPT当成提词器"></a>技巧一：把PPT当成提词器</h2><p>很多人因为没什么演讲经验，担心自己因为紧张而忘记要讲的内容，所以就干脆把要说的话全部贴在PPT上。这种做法有两大坏处，一是满屏充斥的信息会把评委逼出“密集恐惧症”，二是会让评委在潜意识里产生“浪费时间”的感觉。</p><p>为什么评委会觉得“浪费时间”呢？因为他们看PPT的时候其实是在扫读，比你讲话的速度快多了，等他们看完了，你还没念完，这段时间就相当于一个“信息真空期”。他们得不到更多有用的内容，自然就会感到烦闷，有些评委甚至会直接打断你，说“不要再念PPT了”。</p><p>所以说，评委最不喜欢的就是照着PPT念。如果你在晋升答辩的时候踩了这个雷，会非常吃亏！</p><p>那么我们该怎么写呢？有效的做法是 <strong>把PPT当成“提词器”，而不是讲话稿</strong>。换句话说，PPT上面展示的内容不是给你念的，而是用来 <strong>提示</strong> 你要讲的内容范围的。</p><p>一方面是 <strong>提示你自己</strong>，这一页PPT应该讲哪几个关键点，至于具体的详细内容，不用放上去，只需要从你的嘴说出来就行了。</p><p>另一方面也是 <strong>提示评委</strong>，告诉他们你将要讲什么，这样评委就能够快速收集自己头脑中跟这些内容相关的知识、技能和经验，一边听你讲，一边理解并形成初步判断。</p><h2 id="技巧二：围绕能力要求提炼论据"><a href="#技巧二：围绕能力要求提炼论据" class="headerlink" title="技巧二：围绕能力要求提炼论据"></a>技巧二：围绕能力要求提炼论据</h2><p>论据可以分为两类。第一类是 <strong>核心论据</strong>，和目标级别的能力要求 <strong>强相关</strong>，并且能够让评委眼前一亮，一般需要提炼3～5项。</p><p>提炼核心论据是有套路的，你可以回顾一下第5讲的COMD模型，根据目标级别的能力要求去找相关的复杂度高的工作。这些工作往往会有一些共同的特点，比如持续时间长、规模大、不确定性高、有一定挑战性或者创新性等，找起来并不难。</p><p>第二类是 <strong>辅助论据</strong>，从侧面说明你的能力，起到锦上添花的作用，不用太多，只要1～3项就行。</p><p>它的价值在于，如果你和另外一位申请者在核心论据上的表现差不多，但是你准备了辅助论据而他没有，或者你的辅助论据更加亮眼，那么评委很可能给你更高的评价。</p><p>整理辅助论据也不难，一些常见的辅助论据包括参加业界技术大会（证明自己主动拓宽技术视野）、在业界技术大会上演讲（证明自己有一定的业界影响力）、发表文章、出版书籍、承担一些虚拟组织的组长（比如学习小组和交流小组）以及参与开源项目等。</p><h2 id="技巧三：用STAR方法来描述论据"><a href="#技巧三：用STAR方法来描述论据" class="headerlink" title="技巧三：用STAR方法来描述论据"></a>技巧三：用STAR方法来描述论据</h2><p>提炼好论据之后，具体要怎么向评委描述，才显得有理有据呢？</p><p>经过摸索和实践，我推荐你使用 <strong>STAR方法</strong>，也就是 <strong>Situation-Task-Action-Result</strong>。你可能在准备简历和面试的时候用过STAR方法，但其实它在晋升答辩的时候也很管用。</p><p>STAR方法的具体介绍如下：</p><p><strong>1. Situation（背景）</strong></p><p>首先是描述事情的背景。注意，不要把项目Word文档里的内容直接贴上去，而是应该 <strong>提炼1～3条关键内容摘要</strong>。</p><p>比如某资讯类项目的背景是：</p><blockquote><p>随着行业自媒体的发展，大量质量参差不齐的内容涌现，如何让优质内容快速到达目标用户成为一个很大的挑战。</p></blockquote><p>这么一大段话放到PPT上显然是不合适的，最好提炼为：</p><blockquote><p>自媒体内容推荐</p></blockquote><p>不过你在讲的时候，还是应该说“随着……挑战”那段比较长的话。</p><p><strong>2. Task（任务）</strong></p><p>其次是描述你在这件事情里面的角色和负责的任务。</p><p>这里要特别注意，不要把整个项目的任务写上去，因为评委关注的是“ <strong>你在项目中发挥的作用</strong>”，而不是“ <strong>整个项目有多牛逼</strong>”。</p><p>我曾经遇到过一个申请晋升的同学，他在介绍项目的时候贴上了系统架构图，然后花了2～3分钟时间来讲解架构。</p><p>然后评委问了一句：“ <strong>这个架构是你设计的吗？</strong>”</p><p>他回答说：“不是，我只是参与其中XX子系统的开发。”</p><p>结果，这部分讲解不但没有加分，反而起到了负面作用，因为评委们认为他对自己的能力和职责认识不清晰。</p><p><strong>3. Action（行动）</strong></p><p>然后是行动，你要讲清楚自己做了什么，展现了哪些能力，这是最关键的部分。你需要注意3点：</p><p>第一，不要把Word文档的内容直接贴到PPT上，PPT只要展示你提炼的3～5个核心点就行了，其他内容得靠你自己讲出来。尽量用架构图、流程图、类图和思维导图等形式来展现，然后提炼几个关键内容用文字展现出来，其他详细内容自述的时候讲出来即可，有点像游戏中的那个梗“开局一张图，内容全靠编”，我们不能编内容，而应该是“开局一张图，内容主要靠说”。</p><p>第二，PPT上只要写“ <strong>做了什么</strong>”，用不着写“ <strong>为什么这么做</strong>”。因为评委肯定会在答辩环节问到这一点，而且跟你进行多次的交流探讨。但是你无法预知评委究竟会怎么问，自述时间又很宝贵，所以不可能提前把背后的思考过程全都写上。</p><p><strong>4. Result（结果）</strong></p><p>最后是讲述事情最终的结果，这是最不容易写好的部分。</p><p>大部分人在这个环节犯的错误就是太“虚”，只有定性的描述，没有定量的描述。</p><p>正确的做法是 <strong>“虚实结合”</strong>，而且重点在“实”，所有事情的结果都应该围绕 <strong>效率、效果、质量和成本</strong> 这4个维度进行 <strong>量化评估</strong>。</p><h3 id="量化评估的原则"><a href="#量化评估的原则" class="headerlink" title="量化评估的原则"></a>量化评估的原则</h3><p>所谓量化评估，就是把要评估的内容转化成可以量化的数据来呈现。</p><p>那么，要怎么做这个量化呢？根据我的经验，呈现的数据要遵循以下3个原则：</p><p><strong>1. 先有基数后有比例</strong></p><p>比例数值要有基数说明，因为只有把基数和比例结合起来才能完整地评估结果。</p><p>比如A和B两个项目都是“渗透率从20%提升到30%”，其中A项目的日活用户是1000万，而B项目的日活用户只有10万，那么从评委的角度看，A项目的结果和价值明显要优于B项目。</p><p><strong>2. 用绝对值而不是相对值</strong></p><p>比例数值要用绝对值而不是相对值，因为相对值很好的原因可能是之前做得太烂。</p><p>假设A项目是“渗透率提升200%”，B项目是“渗透率提升50%”，单纯看相对值的话，肯定是A项目更好，但如果用绝对值来描述，结论可能就不一样了。</p><p>比如A项目是“渗透率从2%提升到6%”，B项目是“渗透率从20%提升到30%”，那么从评委的角度看，A项目的结果和价值就不如B项目了。</p><p><strong>3. 将数值转换为“钱”</strong></p><p>在前两个原则的例子中，我们都是单纯地根据量化数据的大小来判断结果，但实际上只做这样的对比是不够的。</p><p>就算A项目是“渗透率从2%提升到6%”，B项目是“渗透率从20%提升到30%”，A项目仍然有可能大大优于B项目。为什么呢？因为可能A项目的功能重要性远远大于B项目，或者A项目的渗透率提升难度远远大于B项目。</p><p>这就引出了我们的第3条原则：要将数值转换为“钱”。这里的钱可以是收入、支出、成本和人力等。</p><p>比如A项目是“渗透率从2%提升到6%，增加广告收入3000万”，B项目效果是“渗透率从20%提升到30%，增加会员收入30万”，那么从评委的角度看，A项目虽然数值低，但业务价值明显更大。</p><p>当然，并不是每件事情的最终结果都能够转换为“钱”，所以这条原则只要尽量满足就行了，实在没办法转换的也可以不写。</p><p>在下面这个表格中，我举了一些通过量化评估实现虚实结合的例子，供你参考：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/4de87e759e6b1d57a756b5c65da722df.jpg"></p><p>特别提醒一下，之前我一直强调，PPT只需要写提炼出来的重点和关键词，详细内容要靠你自己讲，但展示结果的PPT是个例外，你一定要完整写出来。也就是说，你的PPT里不要写这个表格里“Result（虚）”这列的内容，而要写“Result（虚实结合）”这一列的内容。</p><h3 id="分配页数的方法"><a href="#分配页数的方法" class="headerlink" title="分配页数的方法"></a>分配页数的方法</h3><p>我在上一讲提到过，自述材料的总页数是10～15页，所以单个论据建议不要超过3页，否则内容总量很容易超标。</p><p>那么对于一个论据来说，STAR的4个部分，要怎么分配页数呢？一般情况下，你可以把背景、任务和结果放在第1页，然后把行动单独放在第2页；如果行动 <strong>比较复杂</strong>，也可以分成2页，这样总页数就是3页。</p><p>如果某个论据真的 <strong>特别牛逼</strong>，3页确实不够，也一定不要超过5页。这4～5页PPT怎么分配呢？一般是背景和任务放第1页，行动放中间的几页，结果放最后的1页。</p><p>如果 <strong>每个行动相对独立</strong>，没有什么关联，那么每个行动和对应的结果放在同一页来讲，这样能更方便地把行动和结果对应起来。</p><p>比如论据是Android App性能优化，行动 1是优化内存，行动 2是优化网络，那么优化内存的方法和结果放在同一页PPT，优化网络的方法和结果放在另外一页PPT。</p><h2 id="常见疑问处理"><a href="#常见疑问处理" class="headerlink" title="常见疑问处理"></a>常见疑问处理</h2><p>现在你已经掌握了自述材料的基础写作技巧，但在实际写作的时候，你可能还是会遇到一些特殊情况，让你不知道到底是写还是不写，或者不知道怎么写。</p><p>接下来，我就针对4个常见的疑问，和你分享一下相应的应对策略。</p><p><strong>第1个疑问是，业务背景很庞大，介绍起来很费时间，那还要不要先介绍一下业务背景呢？</strong></p><p>之所以会有这个疑问，是因为如果不介绍背景，一上来就讲具体内容，你担心评委理解不了；如果介绍背景，又要花很多时间，你担心评委可能觉得你啰嗦。</p><p>我的建议是，要介绍业务背景，但是要根据不同的级别采取不同的方式来介绍。</p><p>如果你要晋升P8&#x2F;P9，大概率会遇到跨业务线的评委，介绍背景能让他们对你接下来讲的内容有一个大概的认知。</p><p>这时，你可以根据 <strong>产业链图</strong> 对整个行业的背景做一个概要的介绍，时间控制在1分钟以内。</p><p>比如，你做的是游戏直播业务，可以借助下面这张图来介绍整个游戏直播行业。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/54dafc8895f5bb430ba17298b874ef5b.jpg"></p><p>除了晋升P8&#x2F;P9的时候可以用产业链图来介绍 <strong>行业背景</strong> 外，晋升P7&#x2F;P8&#x2F;P9的时候都可以用 <strong>业务大图</strong> 来说明你负责的业务范围，这能让评委（无论是否跨业务线）对你的职责范围和所做事情的复杂度有一个直观的了解。</p><p>以支付中台为例，如果你负责的是会员中心，可以用下面张图来统一说明。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/14b65ed1716652182fedec22e4eae36a.jpg"></p><p>注意，这样的业务架构大图可以在PPT里展示，但是在讲解的时候，对于不是自己负责的部分，在整体介绍时简单带过就行了，重点放在自己负责的部分上。还是以这张图为例，我建议按照以下顺序讲解：</p><ol><li>先整体介绍支付中台架构，从上往下分别用一句话概括每个大区块的基本作用，包括业务层、收银台、开放平台、13个XX中心等。</li><li>点出自己负责的是“会员中心”，然后介绍会员中心的4个子项，每个子项最好也分别用一句话概括。</li><li>如果有评委问到其他区块，知道多少就讲多少，不知道也可以直接说“暂时没有深入了解”。</li></ol><p><strong>第2个疑问是，某个项目的技术难度很高，但是最终的结果不好，可不可以讲呢？</strong></p><p>这里要分情况讨论。毕竟评委也知道，并不是所有项目都一定可以拿到好的结果，最终结果会受很多不确定的因素影响。</p><p>如果结果不好的原因是 <strong>你不可控的因素</strong>，比如业务调整、市场变化、国家法律政策变化等，那么是可以讲的。讲的时候注意实事求是，不要掩饰也不要回避，分析结果不好的原因，说出自己的思考和总结。</p><p>如果结果不好的原因是 <strong>你自己导致的</strong>，比如过度设计、错误选型以及采取了虽然先进但是你还掌握不了的技术等，这类项目就不能讲。</p><p>事实上，如果真的出现这种情况，你是没有资格申请晋升的，早在前面的提名和预审阶段就应该被刷掉，不太可能走到评审阶段。</p><p><strong>第3个疑问是，某个项目的技术难度不高，但最终结果特别好，可不可以讲呢？</strong></p><p>我建议就不要讲了，因为晋升PPT自述材料的 <strong>中心主题是向评委证明你的能力达到了目标级别的要求，而不是展示绩效。</strong></p><p>比如你做了一个优化项目，把日志存储耗费的机器从100台减少为20台，结果似乎非常好，但这个优化项目做法其实很简单，就是对日志进行了压缩。评委看到的时候不会认为你的能力有多牛逼，只会觉得以前做得太差了。</p><p><strong>第4个疑问是，做了10件事情，但是却没有1个特别出彩的，可不可以讲呢？</strong></p><p>这时候还是得分情况讨论。</p><p>如果你负责的核心工作都是这个样子，那晋升就比较危险了，评委会认为你“只有苦劳，没有功劳”。</p><p>如果出现这种问题的不是核心工作，而是辅助类的工作，还可以补救。我建议你从整体上提炼亮点，比如从积极性、主动性和责任担当等方面来展现，同时你需要提炼出一些对别人有借鉴意义的经验或者教训。不过这不能作为核心论据，只能作为辅助论据。</p><p>比如你在P6阶段带了5个新员工，其中有1个甚至没有通过试用期转正，但只要不是你的原因，你就可以提炼出“新员工主力导师”这样一个论据，然后展现你带的新员工结果——“4个转正，1个不通过”，并且提炼出作为导师的3条经验和2条教训。其实这样的论据也是能得到评委的认可的，可以作为晋升加分项。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲我跟你分享了晋升PPT自述材料的写作技巧，指导思想是金字塔原理，核心技巧是STAR方法。</p><p>现在，我们回顾一下重点内容：</p><ol><li>写作技巧主要有三个，一是把PPT当成提词器，二是围绕目标级别的能力要求提炼论据，三是用STAR方法来描述论据。</li><li>和能力要求强相关的核心论据要提炼3～5项，侧面说明能力的辅助论据提炼1～3项，每项论据一般不超过3页，特别牛逼的论据也不要超过5页。</li><li>STAR的结果部分要做量化评估，通过数据来呈现，需要遵循的原则有三个，一是先有基数后有比例，二是用绝对值而不是相对值，三是将数值转换为“钱”。</li><li>特殊情况灵活处理，牢记一点，自述材料的中心主题是向评委证明你的能力达到了目标级别的要求。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/8927f45647cb3767379fa6ce65aaeae7.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，最后留一道课后思考题给你吧。就算你没有写过晋升PPT，也一定写过简历吧。结合这一讲的内容，你觉得你在写简历或者晋升PPT的时候，踩过哪些坑呢？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/249d9e64507dfac7cb3a973852dd5ee4.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;13-PPT写作：怎么写才能展现自己真正的实力？&quot;&gt;&lt;a href=&quot;#13-PPT写作：怎么写才能展现自己真正的实力？&quot; class=&quot;headerlink&quot; title=&quot;13 | PPT写作：怎么写才能展现自己真正的实力？&quot;&gt;&lt;/a&gt;13 | PPT写作：怎</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>10 | P8提升攻略：怎么成为有影响力的“领域专家”？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3323727066.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3323727066.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-P8提升攻略：怎么成为有影响力的“领域专家”？"><a href="#10-P8提升攻略：怎么成为有影响力的“领域专家”？" class="headerlink" title="10 | P8提升攻略：怎么成为有影响力的“领域专家”？"></a>10 | P8提升攻略：怎么成为有影响力的“领域专家”？</h1><p>你好，我是华仔。</p><p>在 <a href="https://time.geekbang.org/column/article/317813">第6讲</a> 中我曾经介绍过，P7&#x2F;P8是同一档次的职级，核心能力都是指挥团队，区别只在于团队数量是一个还是多个（一般是2～5个）。</p><p>但是在真实的职场环境中，P7级别就像“永恒钻石”段位，大部分人升到P7就很难再往上晋升了。为什么P7和P8的核心能力一样都是指挥团队，而P7升P8却这么难呢？指挥一个团队和指挥多个团队的区别到底体现在哪？</p><h2 id="从团队专家到领域专家"><a href="#从团队专家到领域专家" class="headerlink" title="从团队专家到领域专家"></a>从团队专家到领域专家</h2><p>我们还是先剖析一下P8的要求。P8对应的工作年限一般是8年以上，核心能力要求可以用一句话来概括， <strong>指挥多个团队达成目标</strong>。</p><p>这些团队的构成不是随机的，而是跟业务发展阶段和团队规模大小有关，通常有两种构成模式。</p><p>第一种是 <strong>横向模式</strong>，指的是P8带领的团队的专业领域相同，横向支撑多个业务。</p><p>这种模式常见于业务成熟期或者规模比较大的团队。比如某业务线所有Android开发人员都由1个P8带领，然后拆分为3个Android小组，每个小组支撑不同业务的App开发。团队结构示意图如下：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9ef5e4c647bec38e1bdca97dc7c3fe2c.jpg"></p><p>第二种是 <strong>纵向模式</strong>，指的是P8带领的团队的专业领域不同，端到端地纵向负责同一业务。</p><p>这种模式常见于新业务初期或者规模不大的团队，很多BAT出身的P8到创业公司担任CTO或者技术总监时，就会采用这种模式带团队。比如1个P8负责带某业务的所有技术团队，包括客户端（含Android和iOS）、前端、后端、运维和测试等。团队结构示意图如下：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/35859b4e01b09df17a35965d73d3aa0c.jpg"></p><p>现在，我们再对比一下P7和P8的核心能力要求就会发现，虽然看上去只是从“ <strong>单</strong> 个团队”到“ <strong>多</strong> 个团队”的一字之差，但是在影响力上却发生了本质的改变，主要体现为两点。</p><p>第一，专业影响力范围从团队内提升到领域内。</p><p>P7带单个团队，而P8是带单个领域的多个团队。如果P8带的是横向模式的团队，那么负责的就是单个专业领域；如果带的是纵向模式的团队，那么负责的就是单个业务领域。</p><p>这就对P8的 <strong>技术水平</strong> 和 <strong>业务理解</strong> 提出了更高层次的要求。</p><p>第二，组织影响力范围从单个团队提升到跨团队。</p><p>P7只需要指挥自己团队内部的人就行了。但P8不同，虽然已经带了2～5个10人以内规模的团队，但是要想实现目标，光靠他们有时还不够，P8还需要指挥这些团队以外的人。比如有的项目涉及产品和运营配合，有的需要客户端、后台、运维一起协作。</p><p>这在一方面对P8的 <strong>管理手段</strong> 提出了更高层次的要求，另一方面也把晋升 <strong>跟业务目标绑定</strong> 起来，增加了很多不确定和不可控的因素。</p><p>总的来说，P8的主要提升目标是 <strong>成为有影响力的领域专家</strong>。接下来，我就从技术、业务和管理三个维度一一展开讲解。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/31528b48db2265649cd2839b34be6705.jpg"></p><h2 id="技术：精通领域相关技术"><a href="#技术：精通领域相关技术" class="headerlink" title="技术：精通领域相关技术"></a>技术：精通领域相关技术</h2><p>我们先看技术维度。</p><p>P8级别是技术能力的顶峰。在P5～P8的晋升过程中，考察核心都是技术能力。业务能力和管理能力只是加分项，只要技术不行，业务能力和管理能力再好都很难晋升。（相比之下，从P9开始，对业务能力、管理能力和业界影响力等维度的考核比重会大大上升。就算你技术很厉害，只要业务能力和管理能力不行，同样很难晋升。）</p><p>P8级别的技术详细要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9010063f849021bed1db66b9a6231a31.jpg"></p><h3 id="技术深度-领域相关的技术宽度"><a href="#技术深度-领域相关的技术宽度" class="headerlink" title="技术深度+领域相关的技术宽度"></a>技术深度+领域相关的技术宽度</h3><p>那么P8提升技术能力的关键是什么呢？答案是技术深度和技术宽度齐头并进。</p><p>如果只有技术宽度，可能给人一种比较飘的感觉，成为“什么都知道，什么都不懂”的 <strong>PPT技术专家</strong>；如果只有技术深度，技术视野太窄，就难以跟上业界技术的发展步伐，无法做出合理的技术判断、选择和规划。</p><p>P7虽然也在技术深度的基础上增加了技术宽度的要求，但技术宽度的范围是和 <strong>团队相关</strong> 的，而P8的技术宽度范围是 <strong>领域相关</strong> 的，范围要大得多，你要学习和提升的东西也多得多。 <strong>这是P7很难晋升P8的第一个原因。</strong></p><h3 id="领域的划分和边界"><a href="#领域的划分和边界" class="headerlink" title="领域的划分和边界"></a>领域的划分和边界</h3><p>既然我们说P8是“领域专家”，那么这里的“领域”是怎么划分的呢？业界一般有两种方法：</p><p>一是按照技术领域划分，比如Android开发、Java业务开发和大数据等。</p><p>二是按照业务领域划分，比如推荐业务、广告系统和支付业务等。</p><p>通俗地说，“领域专家”就是在自己负责的领域“什么都懂”。不过问题又来了，“领域”的边界要怎么定义呢？</p><p>很多人把领域理解成“整个专业领域”，以为懂得越多越好。所以有的Android开发人员会去学习MySQL或者Redis，这样的做法在P8级别是不合适的，往往投入很大而收益却很少（P9反而要这样做，因为要拓展技术广度）。</p><p>其实，要界定领域的边界，有一个很简单的方法，那就是画技能图谱。只要画出完整的技能图谱，领域的范围也就基本界定了。</p><p>我在下面放了一张前端领域的技能图谱，供你参考。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/1d2abfc04ce9f1b6b06925d07179dfa0.png"></p><p>我们可以看到，领域的范围确实很大。想成为领域专家，需要提升的东西可不少。</p><p>很多人在晋升P8的时候都遇到这样一个场景：某位评委问了你专业领域里的一项技术，你又刚好不太熟，没有回答好，结果评委团就因此认定你在技术维度上表现得不够好，最终没有让你通过晋升。</p><p>也许你觉得很委屈或者运气不好，但是从P8的要求来看，这种考核标准其实是有一定道理的。</p><p>可是问题在于，很多尝试晋升P8的技术人员，已经承担了比较重的任务，没有那么多的时间来提升技术。</p><p>那么，怎么才能高效地提升自己的技术深度和技术宽度呢？除了前两讲提到过的链式学习法和比较学习法之外，我再介绍两种很管用的方法。</p><p>第一种方法是 <strong>研究业界的开源项目</strong>。</p><p>你可以通过学习和研究开源项目的原理和设计来提升技术宽度，通过研究开源项目的源码来提升技术深度。具体的学习方法，你可以参考 <a href="https://time.geekbang.org/column/article/10022">《如何高效地学习开源项目》</a> 这篇文章。</p><p>当然，开源项目的数量非常多，每个都深入研究的话时间和精力不允许，可以优先关注本领域成熟的、流行的开源项目。比如Java后端开发领域的MySQL、Redis、Nginx和Netty等，前端开发领域的Vue、React和Node等，Android开发领域的OkHttp、Picasso和EventBus等。</p><p>第二种方法是 <strong>参加业界的技术大会</strong>，比如QCon技术大会、架构师峰会、GMTC（全球大前端技术大会）、GOPS（全球运维大会）和人工智能峰会等。</p><p>你可以通过参加技术大会，快速地掌握本领域相关技术在业界的应用情况。尤其是领头羊企业（BAT和TMD等）的技术积累和经验，具有很好的借鉴意义。同时，你只要关注一下大会上讲得最多的技术是哪些，就能够识别出业界整体的技术发展趋势。</p><p>当然，如果你能直接在技术大会上做主题演讲，把自己在技术上的经验整理成优质的内容输出给业界，那就更有利于晋升了。因为这会大大提升你的影响力，而P7升P8的时候，在公司和业界的技术影响力恰恰是评委考察的一个重要方面。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/e5b7429e543cc090yy9cbd03c759e857.jpg"></p><h2 id="业务：熟悉多个业务或精通端到端业务"><a href="#业务：熟悉多个业务或精通端到端业务" class="headerlink" title="业务：熟悉多个业务或精通端到端业务"></a>业务：熟悉多个业务或精通端到端业务</h2><p>接着，我们来看业务维度。P8级别对业务的要求和团队构成模式有关。</p><p>如果是横向模式，P8需要熟悉团队涉及的每一个业务。而且因为这些业务本质上属于某个大的行业，为了能够更好地理解业务，P8还需要对行业有一定理解。</p><p>如果是纵向模式，P8只负责1个业务。跟横向模式相比，虽然需要熟悉的业务数量更少，但是对于理解深度的要求要高得多，除了要熟悉自己负责的业务之外，还要深入理解公司内或者行业内类似的业务。</p><p>P8级别对业务的详细要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9917d26149c2c38c64cc9e424e31e03d.jpg"></p><p>P5&#x2F;P6核心能力的关键词是完成“任务”，而P7&#x2F;P8核心能力的核心是指挥团队达成“目标”。它们的差别在于： <strong>任务是从过程的角度来衡量的，而目标是从结果的角度来衡量的。</strong></p><p>以最简单的需求开发为例，P5&#x2F;P6只需要按照项目计划完成各项任务就行了，而P7&#x2F;P8要对业务最后的结果负责。</p><p>P7虽然也要为业务结果负责，但在晋升考核的时候，技术能力还是核心考察项，业务结果是加分项；而对P8来说，能不能拿到好的业务结果，这一点在考核中所占的比重要大得多，基本上和技术能力是平起平坐的地位。 <strong>这就是P7很难晋升P8的第二个原因。</strong></p><p>可能很多人会认为这么做不公平，因为业务结果很多时候并不是由技术人员决定的，比如新冠疫情导致旅游、航空的业务量大幅下降，某些地方的政治局势不稳定导致线下消费用户量大幅减少。</p><p>虽然这些情况是客观存在的，但是这并不意味着技术人员对业务结果就完全不可控了。其实，我们可以在很多方面对业务结果做出直接贡献。</p><p>以互联网2C业务为例，常见的技术手段包括通过降低App包大小提升下载成功率、优化某些功能让用户体验更好、提出更合理的方案来满足用户需求以及设计良好的架构来应对秒杀抢购等特殊场景等。</p><p>采取合适手段的前提是，我们对业务足够了解。那么，P8阶段要怎么提升对业务的认知呢？</p><p>针对单个业务，P8和P7提升的方式差不多，你可以回顾上一讲的内容；针对行业的业务战略，你可以借助 <strong>宝洁战略模型</strong>，从愿景、使命、定位、策略、能力和组织等方面来理解。关于宝洁战略模型，我会在 <strong>专项提升</strong> 部分详细介绍。</p><p>站在公司的角度看，引导员工拿到更好的业务结果是理所当然的，这也在侧面体现了第3讲提到的价值原则。</p><p>不过，过于重视业务结果的做法，确实会增加运气因素对晋升的影响，导致结果有时候看起来不那么公平。</p><p>比如A和B两个人都是P7，其中A的能力比较强，但是运气不好，所在的业务没有发展，甚至还出现了倒退；而B正好在一个业务快速发展的团队中，拿到了更多的漂亮的结果。如果他们俩同时申请晋升，B通过的可能性反而更大。</p><p>这种现象是不可避免的，尤其是到了P8之后，运气很多时候就是晋升的关键，有机会展现能力并且拿到结果的人可以晋升，有能力但是没法通过结果展现出来的人就不能晋升。</p><p>如果个人遇到这种情况，认为自己有能力但是没机会展现的话，换个岗位甚至公司可能是更好的选择，找到适合自己发展的岗位比找一个名气很大的团队更重要。</p><p>所以说， <strong>晋升当然要靠自我奋斗，但也要考虑历史的进程。</strong></p><h2 id="管理：核心是抓重点"><a href="#管理：核心是抓重点" class="headerlink" title="管理：核心是抓重点"></a>管理：核心是抓重点</h2><p>最后的管理维度。P8需要指挥一个领域的多个团队。</p><p>P8级别对管理的详细要求，我总结在了这张表格里：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/ca0d843e8668b788f8469a661be23fa9.jpg"></p><p>跟P7相比，P8的管理范围更大，可能存在以下困难：</p><ol><li>团队人员数量变多，不可能熟悉每个人了。</li><li>项目数量大大增加，不可能参加每个项目了，包括需求评审、方案设计等。</li><li>需要参与的各种管理事项大大增加。</li></ol><p>所以，我们不能简单地使用和P7一样的管理方法，而是需要对管理技能进行升级。那么，怎么提升自己的管理能力呢？</p><p>核心思路就是要学会 <strong>抓重点</strong>。我们必须认识到，P8的管理方式不能再像P7那样偏重细节和执行方面的管理（否则时间和精力根本不够用），而是应该关注重点事项的管理。</p><p>我根据自己的实践经验，总结了P8阶段管理的三大重点：</p><ol><li><strong>团队管理：搭建梯度</strong></li></ol><p>因为P8无法关注团队的每一个人，很多事情的传达和具体执行效果是靠P7&#x2F;P6级别的人来把控的，所以P8需要重点关注 <strong>搭建合理的团队梯度</strong>，包括核心的TL&#x2F;P7&#x2F;P6有哪些，核心人员的状态，核心人员的晋升规划等，都是需要重点考虑的。</p><p>什么样的团队梯度就算合理呢？一个简单的判断原则是， <strong>每个核心人员都至少有一个备份人员</strong>。比如P8自己要有1个以上的P8&#x2F;P7+能够做自己的备份人员，每个TL要有1个潜在的TL备份人员，每个核心业务都至少有2个P7能够支撑，依此类推。</p><ol><li><strong>目标管理：参与制定，保证理解</strong></li></ol><p>P8需要指挥多个团队达成业务目标，所以对于业务目标的制定和理解是很关键的。P8级别已经有机会参与业务目标的讨论和制定，不能只是带着耳朵去听一下，而要真正地参与进去。</p><p>对于最终确定的业务目标，P8级别的人必须是充分理解和赞同的，因为之后P8还需要向团队（包括自己直接指挥的团队和相关协作团队）解读业务目标。如果不理解或者不赞同，在目标讨论过程中就应该提出来，经过讨论或者PK最终达成共识，这样才能为团队拿到更合理的业务目标。</p><p>千万不能在讨论业务目标的时候不认同或者不理解但是却不说，然后跟下面团队沟通的时候来一句“其实我也不怎么认同这个目标”，这样做会大大伤害团队的积极性和稳定性。</p><ol><li><strong>技术管理：关注演进</strong></li></ol><p>P8级别负责的是整个领域的技术，需要重点关注领域技术的演进。也只有P8来做这个事情是最合适的，相比P7来说，P8有几个优势：一是技术视野，P8关注的是整个领域的技术，技术宽度比P7更强；二是团队资源，领域技术的演进投入可能会比较大，P8能够协调多个团队共同来完成；三是业务理解能力，P8的业务理解能力更好，而且能够掌握更多的业务信息，所以更容易结合业务来考虑技术演进。</p><p>最后，我再分享一下P8级别精力分配的经验。如果带横向模式的团队，可以参考532标准，也就是技术50%、管理30%、业务20%；如果带纵向模式的团队，可以参考433标准。</p><p>实际比例可以视情况灵活调整。总的原则是，既不要丢掉技术，也要重视业务，技术比例不要低于30%，业务比例不要低于20%。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲我基于COMD能力模型，给你详细解读了P8级别的具体要求以及对应的提升技巧。现在，我们回顾一下这一讲的重点：</p><ol><li>P8的核心能力要求是指挥多个团队达成目标，主要提升目标是成为有影响力的领域专家。</li><li>技术维度上，P8需要精通领域相关的技术，重点提升领域技术宽度，可以通过研究开源项目和参加技术大会来拓宽自己的技术宽度，也可以在技术大会上做主题演讲来提升自己的影响力。</li><li>业务维度上，P8需要熟悉多个业务，并且开始需要掌握战略规划相关的技能，以帮助自己理解业务整体规划，可以采取“宝洁战略模型”的方法快速提升自己的业务理解力。</li><li>管理维度上，P8需要负责指挥多个团队，提升自己管理技能的核心是学会抓住三个管理重点：搭建团队梯队，参与目标制定，关注技术演进。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/7390f36a8bd940fa320c4d3594a78bc0.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。</p><p>对于你现在负责的业务和指挥的团队来说，晋升P8的机会可能在哪里？如果要把握这样的机会，你会怎么规划接下来的行动？（就算你目前不是处在P7晋升P8的阶段，也不妨假设自己是团队里的P7，来分析一下这个问题。）</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/f2d94e0c27c2a628eb0b3f4af7f0df48.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;10-P8提升攻略：怎么成为有影响力的“领域专家”？&quot;&gt;&lt;a href=&quot;#10-P8提升攻略：怎么成为有影响力的“领域专家”？&quot; class=&quot;headerlink&quot; title=&quot;10 | P8提升攻略：怎么成为有影响力的“领域专家”？&quot;&gt;&lt;/a&gt;10 | P</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>12 | PPT框架：标准的晋升PPT长什么样子？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/4164884344.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/4164884344.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-PPT框架：标准的晋升PPT长什么样子？"><a href="#12-PPT框架：标准的晋升PPT长什么样子？" class="headerlink" title="12 | PPT框架：标准的晋升PPT长什么样子？"></a>12 | PPT框架：标准的晋升PPT长什么样子？</h1><p>你好，我是华仔。</p><p>从这一讲开始，我们进入到课程的第三部分，面评技巧。</p><h2 id="面评技巧导学"><a href="#面评技巧导学" class="headerlink" title="面评技巧导学"></a>面评技巧导学</h2><p>你可能会认为，“是金子总会发光的”，只要自己能力达到了，晋升就是“水到渠成”的事情。毕竟评委的眼睛都是雪亮的，经验又丰富，自然能够看出你的闪光之处。</p><p>然而现实情况并不是这样，你的能力到底强不强，在评委的眼中可能没有那么明显。因为他们根本没有足够的时间和精力来充分地考察你，只能通过不到2个小时的 <strong>面评</strong> 对你做出判断。</p><p>所谓“面评”，就是评审阶段的当面交流，包括写PPT（前期的材料准备）、讲PPT（晋升自述）、答辩（回答评委问题）等环节。你需要介绍证据，回答提问，向评委证明自己达到了目标级别的要求。</p><p>可以这么说，你的面评表现在很大程度上决定了你的晋升结果。而如果我们把影响面评表现的因素做个排名的话，你的能力占比是50%，而面评技巧可以占到30%。（你还记得剩余20%是什么吗？温馨提示：想不到的话可以回顾一下 <a href="https://time.geekbang.org/column/article/313540">第2讲</a>。）</p><p>虽然在你能力不行的情况下，面评技巧无法帮助你通过晋升；但是如果你光有能力，却没有掌握面评的技巧，很可能还是会晋升失败。</p><p>所以在面评技巧部分，我会针对面评中的几个关键环节，帮你提示常见误区、总结实战经验。学完这一部分，你就能充分地展现自己的能力，发挥出应有的水平。</p><p>这一讲，我们就先来看看标准的晋升PPT长什么样子。</p><h2 id="晋升PPT的常见误区"><a href="#晋升PPT的常见误区" class="headerlink" title="晋升PPT的常见误区"></a>晋升PPT的常见误区</h2><p>晋升PPT是你用来向评委展示自己能力的关键性材料，非常重要。但是怎么才能写好晋升PPT呢？大部分人都没有什么经验。我在做评委的时候发现，即使是申请晋升P8的人，PPT可能也写得让人不是很满意。</p><p>根据我的观察，申请者准备晋升PPT的时候，经常陷入一些思维误区当中。</p><h3 id="误区1：晋升PPT的形式越炫酷越好"><a href="#误区1：晋升PPT的形式越炫酷越好" class="headerlink" title="误区1：晋升PPT的形式越炫酷越好"></a>误区1：晋升PPT的形式越炫酷越好</h3><p>有些人以为PPT就是要做得漂亮、做得炫酷，所以采用了大量的图表和区块，明明简单的一两句话就能说清楚的事情，也要用区块占一整页PPT，甚至还专门加一些动画效果。</p><p>事实上，PPT的漂亮和炫酷程度并不是关键，有时候反倒会成为累赘，因为评委可能会觉得你的PPT是“内容不够，形式来凑”。</p><h3 id="误区2：晋升PPT列的事情越多越好"><a href="#误区2：晋升PPT列的事情越多越好" class="headerlink" title="误区2：晋升PPT列的事情越多越好"></a>误区2：晋升PPT列的事情越多越好</h3><p>有些人在总结自己能力的时候，以为列的事情越多，就越能证明自己的能力很强，于是干脆把做过的事情全部罗列出来，逐个介绍。</p><p>我曾经遇到过一个申请晋升P7的Java服务器开发同学，他把自己做过的6个项目、处理过的5个线上问题、写过的3篇文章以及4次担任新员工导师的经历全部列了出来，甚至连在团队内部用Python做了一个小工具都没有放过，每件事情都花1～2页PPT来介绍。</p><p>最终的结果自然是没有通过，因为评委无法判断哪些能力才是他的核心能力，产生一种他“啥都会但又啥都不精”的感觉。参加过面试的朋友应该都知道，一旦面试官对你形成了这种印象，多半是要凉的，其实晋升答辩也是这样。</p><h3 id="误区3：晋升PPT的内容越详细越好"><a href="#误区3：晋升PPT的内容越详细越好" class="headerlink" title="误区3：晋升PPT的内容越详细越好"></a>误区3：晋升PPT的内容越详细越好</h3><p>有些人虽然知道PPT不要列太多事情，而是要挑几件主要的来讲，但是对于挑出来的这几件事，介绍得特别详细，什么细节都不放过。他们这么做可能是担心因为紧张而漏讲一些事情，也可能是因为不知道评委会关注什么，以为只要都讲，总能踩到“得分点”。</p><p>这个误区有两种表现形式。第一种是虽然页数少，但是每一页的内容特别多，密密麻麻的全是区块和文字，简直要把人逼出“密集恐惧症”。</p><p>站在评委的角度，不管是看你的PPT，还是直接听你讲，都很难把握重点。你自以为讲了7～8个点，但是很可能他们听完以后只能记住3～4个点，而且也不知道其中最重要的点是什么。</p><p>另外，因为不同的评委可能记住了不同的点，在后续的答辩环节中，他们问的问题也会比较散，你无法通过一个回答在多位评委那里同时加分。</p><p>第二种表现形式是虽然每一页内容相对少一些，但是页数很多，讲PPT的时候翻页翻得飞快。</p><p>站在评委的角度，他们无法把连续几页PPT的内容整合成某个主题相关的完整内容，可能看到后面就忘了前面。</p><p>比如我曾经遇到过一位同学，他在介绍某个项目的设计方案的时候，第1页讲业务需求，第2页讲数据库表设计，第3页讲缓存，第4页讲并发设计，第5页讲业务效果，第6页总结一下。</p><p>本来1页的内容就不少，6页合起来就更多了，再加上其他晋升事项也都是这么写的，为了能讲完，他只能把语速提得非常快。</p><p>这样6页讲下来，时间只用了3分钟，但讲的内容又很多，评委记不住他讲的内容，也无法抓住他要讲的重点，自然也就没办法对这个方案做出准确的总体判断。</p><h2 id="标准的晋升PPT框架"><a href="#标准的晋升PPT框架" class="headerlink" title="标准的晋升PPT框架"></a>标准的晋升PPT框架</h2><p>现在，我们已经了解了晋升PPT的常见误区，但是光知道误区还不足以写出好的PPT。比如我们知道了晋升PPT的内容不是越多越好，但是到底写多少才合适呢？你肯定希望有一个明确的可以衡量的标准。</p><p>那么，在评委眼中，什么样的PPT是好的晋升PPT呢？简单来说就是，内容好才是真的好，具体要求如下：</p><ol><li><strong>结构清晰</strong>：比如用金字塔原理或思维导图来讲解思路，用时间线模型来讲解发展历程，用架构图来讲解系统，用流程图来讲解业务，用UML类图来讲解代码等。</li><li><strong>重点突出</strong>：在PPT上，将核心内容提炼成3～5点，让评委能够快速理解你要讲的内容范围。无论是总体上要讲的事项还是每个事项的亮点，都应该遵循这个思路。</li><li><strong>与实际讲述内容匹配</strong>：你要讲什么，PPT就配合呈现什么，最忌讳的就是讲的内容和PPT内容不相符。</li></ol><p>接下来，我就分享一下自己这些年摸索出来的晋升PPT标准框架和写作技巧，供你参考。</p><p>一个标准的晋升PPT应该由三个部分构成，我们一个一个来看。</p><h3 id="第一部分：自我介绍"><a href="#第一部分：自我介绍" class="headerlink" title="第一部分：自我介绍"></a>第一部分：自我介绍</h3><p>第一部分是1～2页的 <strong>自我介绍</strong>，包括三块内容：</p><p>一是 <strong>基本信息</strong>，也就是你的姓名、所在团队和业务、当前级别、申请晋升的级别等信息。</p><p>通常情况下，我们都是逐级晋升。但也有跨级晋升的情况，这种情况在跨越式职级体系中比较罕见，而在阶梯式职级体系中，同级别内的跨级晋升还是比较常见的，所以你要注明一下。</p><p>二是 <strong>当前职责</strong>，也就是你当前主要的职责，比如参与或负责哪块业务、是否带团队、团队规模多大、担任了什么关键岗位（比如项目负责人、系统owner）等。</p><p>三是 <strong>工作经历</strong>，也就是以前在哪里待过，做过哪些重要项目。</p><p>首先是前公司的经历，格式是：</p><p>在职时间&#x2F;公司名称&#x2F;最高职位</p><p>比如：</p><blockquote><p>2004～2009 华为技术有限公司 高级软件开发工程师</p></blockquote><p>如果你参与了一些关键项目，也可以把这些项目的名称写上，但不要超过3条。</p><p>当然，要是你换工作比较频繁，公司名气不大，项目又没有什么亮点，这部分也可以不写。</p><p>其次是现公司的经历，如果你在现在的公司待的时间比较久，中间换过几个业务线，这部分也需要写上，参考格式如下：</p><p>在岗时间&#x2F;业务线&#x2F;最高职位&#x2F;关键项目</p><p>比如：</p><blockquote><p>2010.09 ～ 2013.05 支付宝 技术专家 支付宝App无线化项目</p></blockquote><h3 id="第二部分：自述材料"><a href="#第二部分：自述材料" class="headerlink" title="第二部分：自述材料"></a>第二部分：自述材料</h3><p>第二部分是10～15页的 <strong>自述材料</strong>，用来向评委展现自己能力。</p><p>自述材料总体的写作指导思想就是 <strong>金字塔原理</strong>，围绕“我达到了xx级别的要求”这 <strong>1个中心主题</strong>，设计 <strong>3～5个核心论据</strong>，每个论据分为背景、任务、行动和结果 <strong>4个部分</strong> 展开。整个结构就像金字塔一样，中心明确，层次分明，逻辑清晰。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/47a18ae196fafdb747615bd1eb4a5c18.jpg"></p><p>因为这一部分是晋升PPT的核心内容，篇幅最长，地位也最重要，不是两三句话就能完全说清楚的，所以我会在下一讲继续展开，为你详细介绍利用金字塔原理写自述材料的具体方法。</p><h3 id="第三部分：辅助内容"><a href="#第三部分：辅助内容" class="headerlink" title="第三部分：辅助内容"></a>第三部分：辅助内容</h3><p>第三部分是1～3页的 <strong>辅助内容</strong>，包括两部分：</p><p>一是 <strong>自我总结</strong>，用能力矩阵或者区块的形式，把你的核心能力再提炼总结一下，让评委有一个整体的印象。</p><p>需要注意的是这里的提炼要和前面讲的内容呼应，不能前面重点讲了某项能力，结果在总结里面看不到了。同时需要注意的是核心能力3～5项最合适，不要列出来10项核心能力，这样就体现不出“核心”了。</p><p>二是 <strong>发展规划</strong>，结合自己的发展目标（比如这次由P6晋升P7之后，还想继续晋升到P8）、业务的发展趋势、自己的不足等情况，设定一个综合的发展方向和路径。</p><p>你可能会担心，把缺点也列出来，会不会导致评委给自己打低分呢？其实正好相反，这样做恰恰证明你对自己的能力有清晰的认知，并且对职业发展有长远的规划。</p><p>反倒是如果一个你通篇都没有谈到自己的任何缺点，评委很可能会问一些开放性的问题，来考察你对自己的认知是否全面，比如“你觉得自己目前的主要缺点或者不足的地方在哪里”。</p><p>需要注意的是，列出来的一定是自己想清楚的缺点，不能为了列缺点而随便写几个凑数，因为评委有可能会真的对这部分也展开提问。</p><p>另外还有一点也需要注意，你欠缺的能力不能是目标级别的核心要求，而应该是更高的要求，不然就是自己打自己脸了。</p><p>比如你是Java服务器开发人员，现在申请晋升P7，那么评委实际上是按照P7-来评估的，你可以看看P7和P7+的要求你有哪些做得还不够。</p><p>这种情况下，你就不能说自己对JVM的垃圾回收这种基础的原理和技术还不熟悉，但是你可以说“希望在晋升P7之后，能够带5人以上的团队负责xx项目，锻炼自己的管理能力”。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲，我为你介绍了晋升PPT的常见误区和标准框架，相信现在你已经学会怎么从整体上展现自己的能力和亮点了。</p><p>现在，我们再回顾一下这一讲的重点：</p><p>1.写晋升PPT的时候有3个常见误区，分别是形式越炫酷越好，列的事情越多越好，内容越详细越好，这些都是我们要注意避免的。</p><p>2.好的晋升PPT有3点要求，分别是结构清晰，重点突出，与实际讲述内容匹配。</p><p>3.标准的晋升PPT框架可以分为3个部分，首先是1～2页的自我介绍，其次是10～15页的自述材料，最后是1～3页的辅助内容。其中自述材料最重要，总体的写作指导思想是金字塔原理。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/a7dace5d9c30bebf0f60240ee0330887.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。既然晋升无论是对公司还是对个人，都非常重要，那么为什么不让晋升者把PPT多写一些、多讲一些呢？这样不是能够更加全面地考察人才吗？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/8f98c4bb6ccb39073550431a0d5abd25.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;12-PPT框架：标准的晋升PPT长什么样子？&quot;&gt;&lt;a href=&quot;#12-PPT框架：标准的晋升PPT长什么样子？&quot; class=&quot;headerlink&quot; title=&quot;12 | PPT框架：标准的晋升PPT长什么样子？&quot;&gt;&lt;/a&gt;12 | PPT框架：标准的晋</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>14 | PPT讲解：怎么讲才能让评委印象深刻？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3037664288.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3037664288.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-PPT讲解：怎么讲才能让评委印象深刻？"><a href="#14-PPT讲解：怎么讲才能让评委印象深刻？" class="headerlink" title="14 | PPT讲解：怎么讲才能让评委印象深刻？"></a>14 | PPT讲解：怎么讲才能让评委印象深刻？</h1><p>你好，我是华仔。</p><p>前两讲我介绍了晋升PPT的标准框架和自述材料的具体写法。</p><p>虽然写PPT已经是很大的挑战了，但其实讲PPT的难度还要更大。因为大部分人平时都缺少这方面的锻炼机会，不知道怎么讲才好。讲太少了担心没讲透，讲太多了又担心显得啰嗦，或者增加出错的机会。</p><p>所以很多人对于讲PPT是有一定畏惧心理的，也有很多人把自己晋升失败的原因归结为不会讲PPT。</p><p>这一讲，我就来跟你分享一些讲晋升PPT的经验，让你不再因为这个原因错失晋升的机会。</p><h2 id="经验一：做一个演讲者，而不是一台复读机"><a href="#经验一：做一个演讲者，而不是一台复读机" class="headerlink" title="经验一：做一个演讲者，而不是一台复读机"></a>经验一：做一个演讲者，而不是一台复读机</h2><p>上一讲我分享过一个写PPT的技巧，把PPT当成提词器，而不是讲话稿。同样的道理，在讲PPT的时候，你要做一个演讲者，而不是一台复读机。也就是说，你不要照着PPT念，而应该根据PPT上的关键词和语句，适当地展开说明。</p><p>比方说在我们介绍过的咨询类项目的例子中，PPT上写的只有几个字——“自媒体内容推荐”；而你要讲出来的却是一大段话—— “随着行业自媒体的发展，大量质量参差不齐的内容涌现，如何让优质内容快速到达目标用户成为一个很大的挑战。”</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/975f23a56ca4351ed620833107345662.jpg"></p><p>另外还有一个小技巧，讲的时候要结合PPT的布局，根据从左向右、从上往下的顺序。因为评委看PPT的时候是按照这个顺序来看的，你不要跳着来讲，不然会增加评委理解的负担。</p><h2 id="经验二：有效页1～3分钟，总时间20～30分钟"><a href="#经验二：有效页1～3分钟，总时间20～30分钟" class="headerlink" title="经验二：有效页1～3分钟，总时间20～30分钟"></a>经验二：有效页1～3分钟，总时间20～30分钟</h2><p>不管是晋升PPT还是各种技术会议的演讲PPT，你都可以根据 <strong>有效页</strong> 的数量来估算时间。什么是有效页呢？它是指去掉封面、所有目录页、Q&amp;A、鸣谢页、封底、广告页、二维码页等过渡类和引导类页面之后，剩余的内容页。</p><p>一个有效页的讲解时间建议是1～3分钟，平均控制在2分钟左右。为什么是这个时长呢？因为如果时间再短一些，讲完后评委没什么印象；时间再长一些，讲完后评委只知道你讲了很多，但具体讲了什么就记不住了。</p><p>我们可以根据这个时间参考值来合并或者拆分PPT。如果某个有效页的讲解时间不到1分钟，可以合并到其他页；如果某个有效页的讲解时间超过3分钟，可以拆成2页。</p><p>晋升自述的时间在20～30分钟这个范围内，可以适当超时3～5分钟。但是超时太多的话，评委可能就会直接打断，或者请提醒你加速，因为评委一天可能要评5～6个人，时间安排是很紧凑的。</p><p>根据这个总时间，我们就知道晋升PPT有效页的标准页数是10～15页，太多就需要裁剪，太少就需要补充。</p><h2 id="经验三：自述讲What，答辩讲Why"><a href="#经验三：自述讲What，答辩讲Why" class="headerlink" title="经验三：自述讲What，答辩讲Why"></a>经验三：自述讲What，答辩讲Why</h2><p>在面评的时候，自述环节的时间是比较短的，答辩环节才是重头戏，评委主要是在答辩环节通过问答的方式来考察申请者的能力。</p><p>所以，我们不要在自述环节就把内容全部讲完了，一是因为时间不够，二是因为不知道评委到底关注哪部分内容。如果我们讲了一大堆，评委都不感兴趣，反而浪费时间。</p><p>合理的做法是什么呢？自述环节主要讲What，也就是事实部分，我们做了什么；答辩环节再根据评委的问题来讲Why，也就是这样做的原因，一般是你对技术原理的理解、你对业务的思考以及你过去总结的经验教训等。</p><p>我在上一讲介绍的用来写自述材料的STAR方法，讲的就是What。那么针对这些What，常见的Why有哪些呢？我总结在了下面这个表格里，供你参考。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/3a3edabc61c508b8869a33b6f0c890a1.jpg"></p><h2 id="经验四：无论多忙都要安排模拟面评"><a href="#经验四：无论多忙都要安排模拟面评" class="headerlink" title="经验四：无论多忙都要安排模拟面评"></a>经验四：无论多忙都要安排模拟面评</h2><p>这是最重要的经验，也是效果最好的经验。</p><p>能够参与晋升评审一般都是优秀的员工，本身肯定也承担着比较重的工作任务。在时间不够的情况下，很多人都选择先完成工作任务本身，而把晋升相关的事情一直拖着。我见过很多申请者，晋升PPT一直拖到答辩前两天才匆匆忙忙开始写，写的时候也是东拼西凑，写完就直接拿去用了。</p><p>其实这样做是非常亏的。除非出了线上的重大事故，否则对于申请人来说，晋升的优先级是最高的，毕竟2～3年才参加一次晋升，我们应该做好充分的准备。</p><p>产品没有经过测试，你肯定不敢直接发布吧？那么晋升PPT没有经过测试，你怎么就敢直接拿去讲呢？俗话说得好：“临阵磨枪，不快也光。”无论多忙，我们在参加面评之前都要模拟一下，上战场之前把枪再磨一磨。</p><p>具体的方式有两种，第一种是 <strong>自己试讲</strong>，你找一个会议室（实在没有会议室也可以在自己座位上），打开PPT演示模式，试着讲几遍。</p><p>试讲的时候要注意两点，一是要发出声音，不要在心里默念；二是计时，如果试讲的时候发现时间太长，就要调整PPT内容或者减少某些内容的讲解时间了。</p><p>一般来说，自己试讲3遍以上，才能讲得比较流畅。</p><p>第二种方式是 <strong>内部模拟面评</strong>，协调部门内的高级别人员扮演评委的角色，对你进行一次模拟面评，流程和正式面评一样，你先在自述环节讲PPT，然后在答辩环节回答问题。</p><p>内部模拟面评有三个好处：</p><p>首先，你可以感受到面评的氛围，提前适应压力，等到了真正进行面评的时候就不会那么紧张了。</p><p>其次，内部高级别人员曾经参加过晋升，甚至可能担任过评委，知道评委可能会关注哪些点，能够帮助你提前发现遗漏和疏忽的地方。</p><p>最后，你也可以通过模拟面评发现PPT或者讲述内容中的一些错误。</p><p>另外还有一点需要注意，这毕竟只是模拟面评，内部高级别人员的关注点不一定就和评委的关注点完全一致，不能因为内部模拟面评感觉不错就放松警惕，多做点准备总是没错的。</p><h2 id="一些常见的疑问"><a href="#一些常见的疑问" class="headerlink" title="一些常见的疑问"></a>一些常见的疑问</h2><p>最后，针对申请人问得比较多的常见疑问，我也在这里一并解答。</p><p><strong>1. 面评的时候是用自己的电脑来讲PPT吗？</strong></p><p>有的公司采取的方式是，申请人把晋升PPT发给面评现场负责的HR，使用公司准备的电脑来讲。</p><p>这种情况下，对于一些不方便直接写在PPT里，但是评委可能会在答辩阶段问到的内容，建议整体打包发给HR，方便现场展示给评委，比如你发表的文章链接、你在技术大会上演讲的PPT和你写过的设计文档等。</p><p>有的公司是让申请人自己带电脑，这样在展示相关材料的时候比较方便。</p><p>但是你也要特别注意两点，一是把相关材料整理到统一的地方，避免答辩的时候在电脑上到处找；二是答辩前给自己的笔记本电脑充满电，并且关掉无关的应用，保证电脑性能。</p><p>这个注意事项听起来有点多余，甚至有点好笑。但是我当评委的时候真的遇到过好几回，有的人讲的过程中电脑没电了，有的人电脑卡死了，现场一阵手忙脚乱。</p><p>这种失误既浪费了所有人的时间，又打断了你的思路，还会让你因为害怕这件事给评委留下不好的印象，变得更加紧张，所以一定要注意避免。</p><p><strong>2. 坐下来讲还是站着讲？</strong></p><p>一般建议坐着讲。因为答辩的地方就是公司普通的会议室，空间不会很大，站着讲也不太方便来回走动。而且评委都坐着，你站着的话，讲的时候更容易紧张。</p><p>当然，如果你具备了演讲技巧，并且非常自信，那么站着讲看起来会更有气势一些。</p><p><strong>3. 要不要和评委拉家常套近乎？</strong></p><p>有的人喜欢在开场的时候来一段客套话，比如“评委们一天要评这么多，应该都很辛苦，非常感谢你们的付出”之类的，其实没有必要。</p><p>还有的人更夸张，看到某个评委自己比较熟，上来就说“XX大神，想不到您竟然是我的评委呀，太幸运了！”这样会让所有的评委都尴尬，跟你熟的评委会担心别人觉得他故意放水；跟你不熟的评委可能会想：“难道我们让你感到不幸了吗？” ：）</p><p><strong>4. 讲的时候突然卡住了怎么办？</strong></p><p>其实关系不大，如果超过3秒你还没想起来，就不用想了，直接跳到后面能想起来的地方接着讲。关键是不要紧张，别搞得后面的内容也讲不好。</p><p>因为即使你卡住了没有讲，如果评委关注的话，后面的答辩环节还是会问的；如果评委不关注，那么不讲就更加没什么影响了。</p><p><strong>5. 讲的时候被评委打断了怎么办？</strong></p><p>这种情况说明评委觉得你太啰嗦了，没有讲出重点，比较浪费时间。所以你需要立刻调整讲法，对于还没有讲的页面，翻到之后不要急着开口，留3秒左右的时间想想，在这一页的内容里，评委想听的重点是什么。</p><p>当然，最好的方式是在内部模拟面评的时候就识别出来，提前规避掉“耗时太长，讲得太啰嗦”的问题，把PPT和自己讲述的内容调整到最佳状态。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲我跟你分享了讲解晋升PPT的四条经验。你只要对照这些经验多练习几次，那么到了正式面评的时候，一定能够以自信的姿态，给评委留下很好的印象。</p><p>现在，我们回顾一下这一讲的重点：</p><ol><li>做一个演讲者，而不是一台复读机，对照PPT上的关键词或者语句，适当展开说明。</li><li>按照有效页数量控制时间，一个有效页1～3分钟，总时间20～30分钟。</li><li>自述环节讲What，告诉评委你做了什么，结果如何；答辩环节讲Why，告诉评委你做事的依据，背后的思考、逻辑、方法论、经验和教训。</li><li>无论多忙，正式面评前都要安排内部模拟面评，提前适应并规避问题。</li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。如果自我感觉PPT没讲好，是不是晋升就基本没戏了？如果你认为没戏，理由是什么？如果你认为有戏，那么如何翻盘？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/713c887fba9500a5b26c6505e742511f.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;14-PPT讲解：怎么讲才能让评委印象深刻？&quot;&gt;&lt;a href=&quot;#14-PPT讲解：怎么讲才能让评委印象深刻？&quot; class=&quot;headerlink&quot; title=&quot;14 | PPT讲解：怎么讲才能让评委印象深刻？&quot;&gt;&lt;/a&gt;14 | PPT讲解：怎么讲才能让评</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>16 | 导学：你应该掌握哪些学习方法？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3615860809.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3615860809.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="16-导学：你应该掌握哪些学习方法？"><a href="#16-导学：你应该掌握哪些学习方法？" class="headerlink" title="16 | 导学：你应该掌握哪些学习方法？"></a>16 | 导学：你应该掌握哪些学习方法？</h1><p>你好，我是华仔。</p><p>从今天开始，我们进入到课程的第三部分，学习方法。</p><p>我相信绝大部分人都是愿意通过学习来提升自己的，但是在你学习的过程中，肯定会遇到很多困难。比如在之前的课程中，就有同学提出了非常典型的问题：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/f1146ee66f4058818cd5676cb889f3a1.png"></p><p>不知道你是不是也有这样的感受：光是上班累得要死，还要陪对象吃饭逛街看电影，或者送孩子去上培训班，根本就没什么时间学习；等到哪天好不容易有点空余时间，又因为没有计划，只能随便找本书或者上网水水论坛看看；就算知道要针对某个技能专门提升一下，也不知道怎么学才能达到精通水平；过段时间回头一看，前几周学的东西又忘得差不多了；跟别人交流一下子就暴露了水平……</p><p>其实你遇到的这些学习相关的困难，我在过去的职业生涯中也都遇到过。为此，我看了很多书来学习各种学习技巧，同时我自己也尝试总结了一些更加适合互联网行业的学习技巧。经过多年的实践检验和筛选，我逐步形成了一套系统的学习方法。</p><p>现在，我就把这一套方法分享给你，让你能够用最少的时间实现最好的学习效果。</p><h2 id="指导原则和关键问题"><a href="#指导原则和关键问题" class="headerlink" title="指导原则和关键问题"></a>指导原则和关键问题</h2><p>我认为一套系统的学习方法，既需要一个统领全局的宏观指导原则，让人能够一目了然地理解它的核心内容，同时也要能够回答以下四个关键问题：</p><ol><li><strong>时间从哪里来？</strong> 如果没有足够的时间投入，再好的理论也只是纸上谈兵。</li><li><strong>学什么？</strong> 找到正确的学习方向，明确了学习的目标，才能做到有的放矢。</li><li><strong>怎么学？</strong> 不同的学习目的应该有不同的学习方法，保证学习的投入产出比。</li><li><strong>怎么保证学习效果？</strong> 如何解决“学了用不上，学了就忘”两个常见影响学习效果的问题。</li></ol><p>按照这个思路，我将这套学习方法的大纲整理如下，方便你了解。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/c8b4b226a23134bd423a75011166189b.jpg"></p><p>接下来，我逐个简要介绍一下。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="指导原则：10000小时定律"><a href="#指导原则：10000小时定律" class="headerlink" title="指导原则：10000小时定律"></a>指导原则：10000小时定律</h3><p>总的指导原则是10000小时定律，它是一个很出名的用于专业领域提升的理论，有大量的相关资料可以参考（例如《异类》《1万小时天才理论》等），其核心思想是如果你想要在专业领域不断提升自己的能力，必须投入足够的时间。</p><h3 id="找时间：海绵学习法"><a href="#找时间：海绵学习法" class="headerlink" title="找时间：海绵学习法"></a>找时间：海绵学习法</h3><p>10000小时可不短，相当于平均每天3小时，持续10年时间。我们平时光是工作就已经“累成狗”了，可能还有家人需要照顾，怎么才能找到自己的10000小时呢？这就要靠海绵学习法了。</p><p>海绵学习法是我原创的一个时间管理方法，它可以让你轻松地挤出时间，既不会对工作、家庭和娱乐有明显的影响，又能够兼顾学习。</p><h3 id="学什么：三段分解法"><a href="#学什么：三段分解法" class="headerlink" title="学什么：三段分解法"></a>学什么：三段分解法</h3><p>有了时间之后，我们要学什么呢？怎么才能制定合理的学习目标呢？如何制定可行的学习计划并能够真正落地呢？这就要靠三段分解法了。</p><p>三段分解法是我原创的制定学习目标和计划的方法，它基于职业等级体系，将10000小时逐级分解，最终落实到可以实施的各项学习行动。</p><h3 id="怎么学：链式-环式-比较学习法"><a href="#怎么学：链式-环式-比较学习法" class="headerlink" title="怎么学：链式&amp;环式&amp;比较学习法"></a>怎么学：链式&amp;环式&amp;比较学习法</h3><p>确定目标和计划后，我们具体要怎么提升技术能力呢？在职级详解部分你已经了解到，技术能力可以拆解成三个维度，技术深度、技术宽度和技术广度。我在第9讲解释过这三个维度的区别。</p><p>针对技术能力的不同维度，我原创了3个不同的学习方法：</p><ul><li><strong>链式学习法</strong> 适合提升技术深度，通过自顶向下逐步深入的方式，将关联技术逐一掌握。</li><li><strong>比较学习法</strong> 适合提升技术宽度，通过比较相似的知识或者技能，全面掌握单个领域的技术。</li><li><strong>环式学习法</strong> 适合提升技术广度，通过学习业务闭环流程中相关技术，全面掌握多个领域的技术。</li></ul><h3 id="保证效果：Play学习法、Teach学习法"><a href="#保证效果：Play学习法、Teach学习法" class="headerlink" title="保证效果：Play学习法、Teach学习法"></a>保证效果：Play学习法、Teach学习法</h3><p>就算用对了方法，我们在学习过程中还是会遇到一些难以解决的困难，这些困难会导致我们学习效果不好。</p><p>第一个常见困难是，如果平时不学，真正要用的时候又来不及临时学；但如果平时学了，可能要等很久才能在工作找到的实践机会，到时候技术可能都生疏了。</p><p>第二个常见的困难是，学完之后感觉学得不深，跟别人讨论的时候，或者在晋升答辩环节被问到的时候，就发现很多东西明明学过，却说不出个所以然来。</p><p>针对这两个常见影响学习效果的问题，我通过学习和实践，归纳提炼出如下两种学习方法：</p><ul><li><strong>Play学习法</strong> 可以用来解决工作中暂时没有实践机会的问题，学以致“玩”，通过“玩耍”的方式来应用。</li><li><strong>Teach学习法</strong> 可以用来解决学得不深的问题，教学相长，通过“教学”的方式来加深理解。</li></ul><h2 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h2><p>最后，我还想补充一点，这些学习方法是相辅相成的，你可以根据你当前的级别和实际工作内容，把它们组合起来使用，具体的方式如下：</p><p>第一步，无论你当前是什么级别，先用“三段分解法”来规划你的学习目标和计划。</p><p>第二步，使用“海绵学习法”来找到你可以用于学习的时间。</p><p>第三步，根据学习目标采取相应的学习方法。</p><ul><li>如果你是Java后端P5&#x2F;P6&#x2F;P7级别，你的技术提升以技术深度为主，你可以采取“链式学习法”来学习MySQL以提升技术深度；</li><li>如果你是P7&#x2F;P8级别，除了技术深度外，还需要提升技术宽度，你可以采取“比较学习法”来学习PostgreSQL、MongoDB和Elasticsearch等存储系统；</li><li>如果你是P8&#x2F;P9级别，你可以采用“环式学习法”来学习跨领域的技能，比如学习vue、小程序和人工智能等业务闭环流程涉及的技术领域。</li></ul><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/5c5c54f21f09yyc7967e7b690028a285.jpg"></p><p>当然，并不是说每个级别都只能用指定的学习方法，例如Java后端P6&#x2F;P7的技术人员一样可以使用“环式学习法”从整体上概要地了解前端的基本原理。</p><p>第四步，采用“Play &amp; Teach学习法”来加强效果。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，我们总结一下这一讲的重点内容：</p><ol><li>一套系统的学习方法，既需要一个总的指导原则，也需要回答4个关键问题：时间从哪里来？学什么？怎么学？怎么保证效果？</li><li>在我总结的这套学习方法中，10000小时定律提供了指导原则；海绵学习法解决了时间从哪里来的问题；三段分解法解决了学什么的问题；链式、环式和比较学习法解决了怎么学的问题，Play和Teach学习法解决了怎么保证学习效果的问题。</li><li>学习方法是相辅相成的，你需要基于当前的级别和工作内容，把多个方法组合起来使用。</li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。你在学习过程中遇到的最大困难或者困惑是什么？你尝试了什么解决方法呢，效果怎么样？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/f88ef84d86c7f15f55c3a8a134f01bda.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;16-导学：你应该掌握哪些学习方法？&quot;&gt;&lt;a href=&quot;#16-导学：你应该掌握哪些学习方法？&quot; class=&quot;headerlink&quot; title=&quot;16 | 导学：你应该掌握哪些学习方法？&quot;&gt;&lt;/a&gt;16 | 导学：你应该掌握哪些学习方法？&lt;/h1&gt;&lt;p&gt;你好</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>15 | 答辩技巧：回答评委提问有哪些技巧？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/1118351163.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/1118351163.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15-答辩技巧：回答评委提问有哪些技巧？"><a href="#15-答辩技巧：回答评委提问有哪些技巧？" class="headerlink" title="15 | 答辩技巧：回答评委提问有哪些技巧？"></a>15 | 答辩技巧：回答评委提问有哪些技巧？</h1><p>你好，我是华仔。</p><p>面评主要分为三个环节，准备、自述和答辩。前三讲我已经介绍了准备环节写PPT的技巧，以及自述环节讲PPT的技巧，这一讲我接着来介绍答辩环节回答评委提问的技巧。</p><h2 id="答辩很重要，但是别害怕"><a href="#答辩很重要，但是别害怕" class="headerlink" title="答辩很重要，但是别害怕"></a>答辩很重要，但是别害怕</h2><p>在正式开始之前，我必须先强调一点， <strong>答辩环节才是直接决定你能否通过晋升的关键</strong>。因为即使你在写PPT和讲PPT的时候表现不那么好，答辩环节还是可以弥补的；反过来就不行，如果你的PPT写得很漂亮、讲得也很有条理，但是答辩环节表现不过关，那么还是无法通过晋升。</p><p>很多在答辩环节表现不好的人，都会把失败的原因归结于口才不行或者压力太大。</p><p>其实以我多年的经验来看，口才不行很少成为晋升失败的原因，因为 <strong>绝大部分评委都会尽力去挖掘你的亮点</strong>。</p><p>这有点像一个段子说的：“如果你在大学的考试中考了60分，很可能不是你努力的结果，而是老师努力的结果。”晋升评委也是这样，如果你第一次回答的时候没讲清楚，他们会觉得可能是因为你没听懂这个问题，通常都会换个问法，再给你一次机会。</p><p>当然，如果换了两次你都回答不到点上，他们就会被认为你确实没有掌握相关的技能。</p><p>不过，压力太大有时候真的会导致晋升失败。我想你可能也有过这样的经历，评委问到某个问题，你答不上来，感觉整个人就蒙了，甚至等到切换成别的问题的时候，你还没有回过神来。</p><p>提高抗压能力没什么诀窍，就是平时要多锻炼，比如内部模拟面评、给别人培训、向高级别的管理人员汇报以及在技术大会上做演讲等。</p><p>因为决定答辩表现的核心还是平时的积累，正所谓“台上一分钟，台下十年功”，光靠“临时抱佛脚”突击一下，很难侥幸过关。具体怎么在平时的学习和工作中积累呢？我会在后续的 <strong>学习方法</strong> 和 <strong>做事方法</strong> 部分详细讲解。</p><p>但是，因为答辩时间只有40～60分钟，就算你平时有足够的积累，想要在这么短的时间里充分地展现出来，也是需要一些技巧的。</p><h2 id="技巧1：明确问题类型，回答关键内容"><a href="#技巧1：明确问题类型，回答关键内容" class="headerlink" title="技巧1：明确问题类型，回答关键内容"></a>技巧1：明确问题类型，回答关键内容</h2><p>回答评委提问的时候，有两个很常见的错误。</p><p>一是 <strong>急于回答</strong>，评委提问话音未落，你就赶紧开始回答，以为这样可以体现出自己在这方面了解得很清楚。</p><p>但是评委可能不这么看。如果你确实答到点子上还好；但是如果没有，评委会认为你没有抓住重点，对问题相关的内容掌握得不太好。</p><p>二是 <strong>越多越好</strong>，评委随便问个问题，你都要说好几分钟，甚至非要等到评委打断才能收住。</p><p>这么做一方面导致你能回答的问题不多（因为总时间有限），无法充分利用这个环节展现自己的能力；另一方面也会让评委认为你抓不住重点，对工作的理解不够深刻。</p><p>正确的做法是，不要急于回答，先明确问题属于哪种 <strong>类型</strong>，想想评委的 <strong>关注点</strong> 是什么，然后整理这方面的 <strong>关键内容</strong>，最后再组织语言开口回答。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/7437c467771523920877388a92d977d2.jpg"></p><p>常见的问题类型和它们对应的关注点和关键内容，我整理在了这个表格里，接下来我们逐一拆解。</p><h3 id="1-What类问题"><a href="#1-What类问题" class="headerlink" title="1. What类问题"></a>1. What类问题</h3><p>What类问题关注的是 <strong>结果</strong>，回答的关键内容是“ <strong>做了什么事情</strong> + <strong>拿到什么结果</strong>”，其中事情部分最好用3句话能够描述清楚，结果部分尽量用数据来描述。</p><p>What类问题问得比较少，因为大部分内容你已经在自述环节讲过了。评委问这类问题，一般是发现了你遗漏的内容，或者对某些细节感兴趣，希望更全面地了解一些信息。比如你在PPT里写了某个业务的日活数据，评委可能会进一步问月活和新用户留存等数据。</p><p>这类问题，你用几句话就回答清楚就行了，不要展开长篇大论，把时间控制在30秒以内。你也不需要为了避免评委问这类问题，就在PPT里面把所有的数据都列出来，因为那样会让PPT显得没有重点。</p><h3 id="2-How类问题"><a href="#2-How类问题" class="headerlink" title="2. How类问题"></a>2. How类问题</h3><p>How类问题关注的是 <strong>过程</strong>，回答的关键内容是“ <strong>做事情的方法</strong> + <strong>实施的步骤</strong>”，其中方法部分要点出 <strong>关键词</strong>，也就是评委提问的引子，而步骤部分要有 <strong>逻辑</strong>，常见的时间逻辑、空间逻辑和业务逻辑等都可以。</p><p>比如你在晋升PPT里写的是“采用微服务重构系统”，并且给出了拆分前后的架构图，然后介绍说：“我们采用微服务的方法将原来耦合的业务系统拆分成4个微服务子系统……”</p><p>那么评委可能会问：“你们的微服务落地过程，具体是怎么做的？”</p><p>在这个例子中，方法部分的关键词就是 <strong>微服务</strong>，步骤部分的逻辑则可以是 <strong>业务优先级</strong>，按照优先级从低到高的顺序进行拆分，第一步拆分A服务，第二步拆分B服务，第三步拆分C服务，总共拆分成4个服务（原有服务 + A + B + C）。</p><p>然后，你再补充一下在拆分服务的过程中，你遇到了哪些挑战和困难，分别是怎么应对的，这样就回答得差不多了。</p><p>How类问题比较常见，因为自述环节不会展示太多过程的信息。为了全面了解你的能力，对于一些比较复杂的事情，评委一般都会关注具体的落地步骤，以及落地过程中你具体负责了哪些工作，然后再针对这些工作进行考察。</p><p>如果你在PPT里已经将步骤列出来了，评委可能就会直接针对具体步骤进行考察。</p><p>通常情况下，How类问题用1～2分钟来回答比较合适。</p><h3 id="3-Why类问题"><a href="#3-Why类问题" class="headerlink" title="3. Why类问题"></a>3. Why类问题</h3><p>Why类问题关注的是 <strong>原因</strong>，回答的关键内容是“ <strong>技术原理 + 思考过程</strong>”。具体来说，Why类问题可以再继续细分。</p><p><strong>第一类是技术相关的Why类问题</strong>，一般回答相关原理，包括技术理论、技术原则和技术方法论等，比如高可用的CAP理论、网络编程的多路复用、浏览器渲染原理等。</p><p>举个例子，评委如果问：“为什么Netty性能高？”你就需要回答和Reactor网络编程模式和零拷贝等原理相关的内容。</p><p>这类问题从回答技巧上说，比较简单。因为技术原理都是业界公认的，你能不能回答好，关键在于平时有没有积累，毕竟现场编也编不出来。</p><p><strong>第二类是决策相关的Why类问题</strong>，一般回答决策背后的思考，包括分析过程、分析方法、分析框架和决策标准等。</p><p>举个例子，你做了一个创新的旅游业务，支持 <strong>互助旅游</strong>。什么是互助旅游呢？就是你来我的城市，我带你玩；等到我去你的城市的时候，你再带我玩。在这个业务里，你选择了从大学生群体开始试点。</p><p>评委如果问：“为什么你要从大学生群体开始试点呢？”</p><p>你就需要从大学生的特点、业务的目标和最终决策的标准等角度来回答这个问题。比如你可以这么说：</p><p>“首先，目前中国的在校大学生，包括研究生在内，总共有XX万人，这是一个不小的规模，而且他们都有一定的消费能力。</p><p>“另外，大学生群体喜欢尝试新事物，学业压力没有高中那么强，有比较多的个人时间来探索世界，而他们的高中同学往往又分散在不同城市上大学，本身就有比较强的探望和旅游需求。</p><p>“总的来说，不论是从群体数量和消费能力考虑，还是从潜在需求方面考虑，大学生都满足我们的创新项目在初创期进行快速尝试和验证的要求，所以我们选择了大学生作为我们的业务试点用户。”</p><p>以上回答内容仅仅作为示例，可能并不完善。如果你是讲自己真正做的业务的话，只要你平时有这方面的思考和积累，其实是可以回答很多内容的。</p><p>这类问题是比较难回答的，因为思考没有统一的标准，同样一件事情要怎么思考，不同公司和团队的要求可能都不一样，有的要求快速尝试和验证，有的要求仔细分析和论证，没有哪种方法是绝对正确的。</p><p>但有趣的地方在于，即使我们平时没有积累，现场也能够说上几句，甚至说一大段。这很容易给我们一种错觉，以为自己每个问题都能回答一大串，晋升应该没问题，结果却往往是晋升失败。</p><p>为什么呢？很可能是因为评委并不认可我们的思考。那么怎样才能让自己的思考得到评委的认可呢？答案就是，在平时的工作中积累相关的经验，比如：</p><ol><li>P5&#x2F;P6参加需求评审的时候，除了关注需求要做什么，也可以多听或者多问，为什么要这样设计。</li><li>P7&#x2F;P8给高级别人员汇报的时候，学习他们的分析框架、重点关注的地方和思考过程。</li><li>参加项目或者业务总结会议的时候，看看各方如何评价做得好的和做得不好的，如何分析背后的各种原因。</li><li>采用后续课程即将介绍的 “3C做事法”“4D总结法”“5W分析法”等做事方法来提升自己思考的系统性和深度。</li></ol><p>你需要注意的是，如果你要突破团队已有的成熟的方法，是需要有特别的思考和充分的准备的，不然就会面临被几个评委轮番轰炸的风险。</p><p><strong>第三类是综合类问题，跟技术和决策都有关系</strong>，你的回答既要包括原理，也要包括思考。</p><p>比如评委问：“为什么你们选择Memcache，而不是Redis？”</p><p>你既需要回答Memcache和Redis在技术上的核心差异，也需要回答在具体业务选择Memcache的原因。</p><p>那么你可以这样说：“我们的业务需要做文本和图片内容缓存，数据结构简单，但可能会出现几百K大小的缓存对象，在缓存内容比较大的时候，Redis的单进程模式会存在多连接IO操作互相影响的问题，性能不如Memcache的多线程模式。”</p><p>Why类问题是答辩环节的核心，可以占到问题总数的50% ～80%，而且级别越高，占比越高。原因在于，评委需要通过Why类的问题来考察到底是你自己达到了某个等级的要求，还是说你只不过是完成了别人安排的任务。</p><p>这也是评委需要把你的绩效和能力分开来看的原因。你拿到好的绩效，也不能说明能力一定有提升，可能只是因为你的主管很牛逼，而你主要是服从安排，按照他的要求完成任务；也可能只是因为你的运气比较好，正好碰到上升的业务。</p><p>通常情况下，Why类问题也是用1～2分钟来回答比较合适。</p><p>就算你能回答的内容很多，也不要一上来就滔滔不绝，而是每次都应该回答几个要点。如果评委有兴趣，就会继续问下去；如果评委认为你已经达到要求了，就不会再问了。</p><p>同样以Netty为例，如果评委问：“Netty高性能的原理是什么？”</p><p>你可以回答Reactor网络编程模式和零拷贝等原理。</p><p>评委如果还有兴趣，可能就会继续问：“Reactor网络编程模式性能为什么高？”</p><p>这时候你再回答多路复用和多线程等内容就行了。</p><h2 id="技巧2：答不上来就想办法回到熟悉的领域"><a href="#技巧2：答不上来就想办法回到熟悉的领域" class="headerlink" title="技巧2：答不上来就想办法回到熟悉的领域"></a>技巧2：答不上来就想办法回到熟悉的领域</h2><p>不管你的能力有多强，答辩的时候都有可能遇到自己不会的问题。</p><p>但是有的人很害怕遇到这种情况，担心一旦某个问题答不上来，晋升就会失败，于是根据自己的一知半解强行回答。</p><p>而且评委的很多问题，我们平时可能在某些场合听到过或者看到过，也不能算完全不知道，所以有些“口才好”的人，甚至还能装作很懂的样子说上好几分钟。</p><p>这样做表面上是回答了问题，实际上是给自己挖坑。因为在评委看来，首先你表现了能力上的缺陷，其次你还暴露了态度上的问题。他们只要愿意，稍微追问几个问题，就可以把你问得哑口无言。</p><p>遇到不会的问题，正确的做法是， <strong>不要编、不要蒙，老老实实承认不会，然后引导评委关注自己其他的技能，回到自己熟悉的领域</strong>。因为晋升的时候， <strong>你根本不用着证明自己全知全能，只要向评委展示出你的核心能力就够了。</strong></p><p>比如你可以说：“抱歉，这部分我没有深入研究，但是我在XX技术上花费了比较多的时间，进行了深入的研究。”</p><p>当然，引导评委关注的技能必须是你真正有信心的，不要随口一说又给自己挖坑。如果实在不知道怎么引导，那就干脆不要引导，承认对这个问题不懂就行了。</p><h2 id="技巧3：发生争执就及时终止话题"><a href="#技巧3：发生争执就及时终止话题" class="headerlink" title="技巧3：发生争执就及时终止话题"></a>技巧3：发生争执就及时终止话题</h2><p>答辩环节还可能出现的一种特殊情况，就是你和评委关于某个问题的答案产生了争执，谁也说服不了谁。</p><p>这个时候，千万不要继续吵下去。因为就算后来证明你是对的，在答辩环节跟评委争论也没有任何好处。</p><p>首先，大部分评委都会为了证明自己，不断地抓住这个问题跟你一直辩论下去，这样一来你就没有时间回答其他评委的问题，展示你的其他能力了。</p><p>其次，一般来说，评委的工作经验比你丰富，对技术的理解比你深刻，所以你出错的概率要高于评委出错的概率。</p><p>最后，就算最后证明你是对的，评委是错的，也不可能重新来一次答辩或者修改晋升结果，因为这样相当于直接打评委的脸，影响很不好。</p><p>所以如果遇到产生争执，你可以这样说：“这部分内容我可能还没有研究透彻，后面我自己再深入研究一下。”</p><p>和技巧2不同的是，这里尽量不要引导说“我对XX技术有深入的研究”，避免跟你争执的评委为了面子，抓住下一个问题继续穷追猛打。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一讲我跟你分享了面评答辩环节的几个有用的技巧。核心的思想就是，你不需要证明自己什么都会，只要在有限的时间里，充分地展现自己的核心能力就行了。</p><p>现在，我们回顾一下这一讲的重点：</p><ol><li>不要急于回答问题，也不要长篇大论，先想清楚问题类型，然后回答到点子上，这才是最有效的。</li><li>What类问题关注结果，需要回答“做了什么事情 + 拿到什么结果”，时间在30秒以内；How类问题关注过程，需要回答“做事情的方法 + 实施的步骤”，时间1～2分钟。Why类问题关注原因，需要回答“技术原理 + 思考过程”，时间1～2分钟。</li><li>答不上来的问题不要编，直接承认不会，然后引导评委回到你熟悉的领域来提问。</li><li>跟评委发生争执的时候尽快“认怂”，及时终止话题，千万不要继续吵下去。</li></ol><p>面评技巧部分到这里就讲完了。再次强调一点，虽然这些技巧可以帮助你更好地表现自己，但实际的专业能力和抗压能力还是需要平时在学习和工作中慢慢积累的。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/2e87yy8733c03fc4be37658aa6613285.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，最后留一道课后思考题给你吧。既然答辩环节这么重要，是不是可以把以前参加这个级别晋升的人遇到的答辩问题，整理成类似“Java面试宝典”这样的内容？假如有这样的“晋升答辩宝典”，你觉得它能让你更加容易地通过答辩吗？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/ca643abdfcd8fff0491c68da7eef4fd2.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;15-答辩技巧：回答评委提问有哪些技巧？&quot;&gt;&lt;a href=&quot;#15-答辩技巧：回答评委提问有哪些技巧？&quot; class=&quot;headerlink&quot; title=&quot;15 | 答辩技巧：回答评委提问有哪些技巧？&quot;&gt;&lt;/a&gt;15 | 答辩技巧：回答评委提问有哪些技巧？&lt;/</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>20 | Play &amp; Teach：怎么摆脱“从入门到忘记”的学习困境？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/1178709086.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/1178709086.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20-Play-Teach：怎么摆脱“从入门到忘记”的学习困境？"><a href="#20-Play-Teach：怎么摆脱“从入门到忘记”的学习困境？" class="headerlink" title="20 | Play &amp; Teach：怎么摆脱“从入门到忘记”的学习困境？"></a>20 | Play &amp; Teach：怎么摆脱“从入门到忘记”的学习困境？</h1><p>你好，我是华仔。</p><p>上一讲我们学到了，针对不同技术维度的学习目标，可以分别采用不同的学习方法。</p><p>不过就算你用对了方法，在学习过程中往往还是会遇到一些难以解决的困难，导致学习变成了“从入门到忘记”。</p><p>那么，怎么摆脱这种的学习困境，保证学习效果呢？这一讲我会为你介绍两种方法。</p><h2 id="Play学习法"><a href="#Play学习法" class="headerlink" title="Play学习法"></a>Play学习法</h2><p>从科学学习的角度来看， <strong>学以致用</strong> 的效果是最好的，光学不练学得不深，时间一长可能就忘记了。</p><p>但我们在实践中会遇到一个常见的困难，那就是团队当前的工作任务当中并 <strong>没有相关的实践机会</strong>。这种情况下，你学习某个技术就会陷入两难的困境：如果学的话，得不到实践，学得不深；如果不学的话，真的要用的时候又来不及了。</p><p>这时候怎么办呢？完全放弃肯定是不可取的，因为机会都是留给有准备的人，如果来了一个新的任务正好要用到某个技术，到时候肯定是团队内谁有准备就安排谁，不会等到某个人学习完了再安排任务给他。</p><p>所以，我们需要找到一种方法，在暂时没有实践机会的情况下也能学好技术，这就是 <strong>Play学习法</strong>。</p><p>所谓Play学习法，就是 <strong>通过模拟实践中的场景来进行学习和训练。</strong></p><p>华盛顿国家儿童博物馆有一句著名的馆训： <strong>What I hear, I forget. What I see, I remember. What I do, I understand.</strong></p><p>Play学习法就是主动创造Do的机会来提升自己对新技能的理解和记忆。</p><p>如果你喜欢看动物世界之类的节目，应该有这样的印象：狮子这类肉食动物，在成年以前特别喜欢玩耍打闹，这并不是贪玩，而是在练习捕猎的技巧，为成年后的真实捕猎做好部分准备。</p><p>Play学习法就和肉食动物的这种玩耍学习非常像。它的做法比较简单，主要分为三个步骤：</p><ol><li>按照链式学习法的方式学习某项技术。</li><li>列举常见的场景，搭建模拟场景。</li><li>在模拟场景进行测试、体验和练习。</li></ol><p>常见的模拟场景以及相应的作用如下表所示：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/dba92075a01d457d81e28d15fa22c385.jpg"></p><p>Play学习法不但能够让你在没有实践机会的时候，也能够比较好地掌握一项技术，而且它跟直接在工作中实践的学习方式相比，还有一个独特的优势： <strong>你可以模拟各种在实践工作中很难出现、但只要出现就可能导致故障的场景。</strong></p><p>比如为了验证ZooKeeper的集群选举功能，模拟的时候可以采取拔网线、直接杀进程、删除存储文件等各种非常规的手段。</p><p>这些手段在线上运行肯定不敢手动去搞，甚至就算在开发阶段的测试环境中也不敢随便搞，因为一旦搞挂了恢复不了，就有可能导致项目延期，个人会需要承担责任。</p><p>而如果采用Play学习法的话，我们就可以通过模拟场景来积累相关的经验和技能，等到线上真正出现类似问题的时候就能够快速地处理。</p><p>Play学习法能够帮助我们更好的学习技术，但这并不意味着它能够完全取代工作中的实践，工作中的实践仍然是非常重要的提升自己的方式。</p><p>这就像小狮子光是通过玩耍打闹，还不能完全熟练地掌握捕猎技巧一样，年轻的狮子刚开始的捕猎的时候，成功率都是很低的。要成为真正的捕猎能手，还需要很多次实战的磨练。</p><p>如果说精通一项技术是100分的话，通过链式学习法你可以达到60分，通过Play学习法你可以达到70甚至80分，但如果想达到80分以上，实践是必不可少的。</p><h3 id="Play学习法小结"><a href="#Play学习法小结" class="headerlink" title="Play学习法小结"></a>Play学习法小结</h3><p>现在，我们回顾一下Play学习法的重点：</p><ol><li>Play学习法是通过模拟实践中的场景进行训练。</li><li>Play学习法的步骤包括：按照链式学习法的方式学习某项技术；列举常见的场景，搭建模拟场景；在模拟场景进行测试、体验和练习。</li><li>Play学习法的独特优势在于，可以模拟各种在实践工作中很难出现、但只要出现就可能导致故障的场景。</li></ol><h2 id="Teach学习法"><a href="#Teach学习法" class="headerlink" title="Teach学习法"></a>Teach学习法</h2><p>除了缺少实践机会之外，我们在学习的时候还会遇到另一个常见的困难，那就是学得不深，理解不够透彻。</p><p>很多人都有类似的经历：自己学习某项技术的时候感觉学的差不多了，甚至都已经在工作中具体实践了，但是一旦跟别人讨论，或者在晋升的时候面对评委的提问，又会感觉很多东西都没有完全掌握。</p><p>这种现象背后的原因是，每个人的知识和技能都是有一定局限性的，不同的人理解会不一样，关注点会不一样，所以在讨论或者PK的时候自然会遇到各种各样的问题。就算你有实践机会，也不太可能一两次就把一项技术相关的知识全部用到，总会有认知的盲区存在。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/8919f65f0b0480yy8a978b7d3c6270c8.jpg"></p><p>我想你肯定不希望自己在晋升答辩的时候连自己熟悉的内容都回答不好。那要怎么办呢？Teach学习法就可以帮助你加深理解。</p><p>所谓Teach学习法，就是 <strong>通过教别人来提升自己</strong>。</p><ul><li>印度有句谚语： <strong>To learn，read. To know，write. To master，teach.</strong></li><li>中国也有一句成语： <strong>教学相长</strong>。</li></ul><p>结合这些智慧，我们可以总结出学习的四个主要方法：Read、Write、Do、Teach。前面介绍的Play学习法是关于Do的，而Teach学习法对应的则是Write和Teach。</p><p>我之所以把Write也算作Teach学习法的一部分，是因为教别人有两种方式，一种当面给别人进行培训，另一种是写成资料给别人阅读，比如书籍和在线课程。</p><p>所以，Teach学习法包括两种形式，写作和培训。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>很多人一听到“写作”两个字，第一反应就是要有文学天分，自己没有文学天分，所以文章就写不好，这其实是一个很大的误区。</p><p>技术文章的写作不是文学创作，不需要优美的文笔和有吸引力的情节，看技术文章的读者关注的也不是文字是否优美，情节是否吸引人，而是讲得清不清楚，讲得对不对。</p><p>如果你想写一篇技术文章，但是感觉不知道怎么写，那主要的原因不是不会写文章，而是还没有完整地掌握这个技术，不知道哪些是重点，不了解整个体系，对体系里面的各个部分的协作关系不清楚。</p><p>那么，是不是一定要等到把某个技术彻底搞明白后才能动笔呢？其实不需要，因为写作本身就是帮助我们学习和梳理的一个过程。比如我在写《从零开始学架构》这本书的时候，并不是把书中的每个内容都研究得一清二楚了才开始动笔的，而是先有了一个整体的构思，然后在写作的过程中边写边完善，有的内容是突然灵感爆发加上去的。</p><p>写作对学习的帮助主要体现在以下两个方面：</p><p><strong>第一，写作有助于系统地整理技术体系。</strong></p><p>当你开始准备写作的时候，肯定需要思考整体的结构应该如何设计，而这个思考的过程其实就是整理技术体系的过程。比如知名博主程序猿DD的 <a href="http://blog.didispace.com/spring-boot-learning-2x/">Spring Boot2.X教程</a> 的结构设计就清晰地反映出了他整理出来的技术体系。</p><p>只有当你脑海中形成了完整的技术体系，才能知道应该先讲什么，后讲什么；哪些是重点，哪些可以简单带过；是一篇文章讲完，还是讲一个系列。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/6d517e5b88a251d1bd01dbe014ffe38a.png"></p><p><strong>第二，写作有助于了解细节。</strong></p><p>写作看起来只是把自己知道的东西用文字表达出来，但其实你在写作的时候大脑无时不刻都在思考：</p><p>这是什么意思？</p><p>这样说对么？</p><p>这里要给别人讲么？</p><p>为什么要这么说？</p><p>怎么样才能表达清楚？</p><p>……</p><p>所以，写作可以让你主动思考各种细节，一旦发现有疑问的地方，就会停下来去查证和研究。</p><p>我在写CAP原理相关的内容之前，也觉得自己在这方面已经理解得很清楚了，但是真正写的时候，看到“All nodes see the same data at the same time”这句话，却自然而然地产生了一个疑惑：</p><p><strong>通过网络复制总会有时间差，就算是1ms差异，那也不满足“at the same time”的说法，那么这里为什么这么说呢？</strong></p><p>经过研究和查证，我才了解到这里的说法确实不严谨。第一个原因是，在事务执行过程中，节点间的数据是不一致的，第二个原因是，CAP定理是忽略了网络延迟的（参考 <a href="https://www.infoq.cn/article/cap-twelve-years-later-how-the-rules-have-changed/">《CAP 理论十二年回顾：”规则”变了》</a>）。</p><p>等到我在写这一讲，介绍这个例子的时候，又想到了第三个可能的原因：CAP同时也忽略了复制的代价，比如将1K数据从A节点传输到B节点，B节点将1K数据写入存储也是需要时间的。</p><p>当然，绝大部分相关技术在网络上已经有很多文章了，那我们直接搜一篇看不是更香吗？为何非得要自己费时费力来写类似的内容呢？</p><p>原因在于，当我们看别人写的内容时，我们采取的方式其实是“read”，能吸收的可能只有30～50%，而自己写出来的话，即使内容是类似的，也能够让自己对技术的掌握程度达到60～70%。</p><p>可是，写作是需要投入时间的。如果每一项技术我们都用写文章的方式来学的话，时间确实会不够用。那么，哪些技术应该自己写文章，哪些技术可以通过看书或者上网搜文章来学习呢？</p><p>核心的指导原则就是， <strong>看技术和自己工作的相关度</strong>，对于强相关的核心技术，自己写文章来学；而对于弱相关的非核心技术，可以通过阅读资料来学习。</p><p>比如，对Java服务端开发来说，JVM垃圾回收就是强相关的技术，而Linux系统编程就是弱相关的技术；而如果是在Linux平台用C&#x2F;C++开发的话，Linux系统编程就是强相关的技术，Java的技术就是弱相关的技术。</p><h3 id="培训"><a href="#培训" class="headerlink" title="培训"></a>培训</h3><p>写作的时候，我们没有时间要求，没有现场压力，一句没写好可以重写，今天写不出来可以等到明天再写。</p><p>但是培训就不同，培训的时间是有限的，有现场压力，听众可能会提出各种意想不到的问题，所以培训对你的能力要求更高，但是锻炼效果也更好。</p><p>首先，要完成一场培训，你需要写培训材料。培训材料的准备过程就是一个写作的过程，写PPT这类培训材料，跟写Word文档比起来，也更能够锻炼你的总结、归纳和提炼的能力。写作带给你的帮助，培训也可以提供。</p><p>其次，培训需要你在有限的时间内讲清楚一个主题，你必须对这个主题掌握到一定的程度才可以做到，这就会强迫你去思考跟主题有关的各种信息和可能的问题；</p><p>另外，培训过程中，你会和听众进行各种交流，这些交流本身既能够促进你对培训内容的理解，也能够锻炼你的临场反应能力。</p><p>除了以上这些作用，培训还有一个好处是其他所有学习方法都不具备的，那就是 <strong>为晋升答辩积累现场经验</strong>。</p><p>很多人晋升答辩失败，临场表现差也是一个重要的原因，比如说话紧张，讲PPT的时候忘词，问答的时候没有听明白评委问题就急于回答等等。</p><p>有的人归结于自己天生口才不行，心理承压能力太差，其实没有那么严重，毕竟晋升答辩不是TED演讲，评委也不是来看脱口秀的。答辩的临场表现不过关，主要还是因为平时缺少训练。</p><p>我之前带团队的时候，对于手底下准备申请晋升的人，我基本上都会强制要求他们做几次培训。通过这种方式训练3～4次以后，他们就很少在答辩的时候出现因为表达和临场发挥的问题而失败了。就算还是有一点点紧张，但因为之前通过培训锻炼了心理素质，所以不会影响到答辩效果。</p><h3 id="Teach学习法小结"><a href="#Teach学习法小结" class="headerlink" title="Teach学习法小结"></a>Teach学习法小结</h3><p>现在，我们回顾一下Teach学习法的重点：</p><ol><li>Teach学习法是通过教别人来提升自己。</li><li>Teach学习法包括两种形式，写作和培训。</li><li>写作有助于系统地整理技术体系和了解细节。</li><li>培训具备写作的优点之外，还能够强迫你去思考跟主题有关的各种信息和可能的问题，促进你对培训内容的理解，锻炼你的临场反应能力，为晋升答辩积累现场经验。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/c895a84fd184575yya13b05fed31ac37.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。你是否有过“从入门到放弃”的学习经历？你觉得主要原因是什么？是否可以应用这一讲的哪个方法来改进？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/0fd7588e4829d1f39f833a7yy918fdee.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;20-Play-Teach：怎么摆脱“从入门到忘记”的学习困境？&quot;&gt;&lt;a href=&quot;#20-Play-Teach：怎么摆脱“从入门到忘记”的学习困境？&quot; class=&quot;headerlink&quot; title=&quot;20 | Play &amp;amp; Teach：怎么摆脱“从</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>19 | 链式 &amp; 比较 &amp; 环式学习法：怎么多维度提升技术能力？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/114984876.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/114984876.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-链式-比较-环式学习法：怎么多维度提升技术能力？"><a href="#19-链式-比较-环式学习法：怎么多维度提升技术能力？" class="headerlink" title="19 | 链式 &amp; 比较 &amp; 环式学习法：怎么多维度提升技术能力？"></a>19 | 链式 &amp; 比较 &amp; 环式学习法：怎么多维度提升技术能力？</h1><p>你好，我是华仔。</p><p>上一讲我介绍了三段分解法，教你把“10年成为大牛”这个宏大的目标，分解成1～2个月的可落地计划，然后再按周来执行实际的行动。</p><p>但是，不同级别的 <strong>核心要求</strong> 是不一样的，晋升时评委的 <strong>考察重点</strong> 也不一样，所以在成长过程中，我们主要提升的 <strong>技术维度</strong> 也在发生变化。</p><p>一般来说，P5&#x2F;P6&#x2F;P7主要提升 <strong>技术深度</strong>，P7&#x2F;P8主要提升 <strong>技术宽度</strong>，P8&#x2F;P9主要提升 <strong>技术广度</strong>。（我在 <a href="https://time.geekbang.org/column/article/323388">第11讲</a> 和 <a href="https://time.geekbang.org/column/article/328359">第16讲</a> 分别以前端和Java后端为例，解释了这三个维度的区别。）</p><p>这三个不同的技术维度，分别适合用不同的方法来提升，这一讲我就会为你一一介绍，让你的学习更有针对性，在回答晋升评委提问的时候也能做到游刃有余。</p><h2 id="链式学习法：提升技术深度"><a href="#链式学习法：提升技术深度" class="headerlink" title="链式学习法：提升技术深度"></a>链式学习法：提升技术深度</h2><p>提升技术深度，最好使用 <strong>链式学习法</strong>。</p><p>如果你参加过晋升答辩，一定经历过评委的“追命连环问”，比如：</p><ol><li>你在讲解PPT的时候提到，某个项目使用了Netty技术，评委首先会问你Netty的一些技术点；</li><li>当你回答说Netty的本质是Reactor网络模型时，评委又会问你Reactor网络模型的原理；</li><li>当你回答说Reactor的基础是Java NIO的时候，评委又会问你Java的NIO&#x2F;BIO的技术细节；</li><li>当你回答说Java的NIO在Linux平台上是基于epoll来实现时，评委又问你Linux的epoll&#x2F;select等的原理。</li></ol><p>……</p><p>面对这种“打破砂锅问到底”的方式，如果平时没有充足的准备，你很可能会卡住。</p><p>所谓“链式学习法”，顾名思义，就是学习的过程好像从水里拉起一根链条，拉出一环后面又接着一环，最后将整个链条全部拉出来。</p><p>当知识联结成锁链， <strong>环环相扣</strong>，你对技术的理解就很透彻，评委问到底，你就能答到底。</p><p>但是知识的锁链不是胡乱连接的，环环相扣的方式很有讲究。常见的方式有两种：</p><p>第一种是 <strong>自顶向下、层层关联</strong>，打通一项技术的领域分层。</p><p>第二种是 <strong>由表及里、层层深入</strong>，打通一项技术的细节分层。</p><p>以Netty网络编程为例，相关领域一共可以分为6层，要么上层依赖下层，比如Netty依赖Java网络编程，Java网络编程在Linux上又依赖Linux提供的网络编程接口；要么下层是上层的应用和实现，比如TCP&#x2F;IP是原理，而Linux网络调优和工具是TCP&#x2F;IP的具体应用。它的领域分层图如下所示：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/548db8fba0254d6d7886b906b8677c57.jpg"></p><p>注：</p><ol><li>以上图示仅为示例，你需要根据自己的实际工作情况来分析。如果你是在Windows平台上做开发，那么上图“操作系统”这一层就要改为“Windows网络编程”，“工具&amp;配置”这一层就要改为“Wireshark”之类的。</li><li>具体分层关系并没有业界统一的标准，比如“工具&amp;配置”这一层，如果你认为应该放在“计算机网络”那一层的上面，其实也是可以的。</li></ol><p>同样以Netty网络编程为例，技术细节可以分为4层，它的细节分层图如下所示：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/23bc815ee7bee6ed03493bbdec0a9842.jpg"></p><h3 id="链式学习法的步骤"><a href="#链式学习法的步骤" class="headerlink" title="链式学习法的步骤"></a>链式学习法的步骤</h3><p>链式学习法的第一步，就是要 <strong>明确一项技术的深度可以分为哪些层</strong>。</p><p>具体来说，就是画出“领域分层图”和“细节分层图”。一开始你可能会觉得画不出来，这恰恰说明你对深度的理解还不够，而尝试画图本身就是一个梳理结构、强化认知的过程。</p><p>画出了两张图之后，第二步就是要 <strong>明确你自己要学到哪一层</strong>。</p><p>学得太浅，达不到提升深度的目的；学得太深，又会耗费太多的时间和精力。以Netty网络编程为例，从我自己实践和指导别人的经验来看，领域分层图的6层不用都学，大部分人学个3～5层就够了；不过细节分层图的4层，还是建议你每一层都学。</p><p>确定学到哪一层之后，第三步就是要 <strong>明确每一层应该怎么学</strong>。</p><p>在领域分层图中，越往上越偏应用，实际工作中用得越多，越往下越偏原理（包括相关的工具和配置），实际工作中用得越少。所以总的原则是，在上层投入更多时间，更关注细节和熟练使用，在下层投入相对少的时间，更加关注原理和简单应用。</p><p>比如对于Netty网络的领域分层图，如果你不是Netty项目的开发人员，而是只想使用Netty来搭建自己的系统，那么“Linux网络编程”这一层，你只要掌握select&#x2F;epoll等技术原理和优缺点就行了，epoll提供的API你有时间可以大概看看，没时间不看也可以；但是对于Netty本身提供的API，则是越熟练越好。</p><p>在细节分层图中，你需要详细地学习每一层。要注意的是，对于“实现源码”这一层，你不需要去掌握每一行源码，只要掌握关键源码就行了，也就是和设计原理以及设计方案相关的源码。</p><h3 id="链式学习法的优点"><a href="#链式学习法的优点" class="headerlink" title="链式学习法的优点"></a>链式学习法的优点</h3><p>链式学习法主要有两个优点：</p><p><strong>1. 促使我们主动提升</strong></p><p>大部分人在实际工作中，很多技术都只接触到了领域分层图和细节分层图中的前2层，没有进一步地去了解。</p><p>而如果采用链式学习法，你就会意识到，使用一项技术完成了工作，并不意味着你就完全掌握了这项技术。你还需要把刚刚自己用到的技术作为切入点，画出完整的领域分层图和细节分层图，然后逐一攻破，这样才能提升深度，达到精通水平。</p><p><strong>2. 将知识和技能系统化</strong></p><p>明确知识和技能点之间的关联关系，有助于更好的理解和应用这些知识和技能。</p><p>例如，如果我们要在Linux平台上基于Netty开发并发10万连接的高性能服务器，既要深入掌握Netty的技术细节，又要深度掌握领域深度相关的技术，包括：</p><ul><li>Netty技术细节：需要设置Netty的相关参数（ChannelOption.SO_BACKLOG，ChannelOption.TCP_NODELAY，ChannelOption.SO_REUSEADDR等）。</li><li>Java网络编程：调试的时候需要知道Java的网络编程API等等。</li><li>Linux网络工具：需要使用Linux网络工具定位问题。</li><li>Linux操作系统配置：需要修改Linux的最大文件句柄数、需要优化Linux的TCP&#x2F;IP参数（net.ipv4.tcp_tw_reuse，net.ipv4.tcp_keepalive_time等）。</li></ul><p>只有使用链式学习法，你才能系统地了解到这些关联的知识和技能，以及如何将它们串起来。</p><h3 id="链式学习法小结"><a href="#链式学习法小结" class="headerlink" title="链式学习法小结"></a>链式学习法小结</h3><p>现在，我们回顾一下链式学习法的重点：</p><ol><li>链式学习法是让知识形成锁链，环环相扣，主要用来提升技术深度。</li><li>链式学习法的步骤包括：明确一项技术的深度可以分为哪些层，明确要学到哪一层，明确每一层应该怎么学。</li><li>链式学习法的优点有：促使我们主动提升，将知识和技能系统化。</li></ol><h2 id="比较学习法：提升技术宽度"><a href="#比较学习法：提升技术宽度" class="headerlink" title="比较学习法：提升技术宽度"></a>比较学习法：提升技术宽度</h2><p>提升技术宽度，最好使用 <strong>比较学习法</strong>。</p><p>如果你有过晋升P7或者更高级别的经历，肯定被问到过大量跟“Why”有关的问题，比如：</p><ol><li>为什么选择Redis，为什么不用Memcache？</li><li>为什么选择MySQL而不是Redis？</li><li>选择Flink的理由是什么？（除了Flink本身的技术特点外，还需要你回答为什么选择Flink而不是Spark或者Storm。）</li></ol><p>……</p><p>这些问题大部分都是考察你思考、判断和决策的逻辑和过程。如果你只有技术深度而没有技术宽度，这时就会陷入窘境：单个技术细节你都很熟悉，但是却无法解释为什么用这个，而不用那个。</p><p>所谓比较学习法，就是 <strong>横向比较</strong> 同一个领域中类似的技术，梳理它们异同，分析它们各自的优缺点和适用场景。</p><p>这样你就能加深对整个领域的理解，评委问的每个为什么，你都能回答得有理有据。</p><h3 id="比较学习法的步骤"><a href="#比较学习法的步骤" class="headerlink" title="比较学习法的步骤"></a>比较学习法的步骤</h3><p>比较学习法的具体操作步骤如下：</p><ol><li>先用链式学习法掌握某个领域的一项技术，将这个领域的关键技术点整理成表格。</li><li>基于整理好的技术点，学习这个领域的另一项技术，将它们在技术点上的差异整理成思维导图。</li><li>找出差异较大的技术点，将背后的原理和对应用场景的影响整理成表格。</li></ol><p>接下来，我以缓存领域的Memcache和Redis为例，说明一下比较学习法的用法。</p><ol><li>先用链式学习法掌握Memcache技术，整理出缓存领域的6个关键技术点。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/eb3df4f69971911d36ddb0d567acbdc2.jpg"></p><ol><li>基于这6点快速掌握Redis技术，整理出Memcache和Redis在这些点上的差异。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9e0d6028ce907c18899f07499f697cb8.jpg"></p><ol><li><p>找出差异较大的技术点，包括并发方案、数据结构、高可用和持久化，整理出它们背后的原理和对应用场景的影响。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/db62d4f4f8f194cdc5fe895f2da69ab6.jpg"></p></li></ol><p>注：表格内容仅为示例，实际内容不止这么多，如果你有兴趣，可以上网搜索或者自行补充完整。</p><h3 id="比较学习法的优点"><a href="#比较学习法的优点" class="headerlink" title="比较学习法的优点"></a>比较学习法的优点</h3><p>比较学习法主要有三个优点：</p><p><strong>1. 学得快</strong></p><p>同一个领域的技术在功能上大都是类似的，区别往往在于实现方案和细节。所以当你掌握了一项技术之后，再去同一个领域的另一项技术，就不需要从0开始了，因为基础的部分你已经学会了，只要重点关注它们的差异点就能够快速掌握。</p><p><strong>2. 学得全</strong></p><p>整理关键技术点和制作思维导图的过程，会促使你把一个领域的技术体系化，更全面、更系统地掌握这个领域。</p><p><strong>3. 学得深</strong></p><p>从差异点到背后的原理再到应用场景的思考过程，会让你对技术的取舍之道理解得更深，在每一次技术选择时都能给出让人信服的理由。</p><h3 id="比较学习法小结"><a href="#比较学习法小结" class="headerlink" title="比较学习法小结"></a>比较学习法小结</h3><p>现在，我们回顾一下比较学习法的重点：</p><ol><li>比较学习法是横向对比，让选择有理有据，主要用来提升技术宽度。</li><li>比较学习法的步骤包括：整理领域关键技术点，整理不同技术的差异点，整理差异点背后的原理和对应用场景的影响。</li><li>比较学习法的优点有：学得快，学得全，学得深。</li></ol><h2 id="环式学习法：提升技术广度"><a href="#环式学习法：提升技术广度" class="headerlink" title="环式学习法：提升技术广度"></a>环式学习法：提升技术广度</h2><p>提升技术广度，最好使用环式学习法。</p><p>很多人一听要提升广度，就以为学得越多越好，想到什么牛就学什么，看到什么热就追什么。学了一段时间，感觉学了很多，但好像啥也不会，网撒得很广，却没捞到几条鱼。</p><p>所谓环式学习法，就是构建一个完整的闭环过程，将多个领域的“鱼”一网打尽。</p><p>技术上常见的闭环是 <strong>功能环</strong>，代表某个功能的处理过程。以一个最简单的“用户登录”为例，如果它的实现方式是前端在手机App上用做登录页面，后端用了微服务架构来存储，那么就可以构建这样一个功能环：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/c760fcec2b2f8143c173d5460849e053.jpg"></p><p>注意：</p><ol><li>上图仅为示意，你可以根据实际情况自己完善，比如拆分为更多环，或者每个环增加更多的技术点。</li><li>上图我是用PPT画的，你也可以根据自己的喜好采用其他画图工具，比如UML类工具。</li></ol><p>这里要说明一点，环式学习法更加适合 <strong>业务系统相关</strong> 的技术人员，而不太适合 <strong>中间件</strong>（数据库、缓存、消息队列和服务中心等）相关的的技术人员，因为中间件的技术更加专注于深度和宽度，和具体的业务关系不大，对技术广度的要求并不高。</p><p>当然，如果你已经达到了P8+&#x2F;P9这个级别，无论什么领域，都可以采用环式学习法来学习跨领域的技术。</p><p>除了功能环以外，还有很多构建闭环的思路，比如业务上常见的“业务环”，它代表某个业务的处理步骤，以及管理上常见的“流程环”，它代表某件事情的处理步骤。</p><p>所以，环式学习法不但可以用来提升技术广度，也可以用来提升业务能力和管理水平。</p><h3 id="环式学习法的步骤"><a href="#环式学习法的步骤" class="headerlink" title="环式学习法的步骤"></a>环式学习法的步骤</h3><p>环式学习法的第一步，就是 <strong>把闭环画出来</strong>。</p><p>具体的画法是将完整的闭环分为几个关键的环节，然后标出每个环节的关键内容。</p><p>就拿“用户登录”这个功能环来说，它可以分为前端、客户端、网络层、机房入口、Nginx、用户中心、安全中心和数据中心，总共8个环节；每个环节又会涉及不同的技术，比如客户端涉及JsBridge和OkHttp，用户中心涉及微服务、MySQL和Redis等，总共涉及的技术有18项。</p><p>通过这么一个简单的功能环，你就可以看出技术广度的边界和范围；而且这些技术都是业务上实际用到的，你完全不用担心自己是没有目的地乱学。</p><p>环式学习法第二步，就是 <strong>由近及远，逐步攻克闭环上的各个节点</strong>。</p><p>就算是同一个闭环，不同领域的人学习顺序也是不同的。还是以用户登录这个功能环为例，前端的人先需要学客户端的JsBridge和OkHttp等知识，然后再去学服务端相关的知识；而服务端用户中心的人，需要先学Nginx和安全中心相关的知识，之后再逐步扩展到客户端和前端。</p><p>通常来说，职业等级越高，技术广度的要求也越高，所以功能环上要求掌握的相关技术也越多。</p><p>对于单个技术，你还是需要用链式学习法来学习，但是因为数量太多，全部严格按照链式学习法的要求来学是不太现实的。我的建议是，可以先不去研究源码，只要学习接口设计、设计原理、设计方案这3层就行了；在合适的时候或者有时间的时候，可以看看核心源码加深理解。</p><h3 id="提升业务能力也很重要"><a href="#提升业务能力也很重要" class="headerlink" title="提升业务能力也很重要"></a>提升业务能力也很重要</h3><p>很多技术人员有一个误区，认为业务设计是产品经理的事情，产品经理设计好了，技术人员再把自己负责那部分做好就行了。</p><p>这种想法会让你在工作中非常被动，而且可能吃大亏。常见的吃亏场景包括：</p><ol><li>讨论需求的时候，因为不懂业务，就算产品的业务需求不合理、实现代价很高，你也发现不了。结果到了设计甚至是编码阶段，你才发现自己做得累死累活，效果还不好。</li><li>处理线上故障的时候，因为不熟悉业务，只能被动接受别人的分析和推断，很容易背锅。</li><li>因为不熟悉业务，无法承担整体需求分析和方案设计这种任务，导致个人能力得不到锻炼，失去很多晋升机会。</li></ol><p>无论是前端、客户端还是服务端的技术人员，最好都花点时间，通过业务环来了解业务的整个流程。</p><p>以下是用户登录的业务环，供你参考。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/f577fe775c26ebacdfd4b2f01d14363d.jpg"></p><p>注意：上图仅为示例，省略了很多分支和细节，实际的业务流程图比这个要复杂，你可以直接参考产品经理的需求文档。</p><h3 id="环式学习法的优点"><a href="#环式学习法的优点" class="headerlink" title="环式学习法的优点"></a>环式学习法的优点</h3><p>环式学习法有两个优点：</p><p><strong>1. 培养全局视野</strong></p><p>在画出完整闭环的过程中，你可以端到端地了解全流程涉及哪些系统或者模块，每个模块的关键技术是什么，从而培养出全局的视野和能力。</p><p><strong>2. 避免盲目地广撒网却捞不到鱼</strong></p><p>环式学习法划定的范围是实际工作的闭环，能够形成一套有效的组合拳，而不是东一榔头西一棒槌的胡乱搭配，能够大大提升学习效率。所以你只要对照环来提升就可以了，不用再担心广撒网却捞不到鱼了。</p><h3 id="环式学习法小结"><a href="#环式学习法小结" class="headerlink" title="环式学习法小结"></a>环式学习法小结</h3><p>现在，我们回顾一下环式学习法的重点：</p><ol><li>环式学习法是构建闭环，打出组合拳，主要用来提升技术广度。</li><li>环式学习法的步骤包括：先把闭环画出来，然后由近及远，逐步攻克闭环上的各个节点。</li><li>环式学习法的优点有：培养全局视野，避免盲目地广撒网却捞不到鱼。</li></ol><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/092257f1bfeb40ca2948c3ba708a4d22.jpg"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。在你的面试或者晋升的过程中，有没有因为某个专业方面的问题没答上来而留下遗憾的经历？学完今天的内容后，你觉得可以用什么方式来学习，避免以后再留下类似的遗憾呢？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/9bdd22f6c05a81abc61f6af57cee2628.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;19-链式-比较-环式学习法：怎么多维度提升技术能力？&quot;&gt;&lt;a href=&quot;#19-链式-比较-环式学习法：怎么多维度提升技术能力？&quot; class=&quot;headerlink&quot; title=&quot;19 | 链式 &amp;amp; 比较 &amp;amp; 环式学习法：怎么多维度提升技术</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>21 | 导学：你应该掌握哪些做事方法？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/3468715751.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/3468715751.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="21-导学：你应该掌握哪些做事方法？"><a href="#21-导学：你应该掌握哪些做事方法？" class="headerlink" title="21 | 导学：你应该掌握哪些做事方法？"></a>21 | 导学：你应该掌握哪些做事方法？</h1><p>你好，我是华仔。</p><p>从今天开始，我们进入到课程的第五部分，做事方法。</p><p>你在工作中肯定听到过这样的评价，“这个人做事很靠谱”或者“这个人做事很厉害”。</p><p>但是你有没有想过： <strong>同一个部门的人，级别一样，岗位职责一样，参与的项目也差不多，为什么你会觉得其中某些人做事就是比大部分人更靠谱、更厉害呢？</strong></p><p>你可能会认为，这是因为他们态度更积极，更加会表现。</p><p>但是如果你带过团队就会知道， <strong>做事的态度和做事的能力不是等价的</strong>。</p><p>尤其是在部门绩效拉通和晋升预审这些场合，如果你向其他部门的负责人介绍的时候，说自己团队的某个成员“做事积极主动，很认真，很拼”，那么多半会被“怼”得很惨。</p><p>比如有人可能会说：“晚上9点下班就算拼了？我们团队的xxx做项目的时候都是11点才准备下班。”</p><p>那么，高级别的管理者是怎么判断你的做事能力强不强的呢？</p><p>我自己带过很多人，也经常跟其他的P8、P9和P10这个级别的管理者交流学习。我发现，有三条判断标准是能够达成共识的。</p><h2 id="做事能力的判断标准"><a href="#做事能力的判断标准" class="headerlink" title="做事能力的判断标准"></a>做事能力的判断标准</h2><h3 id="标准一：具备闭环思维"><a href="#标准一：具备闭环思维" class="headerlink" title="标准一：具备闭环思维"></a>标准一：具备闭环思维</h3><p>闭环思维是最基本的能力要素，也就是说， <strong>做事的时候不能只是完成任务了事，而是要从端到端的角度去思考和落地。</strong></p><p>无论什么事情，端到端的过程都可以分为 <strong>事前规划</strong>、 <strong>事中执行</strong> 和 <strong>事后总结</strong> 三个阶段，但是大部分人都只关注“事中执行”的阶段，而对事前和事后两个阶段并不在意。</p><p>第一个原因是，这两个阶段不是自己负责的。</p><p>比如对技术人员来说，需求是产品经理提的，需求上线后也是产品经理来做业务分析，这些都不是你的本职工作。</p><p>第二个原因是，这两个阶段的任务并不一定是强制要求的。</p><p>比如有些团队的Team Leader是问题驱动型的，要么完成项目任务，要么处理问题，而不会主动去规划什么东西，因为规划有时候是一件很费脑筋的事情。</p><p>也有的人完成任务就万事大吉，接着去做下一个任务，而不会对当前任务进行总结，不会去想哪些做得好可以传承，做得不好可以改进。</p><p>但是如果你有了闭环思维，那么就算不是你自己负责的事情，或者不是强制要求的事情，你也会想方设法地去了解更多信息，思考下次怎么做得更好，这就是 <a href="https://time.geekbang.org/column/article/314649">晋升原则</a> 中的 <strong>主动原则</strong> 和 <strong>成长原则</strong> 所讲的内容。</p><p>以开发人员为例，虽然你只负责开发环节，但是如果按照闭环思维来做事，在做之前你除了理解需求之外，还应该去了解“为什么做这个需求”“需求的价值是什么”（事前规划），需求上线之后，你还应该去了解“需求上线后的结果怎么样？”“具体的业务数据是多少？”“我通过做这件事情收获了什么”（事后总结）等等。</p><p>而如果你本来就是端到端地负责某件事情的话，那就更加需要学会事后复盘、给领导汇报等技巧了，而不是做完事情之后被动地等着别人来问结果。</p><h3 id="标准二：有方法论指导"><a href="#标准二：有方法论指导" class="headerlink" title="标准二：有方法论指导"></a>标准二：有方法论指导</h3><p>有了闭环思维，做事就已经比较靠谱了。但是事情能不能做得漂亮，光有闭环思维是不够的，还需要看你的做事有没有方法论，也就是说， <strong>你做事的时候不只是靠经验教训的历史积累，还有一套系统的流程或者模板。</strong></p><p>方法论的第一个优势在于，无论遇到什么情况，你都能取得比较好的结果，能够保证交付质量的下限。否则如果只凭经验，那么下次情况稍微发生一些变化，你就不适应了。</p><p>方法论的第二个优势在于，你的行为背后是有一套逻辑支撑的，而不是拍脑袋随便拍出来的，这样会更有说服力。</p><p>比如你说“我觉得XX业务功能可以改一改”，但是又给不出充分的理由，那么别人很可能认为你是在瞎指挥；但如果你采用了AARRR漏斗模型来分析业务数据，在这个模型的基础上提出改进建议，那么别人接受的可能性就大多了。</p><h3 id="标准三：能拿到好的结果"><a href="#标准三：能拿到好的结果" class="headerlink" title="标准三：能拿到好的结果"></a>标准三：能拿到好的结果</h3><p>有了方法论是不是就一定很厉害呢？其实还不一定。</p><p>首先，你可能虽然有方法论，但其实你的方法论是错误的。</p><p>其次，你之前形成的方法论可能很厉害，但并不适合当前公司或者业务。</p><p>所以最后，判断你的方法论好不好，其实还是要看最后的结果好不好，给公司带来了多少价值，这也是晋升原则中的 <strong>价值原则</strong> 讲的内容。</p><p>虽然我们说是否能够拿到好的结果会有运气的成分，但剔除掉运气的因素，方法论的影响也很大。这也是很多从大公司出来的高P人员拿着原来的方法论到了中小公司或者创业公司，生搬硬套导致水土不服的原因。</p><h2 id="做事方法"><a href="#做事方法" class="headerlink" title="做事方法"></a>做事方法</h2><p>经过多年的实践检验和筛选，我逐步形成了一套系统的做事方法论，它按照闭环思维的三个阶段展开，整体结构如下：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/366ba1c6c43da49482bcb37c74f8711d.jpg"></p><h3 id="事前规划"><a href="#事前规划" class="headerlink" title="事前规划"></a>事前规划</h3><ol><li><strong>OKR规划法</strong>：英特尔提出、谷歌发扬光大的方法，通过合理地设定目标和分解关键成果来弥补KPI的缺陷，用于制定工作规划。OKR规划不同于传统KPI规划，更加注重聚焦和逻辑，你可以理解为“OKR方法教你如何制定牛逼的KPI”。</li></ol><h3 id="事中执行"><a href="#事中执行" class="headerlink" title="事中执行"></a>事中执行</h3><ol><li><strong>3C方案设计法</strong>：我原创的方法，通过制定多个备选方案来系统地分析事情相关的方方面面，避免思维狭隘，用于设计合理的落地方案。</li><li><strong>PDCA执行法</strong>：美国人提出、日本人发扬光大的方法，通过四个环节的循环来把控执行过程，保证具体事项高效高质地落地，用于推进事情的执行。</li><li><strong>5W根因分析法</strong>：丰田集团提出的方法，又叫“丰田五问法”，通过五个为什么来深挖问题本质，用于分析根本原因。</li><li><strong>5S问题处理法</strong>：我原创的方法，通过五个步骤来解决问题，化“危”为“机”，用于系统地处理问题。</li></ol><h3 id="事后总结"><a href="#事后总结" class="headerlink" title="事后总结"></a>事后总结</h3><ol><li><strong>4D总结法</strong>：我原创的方法，通过四个维度来整理做事的收获，能够帮助你在完成任务后进一步全方位地提升自己的能力，用于事后总结。</li><li><strong>金字塔汇报法</strong>：我参考麦肯锡的金字塔原理所提出的方法，通过遵循四个原则来展示工作成果，从而更容易获得高级别管理人员的认可，用于事后汇报。</li><li><strong>四线复盘法</strong>：我原创的方法，通过四个角度来复盘重大问题，达到公平公正的处理效果，避免背锅和甩锅，用于重大问题发生后的复盘改进。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上这些做事方法是我个人经验的归纳总结，希望能给你一些启发。当你不熟悉的时候，可以先照搬这些方法；而当你积累了一定的经验后，就不用再局限于我讲的内容了，可以自己去尝试和总结一些新的方法，不过一定要记得按照我在之前介绍的三条标准来检验。</p><p>现在，我们总结一下这一讲的重点内容：</p><ol><li>关于做事能力，有三条业界达成共识的判断标准，分别是闭环思维、方法论和结果。</li><li>我总结的做事方法分为事前规划、事中执行和事后总结三个阶段，包括OKR规划法、3C方案设计法、PDCA执行法、5W根因分析法、5S问题处理法、4D总结法、金字塔汇报法和四线复盘法等8种方法。</li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。你在工作中用过这一讲提到的做事方法吗，效果怎么样？或者你自己有没有比较有特色的做事方法呢？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/ef949dfaf673c73822893bd43f36eyy6.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;21-导学：你应该掌握哪些做事方法？&quot;&gt;&lt;a href=&quot;#21-导学：你应该掌握哪些做事方法？&quot; class=&quot;headerlink&quot; title=&quot;21 | 导学：你应该掌握哪些做事方法？&quot;&gt;&lt;/a&gt;21 | 导学：你应该掌握哪些做事方法？&lt;/h1&gt;&lt;p&gt;你好</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>23 | OKR规划法：Team Leader 怎么做团队规划？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/9141960.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/9141960.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="23-OKR规划法：Team-Leader-怎么做团队规划？"><a href="#23-OKR规划法：Team-Leader-怎么做团队规划？" class="headerlink" title="23 | OKR规划法：Team Leader 怎么做团队规划？"></a>23 | OKR规划法：Team Leader 怎么做团队规划？</h1><p>你好，我是华仔。</p><p>上一讲我介绍了KPI的问题和OKR的优势，你一定很想知道：OKR到底要怎么用呢？</p><p>其实，用OKR做规划可以分为两个阶段。</p><p>第一个阶段是， <strong>P9&#x2F;P10</strong> 级别的 <strong>业务负责人</strong> 针对 <strong>整条业务线</strong> 做业务规划。</p><p>第二个阶段是， <strong>P7&#x2F;P8</strong> 级别的 <strong>Team Leader</strong> 针对 <strong>专业团队</strong> 做团队规划。</p><p>你可能会想，做团队规划，是不是只要了解第二阶段就行了呢？然而并不是这样，P7&#x2F;P8的TL同样要了解第一阶段。</p><p><strong>因为你只有理解业务规划背后的逻辑，才能做出与之匹配的团队规划。</strong></p><p>这也是为什么在很多公司，当你的级别到了P7+，就有机会参与业务规划的讨论的原因。</p><p>这一讲我就会为你介绍，在这两个阶段怎么使用OKR规划法来做规划。</p><h2 id="阶段一：业务规划"><a href="#阶段一：业务规划" class="headerlink" title="阶段一：业务规划"></a>阶段一：业务规划</h2><p>我们先来看第一个阶段，业务规划。</p><h3 id="第一步：聚焦业务目标（O）"><a href="#第一步：聚焦业务目标（O）" class="headerlink" title="第一步：聚焦业务目标（O）"></a>第一步：聚焦业务目标（O）</h3><p>业务规划的第一步是聚焦业务目标，也就是O。</p><p>聚焦是OKR规划法的第一核心理念，也是OKR和KPI在做法上的核心区别之一。</p><p>业务负责人（有可能不是一个人，而是一个决策团队）使用OKR进行规划的时候，要在众多可以选择的方向中，挑出最重要的几个，一般不超过3个。</p><p>而如果使用KPI，很多人的进行规划的时候，就是简单地把一些指标的数值分别增加一点。</p><p>这就是使用OKR规划的优势： <strong>聚焦于最重要的事情，争取形成合力和突破</strong>。因为目标太多会导致资源投入分散，难以形成突破，形象点说， <strong>10个60分的目标不如一个100分的目标</strong>。</p><p>这一步看上去很简单，但其实它是 <strong>整个OKR规划过程中最难的一步</strong>。</p><p>我参加过很多次业务目标通晒大会，在介绍业务规划的P9&#x2F;P10级别的负责人中，几乎每次都有人被挑战，甚至被批评得很惨。</p><p>而业务线内部讨论业务目标时候，也会经常发生激烈的争执，如果争执不下，就只能更高级别的老板来拍板做决定，但其实老板也是凭感觉和经验来拍板的。</p><p>为什么会出现这种情况呢？因为做业务规划有两个很大的难点：</p><p>一是你 <strong>面对的环境和处理的信息本身就有很大的不确定性</strong>。比如竞品的策略、行业的动态和用户的心理，这些都没法通过数据确切地体现，不管是谁，都只能靠推断甚至是猜测，不可能百分之百保证准确性。</p><p>二是就算在条件和信息上达成一致，但 <strong>不同的人制定规划的时候判断和选择的标准也是不同的</strong>。比如说你知道了竞品的策略，那么现在要跟它贴身短打、正面硬刚呢，还是要避其锋芒、错位竞争呢？其实各有各的道理，谁对谁错，可能只有事后诸葛亮才知道。</p><p>因为业务规划存在这么大的困难，所以你千万不要觉得OKR规划法是包治百病、一用就见效的灵丹妙药。</p><p>毕竟方法本身不能取代经验，你还是得在工作中摸爬滚打，慢慢积累经验，加深对业务的理解才行。</p><p>不过，聚焦业务目标过程中的互怼和争执，本身也是一个澄清和完善的过程。总的来说，OKR规划法还是比其他方法（比如KPI规划法）更有逻辑，更有说服力。</p><p>聚焦的目标可以是定性描述的，比如“提升用户满意度”，也可以是可衡量的，比如“市场占有率排名前三”，通常情况下不要求量化。因为KR中会有具体的数据描述，在目标中你只要把数据的意义提炼出来就行了。</p><p>如果你一定要在目标中体现数据，也是可以的，具体来说有两种方式。</p><p>第一种是在KR中直接拆解目标中的数据，KR的数据总和大于或者等于目标中的数据，比如：</p><blockquote><p>O：新增用户数2000万</p><p>KR1：短视频平台买量拉新1000万</p><p>KR2：开发新业务拉新600万</p><p>KR3：通过与其它平台换量拉新500万</p></blockquote><p>第二种是在KR中添加辅助的指标，比如：</p><blockquote><p>O：新增用户数2000万</p><p>KR1：新增用户数2000万</p><p>KR2：投入资金不超过1亿</p><p>KR3：新用户月留存率不低于40%</p></blockquote><h3 id="第二步：分解关键结果（KR）"><a href="#第二步：分解关键结果（KR）" class="headerlink" title="第二步：分解关键结果（KR）"></a>第二步：分解关键结果（KR）</h3><p>聚焦业务目标之后，第二步是 <strong>分解</strong> 关键结果，也就是KR。对于每个目标，业务负责人都要提出3～5个KR。</p><p>这些KR一方面是用来评判目标有没有实现的衡量标准，另一方面也体现了为了实现目标，可能要做的具体事情的范围。</p><p>比如业务KR说“新增用户数2000万”，那么下面的团队可能就会进一步分解出“短视频平台买量xx万”“开发新业务拉新xx万”之类的工作。</p><p>所以KR太多不行，比如你列了10条，对应的事情太多，会导致精力和资源分散，难以形成突破。</p><p>而且KR太少也不行，比如你只列1条，这既说明没有全面地考虑到各种实现目标的方法，也会导致衡量标准太单一，最后可能会为了追求短期的单个数据指标而忽视业务长远的发展。</p><p>比如曾经有业务把“新增用户数xx万”作为唯一的KR，于是下面的P7&#x2F;P8执行的时候只管砸钱买量，不管用户质量。</p><p>结果到了年底一看，新增用户数是达标了，但是支出远远超出预算，用户留存率也很差；第二年严格控制预算之后，新增用户数立马被打回原形，用户活跃率更是远远不达标。</p><p>所以，业务目标有没有实现，我们需要综合3～5个KR一起来判断。</p><p>上一讲我提到过，KR有两种表现形式，一种是可以量化的 <strong>KPI</strong>，比如“用户量增长100万”；另一种是虽然不能量化但是可以衡量的 <strong>里程碑</strong>，比如“2021年6月实现千人千面功能”。</p><p>所以KR不能采取定性的描述，像“用户量大幅增长”这样肯定是不合格的，因为不可衡量。</p><p>对于可以量化的KR，关键在于具体的数值应该定多少，太低了看起来没有挑战，太高了看起来没有希望，但具体定多少并没有明确的标准。一般来说，可以参考历史数据、竞品数据或行业数据，也可以举全公司之力来定一个非常有挑战的目标值。</p><h2 id="阶段二：团队规划"><a href="#阶段二：团队规划" class="headerlink" title="阶段二：团队规划"></a>阶段二：团队规划</h2><p>现在，我们再来看第二个阶段，团队规划。</p><h3 id="第一步：对齐业务OKR"><a href="#第一步：对齐业务OKR" class="headerlink" title="第一步：对齐业务OKR"></a>第一步：对齐业务OKR</h3><p>团队规划的第一步是 <strong>对齐</strong> 业务规划的OKR。</p><p><strong>对齐是OKR规划的第二核心理念</strong>，也是OKR和KPI在做法上的另一个核心区别。</p><p>下一级的Team Leader要对照上一级业务OKR，看看自己的团队能够贡献什么价值和力量，从而让整个公司“心往一处想，劲往一处使”。</p><p>假设现在业务规划的OKR是：</p><blockquote><p>O：总用户数达到行业第一</p><p>KR1：新增用户数2000万</p><p>KR2：投入资金不超过1亿</p><p>KR3：新用户月留存率不低于40%</p></blockquote><p>那么如果你是技术团队的TL，要怎么对齐呢？</p><p>首先，针对KR1，技术团队能做的包括“降低App包大小”“SEO优化”“开发某某新业务”和“开发小程序”等。</p><p>其次，针对KR2，技术团队能做的不多，除非运营明确说“某个大渠道的ROI偏低，主要原因是包太大影响转化”，这时你就可以直接把解决问题作为团队的目标。</p><p>最后，针对KR3，技术团队能做的包括“优化用户体验”“新用户连续签到奖励”和“新用户引导”等。</p><p>你可以看到，光是对照业务规划的一个OKR，我们就能够想到很多关联的事情。按照同样的思路，再对照其他的OKR继续分析，把想到的事情分类整合排序形成自己团队的OKR，对齐业务OKR的工作就完成了。</p><p>当然，对齐的过程同样需要“聚焦”，你的判断和选择同样得是有逻辑的，不能把所有关联的事情全部都罗列出来去做。</p><p>比如刚才这个例子中，针对KR3“新用户月留存率不低于40%”，你想到了可以通过“优化用户体验”这个技术手段来提升新用户留存率。</p><p>但是，“用户体验”真的是影响新用户留存的关键因素吗？这就需要论证了。你不能简单地摆出“提升用户体验肯定可以提升用户留存”这样的大道理，而是应该通过数据分析或者用户调研的结果来证明它们的逻辑关系。</p><h3 id="第二步：补充专业OKR"><a href="#第二步：补充专业OKR" class="headerlink" title="第二步：补充专业OKR"></a>第二步：补充专业OKR</h3><p>对齐业务OKR之后，团队规划的第二步是 <strong>补充</strong> 专业OKR。</p><p><strong>如果说对齐业务OKR是自上而下的传导，那么补充专业OKR就是自下而上的提炼。</strong> TL要结合业务目标和团队情况，提出专业上的OKR，和业务上的OKR共同组成团队完整的OKR。</p><p>以技术团队为例，假设现在的业务系统问题比较多，团队成员要花很多时间来处理各种线上问题。</p><p>虽然因为团队成员的能力很强，所以最终这些问题没有对业务直接产生什么影响，但是站在整个团队角度来看，这会降低团队成员的工作效率和质量，长期这样就会影响正常的版本开发进度。</p><p>针对这种情况，TL可能需要提炼一个专业目标：季度线上问题平均数量从XX减少到YY。</p><p>这样的目标很难通过对齐得到，只能由技术团队自己提出来。</p><p>自上而下的传导需要很强的业务理解能力，而自下而上的提炼需要有很强的专业能力，这两种能力相辅相成，用OKR做团队规划的时候缺一不可。</p><p>所以，OKR规划法对于TL来说，也是一个不小的考验。</p><h2 id="举例：技术团队的OKR是怎么诞生的"><a href="#举例：技术团队的OKR是怎么诞生的" class="headerlink" title="举例：技术团队的OKR是怎么诞生的"></a>举例：技术团队的OKR是怎么诞生的</h2><p>假设某个技术团队负责一款电商App的技术工作，现在，我们通过一个完整的例子看看这个团队的OKR是怎么诞生的。</p><p><strong>第一，业务负责人确定2021上半年的业务目标</strong>，其中之一是用户量增长（具体来说是增长到行业第三）。</p><p><strong>第二，业务负责人分解KR</strong>，比如针对用户量增长这个目标，业务负责人分解出了3个KR，具体如下：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/5f248dccc4b33932d014a5ea694b887f.jpg"></p><p><strong>第三，技术团队TL拿到业务规划的OKR之后，进行对齐。</strong></p><p>KR1是“用户量增长4000万”，乍一看好像和技术团队没有太大关系，但实际上这就是技术团队需要基于业务来思考技术的一个典型 KR。</p><p>TL从技术的角度来分析业务的目标：哪些技术指标和用户增长量有关，它们跟哪些技术有关，团队现在具备这些技术吗，还有没有优化的空间？</p><p>比如影响用户增长量的一些技术指标，就包括“安装包大小”“App 启动时间”“App 崩溃率”和“App 耗电情况”等。</p><p>经过分析，TL认为目前的安装包太大，并且 App 启动时间较长，于是提出了2条对应的KR：</p><p><strong>1. App 安装包从 20M 缩减到 8M</strong></p><p><strong>2. App 启动时间从 2s 优化到 500ms</strong></p><p>KR2是“买量支出不超过10亿”，一般来说这跟技术团队的关系不大，不需要关注。</p><p>但是TL了解到，现在运营的系统无法评估每个渠道买量效果，所以他增加了1条对应的KR：</p><p><strong>3. 新增渠道质量监测功能</strong></p><p>这也反映出，技术团队TL如果能了解更多的业务信息，就可以为业务做出更大的贡献。</p><p>KR3是“推出新业务A”，TL把它直接变成了自己团队的1条KR：</p><p><strong>4. 推出新业务A</strong></p><p>TL再继续对齐业务规划的其他OKR，又得到了2条对应的KR：</p><p><strong>5. 改版B业务</strong></p><p><strong>6. 后端服务器接口平均响应时间从60ms提升到30ms</strong></p><p>然后，他对这6条KR进行分类整合排序，归纳出了2个目标：</p><ul><li><strong>O1：优化技术指标，提升用户体验</strong></li><li><strong>O2：保证关键业务和功能上线</strong></li></ul><p>所以，TL通过对齐业务OKR得到的结果如下图所示：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/c16ed2f8c7dcfeb610789952e5b41279.jpg"></p><p><strong>第四，技术团队TL结合业务目标和团队情况，补充专业OKR。</strong></p><p>当前阶段在技术上有没有重点要做的事情呢？TL经过思考发现，要实现用户增长，就需要做很多新的尝试性的功能，但是团队目前的版本节奏比较慢，原因是因为版本多而测试环境不足。</p><p>为了解决测试环境不足导致版本等待等问题，他得出了一个目标：</p><ul><li><strong>O3：提升测试效率</strong></li></ul><p>为此，他也分解出了几个KR：</p><p><strong>1. 添加4台测试环境机器</strong></p><p><strong>2. 引入Docker，支持一台机器搭建20套环境</strong></p><p><strong>3. 一键生成全套测试环境</strong></p><p>于是，他补充了一个专业上的OKR，如下图所示：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/465a637318419b9bbc27a65a2fe41191.jpg"></p><p>TL将业务上的OKR和专业上的OKR结合起来，就得到了团队完整的OKR，团队规划也就做好了。</p><p>看完这个例子，我想你已经对OKR规划法的使用建立了整体的认知。不过你对OKR可能还有一些疑问，接下来，我就针对两个常见的问题进行解答。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="问题一：如果用OKR规划法，要怎么做绩效考核呢？"><a href="#问题一：如果用OKR规划法，要怎么做绩效考核呢？" class="headerlink" title="问题一：如果用OKR规划法，要怎么做绩效考核呢？"></a>问题一：如果用OKR规划法，要怎么做绩效考核呢？</h3><p>美国硅谷的很多科技公司都用OKR取得了很好的效果，但介绍OKR的文章往往都会说OKR和绩效考核无关。</p><p>比如Facebook的绩效考核方式是 <strong>360度环评</strong>，也就是通过多人打分的方式来对员工进行绩效考核。</p><p>目前来看，中国公司推广这种考核方式的可能性似乎不大。那么如果推行 OKR，绩效考核要怎么做呢，难道还要引入另外一套机制吗？</p><p>其实我之前提到过，KR的两种形式，KPI和里程碑，都要求是 <strong>可以衡量</strong> 的。所以，根据OKR本身来做绩效考核并没有什么问题，我们可以像考核KPI一样来考核KR。</p><p>如果是KPI形式的KR，就是看数值有没有达标，跟原定目标相差多少；</p><p>如果是里程碑形式的KR，就是看事情有没有在规定的时间节点高质量地完成。</p><p>为了方便考核，我们甚至可以在制定 KR 的时候，就 <strong>直接将结果的等级包含进去</strong>，比如：</p><p>KR1：用户量增长1000万（合格）；用户量增长2000万（良好）；用户量增长3000万（优秀）</p><p>不过在做OKR绩效考核的时候，还有可能出现两种比较特殊的情况：</p><p>第一种情况是，KR都做到了，但是目标没有实现。</p><p>比如我们假设曹操专车的业务目标是“超越滴滴”，KR是订单数增长200%，但到了年底盘点一看，订单数增长300%，超额完成，但行业第一还是滴滴。</p><p>那么这种情况怎么处理呢？OKR的关键是实现目标，从这个角度来看，团队人员的绩效不会太高。</p><p>第二张情况是，KR没有做到，但是目标实现了。</p><p>比如某电商App的业务目标是“成为行业第三”，年底盘点一看，发现KR没达成，但是确实成为了行业第三。</p><p>这种情况怎么处理呢？我们就要继续分情况讨论，看看目标到底是怎么实现的。</p><p>如果是因为竞争对手都不给力，全靠同行衬托得好，那么这种情况下团队人员的绩效也不会特别高。</p><p>但是如果是因为一开始的KR确实定得太高，团队为了实现目标，没有把有限的资源浪费在盲目地追求数据指标上，那么这其实是值得肯定的。</p><p>而如果是因为外部的不可抗力，比如突发疫情或国际政策变化，团队及时放弃年初制定的KR，探索出了新的路径来实现目标，那么这就更加值得激励了。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/143d55516fe8d5cbff7cc2a36e537425.jpg"></p><h3 id="问题二：OKR规划法可以用来做个人规划吗？"><a href="#问题二：OKR规划法可以用来做个人规划吗？" class="headerlink" title="问题二：OKR规划法可以用来做个人规划吗？"></a>问题二：OKR规划法可以用来做个人规划吗？</h3><p>虽然宣传OKR的文章一般都会声明OKR同样适合个人做规划，但从实践的效果来看，如果是P7&#x2F;P8&#x2F;P9级别且带了团队的技术主管，个人的规划就是团队的规划，使用OKR来做个人规划其实就是团队规划。</p><p>对于P5&#x2F;P6&#x2F;P7级别没有带团队的技术人员来说，使用OKR来做个人规划比较别扭，原因在于这个级别的技术人员更多的是执行团队主管安排的任务，自己能掌控的规划内容并不多。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，我们回顾一下这一讲的重点。</p><ol><li><p>OKR规划的第一个阶段是P9&#x2F;P10级别的业务负责人针对整条业务线做业务规划，先聚焦业务目标（O），在分解关键成果（KR）。</p></li><li><p>OKR规划的第二个阶段是P7&#x2F;P8级别的Team Leader针对专业团队做团队规划，先对齐业务OKR，再补充专业OKR。</p></li><li><p>聚焦是OKR的第一核心理念，对齐是OKR的第二核心理念，它们也是OKR和KPI在做法上的核心区别。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/501f22b96e0377c20edb7a96fb18dd96.jpg"></p></li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。学完这一讲之后，你能不能尝试制定一下团队的半年OKR呢？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/98b3817c85de45f7d1c2d37a8c0c5df8.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;23-OKR规划法：Team-Leader-怎么做团队规划？&quot;&gt;&lt;a href=&quot;#23-OKR规划法：Team-Leader-怎么做团队规划？&quot; class=&quot;headerlink&quot; title=&quot;23 | OKR规划法：Team Leader 怎么做团队规划？</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>24 | 3C方案设计法：怎么让你的方案有理有据？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/2331555587.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/2331555587.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="24-3C方案设计法：怎么让你的方案有理有据？"><a href="#24-3C方案设计法：怎么让你的方案有理有据？" class="headerlink" title="24 | 3C方案设计法：怎么让你的方案有理有据？"></a>24 | 3C方案设计法：怎么让你的方案有理有据？</h1><p>你好，我是华仔。</p><p>上一讲我介绍了用来制定工作规划的OKR规划法。在完成事前规划之后，我们就到了事中执行阶段。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/366ba1c6c43da49482bcb37c74f8711d.jpg"></p><p>在执行阶段，你可能经常遇到这样的情况，领导审批或者跨部门同事协作的时候，别人对你的想法提出挑战。</p><p>比如你提出了一个方案，其他人针对你的方案提了很多疑问，而这些疑问确实是你在做方案时没有考虑到的；或者有人提出了其它的方案，你一时也无法明确地证明你的方案优于别人的方案。</p><p>所以在一开始的时候，你就要设计出有理有据的方案，这样才能让别人更加理解、支持和配合你。</p><h2 id="3C方案设计法"><a href="#3C方案设计法" class="headerlink" title="3C方案设计法"></a>3C方案设计法</h2><p>要怎么设计呢？我总结出了一个 <strong>3C方案设计法</strong>，也就是 <strong>每次做事的时候都至少设计3个方案，然后选择最优的1个或者几个方案去执行</strong>。</p><p>这里的C代表Choice，选择。</p><p>3C方案设计法最典型的应用场景就是基于上一级的OKR来制定自己的OKR。</p><p>比如你是负责买量的运营人员，你的Team Leader基于上一级业务OKR，分解出运营团队的某个KR是“新用户买量60万”，现在交给你来负责执行。</p><p>你会发现买量的渠道有很多种，包括抖音、快手、头条、百度、QQ和微信等。不同的渠道用户特性不同，方式不同，投入产出也不同，你不能每个渠道都买一点，而应该聚焦几个效果好的渠道。</p><p>但到底哪几个渠道才是好的呢？你不能简单地凭感觉拍脑袋，而应该有理有据地推导出来。</p><p>具体来说，就是提出不同渠道买量的方案，对比这些方案的优缺点、投入成本和买量效果等。如果最后你判断“抖音买量50万”和“百度买量20万”这两个方案比较好，那么就把这两个方案作为自己的KR。</p><p>向上汇报的时候，你一定会遇到很多挑战，比如“为什么是抖音而不是快手？”“百度的优势在哪里？”</p><p>但是这些问题你都有答案，因为你使用3C方案设计法的过程，其实就是在不断澄清各种可能的问题。</p><p>当然，3C方案设计法不局限于业务规划和业务方案设计，它也可以用来做技术方案，也可以用来做管理方案；既适合比较重大的事项，也适合日常的判断选择。</p><p>下面是几个应用的实例：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/f8185aeca713cb9b9a80c9b8d995c84f.jpg"></p><h2 id="三个阶段选出最终方案"><a href="#三个阶段选出最终方案" class="headerlink" title="三个阶段选出最终方案"></a>三个阶段选出最终方案</h2><p>3C方案设计法的使用过程可以分为三个阶段，每个阶段都能够从不同的角度帮助你完善思考，提升方案的说服力。</p><p><strong>第一个阶段是预研阶段，你需要设计出3～5个备选方案。</strong></p><p>这个过程会促使你思考多种可能性， <strong>避免思维狭隘</strong> 错过了更好的方案；而研究不同方案的优缺点可以帮助你 <strong>系统理解</strong> 某个领域的知识和技能。</p><p>你可能并不一定能很快想出3个备选方案，这恰恰说明你对当前的领域或者事情还没有全面的理解和思考，你需要强迫自己一定要想出3个备选方案，这个探索的过程就是一个 <strong>自我提升</strong> 的过程。</p><p><strong>第二个阶段是讨论阶段，你需要把备选方案向上级汇报，或者给其他人评审。</strong></p><p>这个过程会让其他人的信息、观点和疑问输入到你的大脑中，进一步 <strong>全面完善</strong> 你对每个方案的优缺点、依赖条件和所需资源的理解。</p><p><strong>第三个阶段是决策阶段，你需要挑选出最终的方案。</strong></p><p>一般来说，如果是互斥的方案，那么选出1个最优的落地就行了。</p><p>比如新招聘的员工表现不太理想，方案1是“立即辞退”，方案2是“不辞退，加大培养力度”，方案3是“延长试用期1个月”，你最终只能挑选1个方案落地。</p><p>如果是可以并行的方案，那么“3选2”或“5选3”也是可以的，但是不建议“3选3”或“5选4”，因为这样执行的时候会没有重点。</p><p>列出一些备选方案，只能说明你对领域有一定了解；选出合适的最终方案，才能说明你已经掌握了这个领域，能做到理论和实践相结合。</p><p>决策的过程会让你重新审视自己原来提出的方案，尤其是最初倾向的方案，帮助你发现方案的问题、理解的问题、乃至自己决策标准的问题。</p><h2 id="3C方案设计法会耽误效率吗？"><a href="#3C方案设计法会耽误效率吗？" class="headerlink" title="3C方案设计法会耽误效率吗？"></a>3C方案设计法会耽误效率吗？</h2><p>你可能会担心，每次都要做3个方案，要花不少时间吧，这个3C方案设计法会不会耽误做事效率啊？</p><p>其实这是一种片面的理解。</p><p><strong>首先，虽然前期准备的时间变长了，但是做一件事的整体效率变高了。</strong></p><p>“前期匆匆忙忙赶工，后期急急忙忙返工”，这样的情况你肯定遇到过吧？</p><p>如果你在前期预研的时候先选出更好的方案，那么更有可能一次就拿到好的结果。一次就把事情做好，肯定比重复好几次效率更高。</p><p><strong>其次，虽然负责人投入的精力变多了，但是整个团队的效率变高了。</strong></p><p>“方案潦潦草草，讨论轰轰烈烈”，这种情况你肯定也深有体会吧？</p><p>如果负责人在设计方案的时候投入更多的精力，那么后续整个团队讨论决策和执行的效率都会提高。</p><p>正是因为考虑到效率，3C方案设计法才提倡准备3～5个备选方案。</p><p>如果超过5个，讨论和决策时需要投入的时间和精力太多。但是少于3个也不好，1个方案容易出现思维狭隘的问题，2个方案容易出现选择困难的问题，所以说：</p><p><strong>1个方案是陷阱，2个方案是困境，3个方案是选择</strong>。</p><h2 id="对晋升的帮助"><a href="#对晋升的帮助" class="headerlink" title="对晋升的帮助"></a>对晋升的帮助</h2><p>我指导团队成员晋升或者自己担任晋升评委的时候，经常遇到这样的场景：</p><p>申请者在自述环节自信满满地介绍他做过的某个漂亮的项目，列出了3～5个闪光点，并且贴出了详细的数据来证明效果。</p><p>然而到了答辩环节，评委只是简单地问了一句“ <strong>你为什么采取这个方案</strong>”，他就卡住了，要么支支吾吾，要么就说一些比较虚的内容，比如这个方案性能高、可靠性高之类的。</p><p>然后评委再问一句“ <strong>性能有多高，跟谁比性能高</strong>”，他就彻底答不上来了。</p><p>有时候我甚至能从申请者的眼中看出不可思议的表情，仿佛在说：“采取这个方案不是自然而然的吗？还有什么为什么啊？我都列出了这么多优点，选这个方案还用说吗？”</p><p>他们当中的大部分人在晋升失败后，都不会认为是自己专业能力不行，而会觉得是自己的口才不行，临场反应不好，甚至有人真的开始去买本书来尝试提升自己的口才。</p><p>其实这样的理解是错误的。明明是自己做得很漂亮的事情，结果却在晋升的时候答得不好，根本原因不是口才问题，而是在做事的时候没有深入思考和真正理解。</p><p>我也见过所谓口才好的申请者，临场反应能力很强，随便问个问题都能说上2～3分钟。但是在评委听来，他说的内容完全是临时拼凑，甚至是瞎扯淡。</p><p>有时候评委实在受不了了，还会直接打断正在滔滔不绝地讲废话的申请者。</p><p>与其这样回答，还不如直接说不知道。</p><p><strong>站在评委视角看，他们在判断申请者能力的时候，需要甄别把事情做好的真正原因</strong>：</p><p>是因为他自己掌握了相关能力？</p><p>还是因为有个厉害的主管直接告诉他怎么做？</p><p>又或者是他直接照搬了其他项目的经验？</p><p>甚至只是因为他这次运气好？</p><p>……</p><p><strong>而最常见的甄别方法，就是问“为什么”</strong>：</p><p>为什么你采取这个方案？</p><p>为什么你觉得这个方案好？</p><p>为什么不采用另外一种方案？</p><p>为什么有某某缺点你还是选择这个方案？</p><p>……</p><p>所以，如果你想提高自己的晋升成功率，首先要认识到回答问题不能光靠临场反应，更重要的是在平时做事情的时候就要逐步积累，正所谓“台上一分钟，台下十年功”。</p><p>晋升答辩的时候，在评委看来：</p><ul><li>你能够想出3个以上的方案，说明你对领域有系统和全面的理解，或者做事考虑非常周全；</li><li>能够详细的分析多个备选方案的优缺点，说明你对领域有深入的理解；</li><li>而能够从多个方案中选出落地的方案并最终拿到结果，说明你有一套成熟的评价标准或者原则，展现了你的决策能力。</li></ul><p>有的主管可能只是简单地跟你提出“你要加深理解”“全面思考”“深入思考”“明白背后的原因”等比较虚的要求，你听完后还是一脸懵逼。</p><p>但是学完这一讲，我想你就知道应该怎么做。只要按照3C方案设计法来做事，就自然就能满足这些要求。</p><p>我曾经带过一个团队成员，他之前3次晋升P7都失败了，自己总结的原因都是“太紧张了，口才不好”（他确实比较腼腆内向一些）。</p><p>我跟他指出，口才不是关键原因，关键是平时的思考和积累太少，然后在接下来的一年里严格要求他按照“3C方案设计法”来实践：</p><ul><li>重大技术方案设计要做3个备选方案</li><li>团队管理相关的措施想三个可选方案</li><li>每年的团队规划方向也要求想3个</li></ul><p>一年之后，他再次申请晋升，答辩结束后他就跟我说：“我不怎么紧张了，因为大部分评委的问题，我平时自己都已经想过了。”最后果然顺利地通过了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，我们回顾一下这一讲的重点内容。</p><ol><li><p>3C方案设计法就是每次做事的时候都至少设计3个方案，然后选择最优的1个或者几个方案去执行。</p></li><li><p>3C方案设计法分为三个阶段，预研阶段设计出3～5个备选方案，讨论阶段把备选方案向上级汇报或给其他人评审，决策阶段选出最终的方案。</p></li><li><p>3C方案设计法的好处包括：帮助系统地梳理一个领域；对每个方案理解得更全面；发现最初的方案和决策标准的问题；提升整体流程和整个团队的工作效率等。</p></li><li><p>评委在晋升答辩时喜欢问为什么，是为了甄别你把事情做好的原因。按照3C方案设计法来做事，就能在平时的工作中逐步积累，提前想好评委问题的答案。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/4d152e660748b7da1f8611d3ef001be9.jpg"></p></li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。假设主管给你安排了一个研究某个开源项目的任务，但你手上的业务开发任务又很重，请按照3C方案设计法来3个应对方案，并给出最终选择的方案和理由。</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/3875b55d226f87f112f32a091700b5e1.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;24-3C方案设计法：怎么让你的方案有理有据？&quot;&gt;&lt;a href=&quot;#24-3C方案设计法：怎么让你的方案有理有据？&quot; class=&quot;headerlink&quot; title=&quot;24 | 3C方案设计法：怎么让你的方案有理有据？&quot;&gt;&lt;/a&gt;24 | 3C方案设计法：怎么</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>22 | OKR的优势：为什么要用OKR来取代KPI做团队规划？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/453372993.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/453372993.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-OKR的优势：为什么要用OKR来取代KPI做团队规划？"><a href="#22-OKR的优势：为什么要用OKR来取代KPI做团队规划？" class="headerlink" title="22 | OKR的优势：为什么要用OKR来取代KPI做团队规划？"></a>22 | OKR的优势：为什么要用OKR来取代KPI做团队规划？</h1><p>你好，我是华仔。</p><p>如果让Team Leader（以下简称TL）选出自己工作中最头疼的几件事，那么团队规划一定是其中之一，因为这件事情很难有确定的标准，感觉怎么做都有一定的道理，但又不太确定什么样的规划才能拿到好结果。</p><p>那么是不是说，如果你不是TL，就不用掌握团队规划的方法了呢？其实并不是这样的。</p><p>首先，作为团队成员，你需要理解TL的规划，并且根据他的规划分解出自己的规划；当你自己学会了团队规划，就更容易发现潜在的机会，然后跟TL争取这些机会。</p><p>其次，现在到了P6+级别就可能带人了，如果你想晋升到P7的话，必须具备一定的管理能力，而无论你是带实体团队还是虚拟团队，都要掌握团队规划的方法。</p><h2 id="KPI：关键绩效指标"><a href="#KPI：关键绩效指标" class="headerlink" title="KPI：关键绩效指标"></a>KPI：关键绩效指标</h2><p>团队规划到底要怎么做呢？大家耳熟能详的就是KPI了。</p><p>KPI的英文全称是 <strong>Key Performance Indicator</strong>，意思是 <strong>关键绩效指标</strong>。它把公司的目标自上而下地分解，并且通过相关的关键绩效指标来衡量实际的执行效果。</p><h3 id="KPI的问题"><a href="#KPI的问题" class="headerlink" title="KPI的问题"></a>KPI的问题</h3><p>虽然KPI规划法曾经的确是比较先进的管理方法，但是到了今天，它的缺点也暴露得很明显。</p><p><strong>首先，它只适合标准化的、目标稳定的工作。</strong></p><p>比如在一家生产洗衣液的工厂，生产线是标准化的流水线，KPI可以设定为产量、停机时间和良品率等，产品销售是目标稳定的活动，KPI可以设定为销售量和市场占有率等。</p><p>但是，工厂的 <strong>技术创新</strong> 就不适合用KPI来衡量了，因为创新有很大的不确定性，既不可能标准化，也不可能稳定产出。</p><p><strong>其次，它也会给团队带来不好的风气。</strong></p><p>索尼公司前常务董事天外伺朗就写过一篇名为 <a href="https://www.huxiu.com/article/1084.html">《绩效主义毁了索尼》</a> 的文章，痛批KPI规划法带来的问题。这篇文章在业界流传很广，其激起的广泛讨论现在都没有停止。</p><p>如果我们先抛开文章结论对不对、观点是不是太偏激、索尼对KPI的理解是不是准确这些争议不谈，只看其中描述的现象，就会发现很多公司都存在同样的问题，比如：</p><ol><li><strong>故意定低指标</strong>：几乎所有人都把指标定得比较低，因为这样容易实现。</li><li><strong>只顾短期效益</strong>：追求眼前利益的风气蔓延，短期内难见效益的工作都受到轻视，比如质量检验和老化处理等。</li><li><strong>一切只看指标</strong>：上司不把部下当有感情的人来对待，一切都用指标来衡量。</li><li><strong>工作和考核本末倒置</strong>：绩效考核需要把各种工作量化，但是很多工作无法简单地量化，所以公司在绩效考核上花费了大量的精力和时间，而在真正的工作上却敷衍了事，本末倒置。</li></ol><h3 id="KPI的困惑"><a href="#KPI的困惑" class="headerlink" title="KPI的困惑"></a>KPI的困惑</h3><p>KPI规划法的这些缺点，在互联网公司的技术团队往往会进一步放大，很多TL在使用这种方法的时候都遇到过问题，比如：</p><p><strong>第一，程序员的工作要怎么量化？</strong></p><p>代码行数？版本数？bug数？这些指标都是不可行的！</p><p>比如某通信大厂考核 <strong>程序员</strong> 的关键指标是 <strong>bug的数量和等级</strong>，而考核 <strong>测试员</strong> 的关键指标是 <strong>发现的bug数量和等级</strong>。</p><p>结果呢？程序员和测试员为了一个问题是bug还是需求遗漏、bug的等级是严重还是一般，能够吵上 2 个小时；2 个小时吵不出结果，就拉上双方主管再吵 2 小时；还吵不出结果，就拉上经理继续吵 2 个小时。</p><p>于是最后就看谁会吵，谁官大，搞得程序员和测试员身心俱疲，关系很紧张。</p><p><strong>第二，技术团队怎么体现工作贡献呢？</strong></p><p>既然代码量、版本数、需求数、bug数这些指标不可行，那么如何体现技术团队对业务的贡献呢？</p><p>有的公司喜欢用“技术团队背30%的业务指标”这样的方式来定技术团队的KPI。比如公司业务的整体目标是“新增用户100万”，技术团队直接按照30%的比例定自己的KPI为“新增用户30万”。</p><p>但实际上这种KPI没有什么意义， <strong>因为技术团队的工作并不能直观的转换为业务数据</strong>，最后只能是看运气，业务目标达到了技术团队就跟着吃肉，业务目标没达到技术团队就跟着挨罚。</p><p><strong>第三，有风险的工作谁愿意做？</strong></p><p>很多前瞻性和拓展性的工作也伴随着风险，比如引入 ElasticSearch，理论上是可以提升搜索性能的，但在引入的这一年可能会带来很多问题，之后能带来多少收益还不确定。</p><p>在KPI的机制下，这种有风险的工作很可能没有人愿意去做，因为大家都不想犯错。</p><h2 id="技术团队规划的常见角度"><a href="#技术团队规划的常见角度" class="headerlink" title="技术团队规划的常见角度"></a>技术团队规划的常见角度</h2><p>考虑到这些问题，使用KPI规划法的时候，很多技术团队的TL会从以下3个角度来做团队规划：</p><p><strong>1. 解决问题</strong></p><p>比如解决版本延迟、线上Bug和团队成员士气不高等问题。</p><p>这是最容易找的角度，因为没有完美的团队，只要去找，一定能找到问题；而且这个角度看上去就很有价值，因为出问题肯定是不好的，解决掉总归是有好处的。</p><p><strong>2. 优化性能</strong></p><p>既包括 <strong>团队优化</strong>，比如提升开发效率和质量，提升团队成员战斗力；也包括 <strong>技术优化</strong>，比如将App的崩溃率从0.5%优化到0.3%，将后台接口响应时间从50ms优化到30ms。</p><p>这也是很多人喜欢用的一个角度，因为它也非常简单明确，不需要太多的思考，毕竟没有哪个产品和系统是完美的，每年都可以找到各种优化点，并且这些优化点还可以用指标衡量出来，看起来就是一个完美的KPI。</p><p><strong>3. 引入新技术</strong></p><p>比如引入Flutter来实现双端统一开发，引入机器学习来实现系统的某个功能。</p><p>业界各种新技术不断涌现，新技术有可能让生产效率或者生产质量大幅提升，所以引入新技术看起来既可以提升团队技术水平，又可以提升产品竞争力。</p><p>但是，从这些角度来做KPI规划，往往拿不到很好的绩效结果。主要原因在于， <strong>这些都是团队和技术的角度，没有结合业务目标，所以就算你做得很好，价值也不一定能体现出来</strong>。</p><p>我曾经多次遇到过这样的场景：</p><p>某个技术团队的TL兴致高昂地介绍了自己的团队规划。技术领导问了一句：“ <strong>为什么要现在做这个事情，这个事情给业务带来什么价值？</strong>”</p><p>结果这位TL就答不上来了，因为在整个规划的过程中，他都没有这样思考过。最后，他的规划汇报没通过，被领导要求重新规划。</p><p>你可能会认为： <strong>这些事情本身都是有价值的呀，为什么不可以作为规划内容呢？</strong> 比如App崩溃率从0.5%优化到0.3%，用户体验肯定是提升了的呀！</p><p>我不否认这个事情本身的价值，但是 <strong>团队规划需要考虑的是如何做才能创造最大的价值</strong>。因为团队的资源和时间是有限的，需要让投入产出比最大化。</p><p>同样以App崩溃率为例，如果你的App是在东南亚市场推出，受当地市场的手机档次比较低端的限制，崩溃率0.5%跟国内市场比感觉很高了，但其实在当地已经算很好的了。</p><p>你花了很大力气，将崩溃率从0.5%提升到0.3%，确实有利于用户体验，但是这部分提升带来的价值对用户来说感知不明显。</p><p>相比之下，如果你花同样的资源按照当地用户的操作习惯将UI改版，可能效果会非常明显。</p><h2 id="OKR：目标与关键成果"><a href="#OKR：目标与关键成果" class="headerlink" title="OKR：目标与关键成果"></a>OKR：目标与关键成果</h2><p>为了解决KPI规划法的问题，英特尔公司创始人安迪·格鲁夫（Andy Grove）提出了另一种团队规划法，后来由约翰·杜尔（John Doerr）引入谷歌发扬光大。</p><p>目前硅谷的知名企业都在使用这种方法，比如微软（Microsoft）、领英（LinkedIn）、推特（Twitter）、亚马逊（Amazon）、脸书（Facebook）和雅虎（Yahoo）等，它就是 <strong>OKR规划法</strong>。</p><p>OKR的英文全称是 <strong>Objectives and Key Results</strong>，意思是 <strong>目标与关键成果</strong>。它的实施步骤是：</p><p>首先，设定业务 <strong>目标</strong>（Objectives），比如提升市场占有率。</p><p>然后，为每个目标设定 <strong>关键结果</strong>（Key Results），也就是为了实现目标具体要做的事情，以及具体的标准，比如为了实现“提升市场占有率”这个目标，准备“请XX明星做代言人”“投入100亿做用户补贴”等。</p><h2 id="OKR-与-KPI-的区别是什么？"><a href="#OKR-与-KPI-的区别是什么？" class="headerlink" title="OKR 与 KPI 的区别是什么？"></a>OKR 与 KPI 的区别是什么？</h2><p>大部分人第一次接触 OKR 的时候都很疑惑： <strong>OKR和KPI看上去好像没什么区别</strong>，OKR的一个关键结果（KR）如果用数据来描述，似乎就是KPI的一项指标。</p><p>既然如此，那么我们为什么要强调用OKR，而不用KPI呢？其实它们的本质区别就藏在名字里。</p><p>KPI的关键词是 <strong>Indicators</strong>，而OKR的关键词是 <strong>Objectives</strong>。</p><p>换句话说，KPI 关注的是数据 <strong>指标</strong>，而OKR关注的是业务 <strong>目标</strong>。</p><p>我举几个例子来说明吧：</p><ul><li>假如你是 <strong>程序员</strong>，如果关注指标，你想到的是代码行数、bug 数和单元测试覆盖率；而如果关注目标，你想到的是解决产品的卡顿问题和实现精准推荐。</li><li>假如你是 <strong>足球运动员</strong>，如果关注指标，你想到的是进球数、助攻数、跑动距离和比赛场次；而如果关注目标，你想到的是夺冠、四强和保级。</li><li>假如你是曹操专车 <strong>的业务负责人</strong>，如果关注指标，你想到的是司机数量、订单数和乘客数；而如果关注目标，你想到的可能是让曹操专车成为网约车行业第二。</li></ul><p>所以，不要小看指标和目标这两个词的力量，它们代表的是两种思维方式。</p><p>当你使用KPI规划法，更关注数据指标的时候，第一反应是“ <strong>我要履行什么职责</strong>”，思维就会受到限制，只会关注当前已有的工作，不太可能去思考接下来应该做的事情是什么。</p><p>而当你使用OKR规划法，更关注业务目标的时候，第一反应是“ <strong>我要做成什么事情</strong>”，思维就会更加开阔，而不会局限于当前正在做的事情，可以根据实际情况判断和选择接下来应该要做的事情。</p><p><strong>方向对了，就不怕路途遥远；方向不对，数据再漂亮也没有意义。</strong> 在快速发展的行业，比如互联网行业，我们需要拥抱变化、不断调整，显然OKR规划法更加适用。</p><p>《绩效主义毁了索尼》这篇文章里有这么一句话：“具有讽刺意味的是，因单枪三束彩色显像管电视机获得成功而沾沾自喜的索尼，却在液晶和等离子薄型电视机的开发方面落后了。”</p><p>怎么理解呢？按照 KPI 的思维，彩色显像管电视机是已经在做的产品，自然要把 <strong>销量数据</strong> 做得越高越好；但是按照 OKR 的思维，整个行业都在转向液晶和等离子电视，必须尽快切换 <strong>产品方向</strong>。</p><p>彼得·德鲁克在《管理的实践》这本书中说道：“并不是有了工作才有目标，而是相反，有了目标才能确定每个人的工作。所以企业的使命和任务，必须转化为目标。”</p><p>这句话非常好地诠释了KPI和OKR的区别，提炼一下就是： <strong>KPI让我们正确地做事，OKR让我们做正确的事。</strong></p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/a1749e73179fce8d53a3429cd5yy7612.jpg"></p><p>你知道大部分的人的KPI是怎么制定的吗？先看有哪几个指标，然后每个指标做一些提升，就当成KPI提交。</p><p>我就亲身经历过这样的KPI讨论场景：</p><p>某手游交易网站的产品经理列出了5个指标，用户量、成交额、用户安全、发货速度和收入，然后给每个指标设定了一个增长量。</p><p>团队内部讨论的时候，我提了一个问题：“为什么要制定这些KPI？”</p><p>产品经理的回答是：“这些指标每个都很重要啊，你说哪个不重要呢？”</p><p>事实上，这些指标在不同的时期重要程度是不一样的，有的指标甚至是互相冲突的。</p><ul><li>如果业务目标是做到市场份额行业第一，那么 <strong>用户量</strong> 作为核心指标必须增长，你需要到百度买流量、补贴新用户和免交易手续费等，但这样做肯定会增加支出、减少收入。</li><li>如果集团要求创新业务必须实现盈亏平衡，那么 <strong>收入</strong> 作为核心目标必须增长，你就不能免除交易手续费，而是要实现交易阶梯收费，但这样又会影响用户量和成交额，因为会有一部分用户会因为手续费的原因而转移到其他交易平台。</li></ul><p>当你用OKR规划法的话，需要先根据环境变化和业务发展进行判断和取舍，明确业务目标，然后才能基于目标分解出合理的KPI。</p><p>所以有一种说法是这样的： <strong>OKR其实就是一种牛逼的KPI制定方法</strong>。</p><h2 id="OKR-与-KPI-的联系是什么？"><a href="#OKR-与-KPI-的联系是什么？" class="headerlink" title="OKR 与 KPI 的联系是什么？"></a>OKR 与 KPI 的联系是什么？</h2><p>虽然OKR和KPI有着本质区别，但这并不意味着它们截然相反、水火不容。</p><p>前面我也提到过，OKR的KR和KPI的表现形式基本一致。比如下面这个例子中的KR，我们说是它是KPI也没什么问题。</p><blockquote><p><strong>某App业务负责人的OKR</strong></p><p>O：App注册用户数达到5000万</p><p>KR1：2021全年新增用户1500万</p><p>KR2：月活用户达到2500万</p><p>KR3：新用户月留存率达到40%</p></blockquote><p>所以，OKR和KPI其实有着内在的联系，我觉得它们的关系用下面这张图来形象地表示：</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/316dd2bf1yy017c8c3ae7ffc095d505a.jpg"></p><p>如上图所示，OKR的KR有两种表现形式，一种是KPI，一种是里程碑。</p><p>因为KPI的要求是 <strong>可以量化</strong>，而OKR的要求是 <strong>可以衡量</strong>，有着微妙的不同。你可以用量化的数据来衡量，也可以用里程碑式的关键节点来衡量。</p><p>量化的KR很常见，比如前面提到的“2021全年新增用户1500万”。</p><p>里程碑式的KR，指的是 <strong>关键事项的落地</strong>，难以量化但可以衡量。以索尼公司为例，彩色显像管电视的开发项目立项时的KR应该是“19XX 年开发出彩色显像管电视”，这就是一个无法量化但可以衡量的结果。</p><p>互联网行业常见的里程碑KR有“某某业务上线”“完成推荐系统从0到1开发”“落地敏捷开发流程”这些。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，我们回顾一下这一讲的重点内容。</p><ol><li><p>KPI的缺点有两方面，一是只适合标准化的、目标稳定的工作，二是会给团队带来不好的风气，比如故意定低指标、只顾短期效益、一切只看指标、工作和考核本末倒置等。</p></li><li><p>技术团队的TL做团队规划有3个常见做法：解决问题、优化性能和引入新技术，但是因为没有结合业务目标，价值很难体现。</p></li><li><p>OKR规划法关注业务目标，可以根据实际情况及时调整，更适合快速发展的行业。</p></li><li><p>OKR是一种牛逼的KPI制定方法，KPI是KR的一种形式。当你先明确业务目标，再根据环境变化和业务发展进行取舍，才能制定出合理的KPI。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/f054e802e319c0d698227861d99f89e4.jpg"></p></li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。你完整地制定过团队或者自己的KPI吗，在这个过程中遇到了哪些疑惑和困难，学完这一讲你有解决的思路了吗？</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/67f5694c77b5187953953b1e8f686f29.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;22-OKR的优势：为什么要用OKR来取代KPI做团队规划？&quot;&gt;&lt;a href=&quot;#22-OKR的优势：为什么要用OKR来取代KPI做团队规划？&quot; class=&quot;headerlink&quot; title=&quot;22 | OKR的优势：为什么要用OKR来取代KPI做团队规划？</summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>26 | 5W根因分析法：怎么找准问题源头才能治标又治本？</title>
    <link href="https://zhuansun.github.io/geekbang/posts/4187057975.html"/>
    <id>https://zhuansun.github.io/geekbang/posts/4187057975.html</id>
    <published>2024-01-09T11:54:25.000Z</published>
    <updated>2024-02-27T07:30:58.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="26-5W根因分析法：怎么找准问题源头才能治标又治本？"><a href="#26-5W根因分析法：怎么找准问题源头才能治标又治本？" class="headerlink" title="26 | 5W根因分析法：怎么找准问题源头才能治标又治本？"></a>26 | 5W根因分析法：怎么找准问题源头才能治标又治本？</h1><p>你好，我是华仔。</p><p>上一讲我介绍了PDCA执行法，它把执行过程分为四个环节。其中在检查（Check）环节，最容易出现的问题就是，分析原因的时候， <strong>只看到表层的原因，而没有去深挖深层的根本原因</strong>。</p><p>这就会导致我们给出的 <strong>解决方案治标不治本</strong>，虽然短时间内做了应急处理，但是按下葫芦浮起瓢，相关的问题之后还会接连不断地冒出来。</p><h2 id="5W根因分析法"><a href="#5W根因分析法" class="headerlink" title="5W根因分析法"></a>5W根因分析法</h2><p>怎么解决呢？这就要靠 <strong>5W根因分析法</strong> 了。它又叫 <strong>5Why分析法</strong> 或者 <strong>丰田五问法</strong>，最初是由丰田集团创始人丰田佐吉提出的，后来成为丰田汽车公司获得成功的重要方法。（老板提出来的，应用也是自然的^_^）</p><p>那么，5W根因分析法到底是什么做的呢？根据丰田汽车公司前副社长大野耐一的描述，就是 <strong>重复问五次“为什么”</strong>，问题的本质和解决办法就会变得显而易见。</p><p>大野耐一曾经举过这样一个例子：</p><blockquote><p>问题1：为什么机器停了？</p><p>答：因为机器超载，保险丝烧断了。</p><p>问题2：为什么机器会超载？</p><p>答：因为轴承的润滑不足。</p><p>问题3：为什么轴承会润滑不足？</p><p>答：因为润滑泵失灵了。</p><p>问题4：为什么润滑泵会失灵？</p><p>答：因为它的轮轴耗损了。</p><p>问题5：为什么润滑泵的轮轴会耗损？</p><p>答：因为杂质跑到里面去了。</p></blockquote><p>如果到了问题1就停止追问，那么工人的措施就是更换保险丝，一段时间后保险丝肯定还会烧断。</p><p>如果到了问题4就停止追问，那么工人的措施就是更换轮轴，一段时间后轮轴又会很快坏了。</p><p>只有当追问到了问题5，才能找出停机的根本原因，这时工人的措施就是给润滑泵加上防杂质的滤网，从而彻底解决问题。</p><p>现在，5W根因分析法在其他很多企业已经得到了广泛应用，并且融入到了各种管理方法中，比如 <strong>持续改善法</strong>（日本持续改善之父今井正明提出）、 <strong>精益生产法</strong>（美国学者研究丰田后提出的管理哲学）和 <strong>六西格玛法</strong>（摩托罗拉提出的管理策略，杰克·韦尔奇推广到通用公司）等。</p><p>虽然它起源于生产过程中问题分析，但是作为一种思维方式，可以应用到很多场景，比如业务分析、技术学习和管理改进等。</p><p>接下来，我就针对这三类应用场景分别举例说明，这些都是我亲身经历的例子。</p><h2 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析</h2><p>第一个场景是业务分析。</p><p>在某交易平台的业务规划目标讨论会上，我通过3个为什么，了解到了业务目标背后的深层考虑。</p><blockquote><p>问题1：为什么今年的业务目标是成交金额翻番？</p><p>答：因为只有成交金额翻番我们才能达到盈亏平衡点。</p><p>问题2：为什么今年要求达到盈亏平衡点？</p><p>答：因为集团要求我们的业务能够自负盈亏。</p><p>问题3：我们本质上还属于创新业务，为什么集团要求我们的业务能够自负盈亏？</p><p>答：因为疫情的影响，集团需要开源节流，减少非盈利业务的持续投入。</p></blockquote><p>你可能觉得有些奇怪：怎么这个例子只问了3个为什么就结束了呢？</p><p>因为5个为什么只是一个形象的说法，实际操作中可以是3个，也可以是7个，关键在于通过追问找到根本原因。</p><p>虽然在这个例子中，我们还可以继续问下去，比如：“集团为什么要开源节流，创新业务难道不重要吗？”</p><p>但这样的问题，业务团队很难得到确切答案，因为集团的决策背景和讨论信息只有高层才知道，而且就算知道答案，也不会对业务规划目标的理解有更多的帮助。</p><h2 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h2><p>第二个场景是技术学习。</p><p>在某次Netty培训课上，我通过5个为什么，来验证大家是否真的深入理解了Netty网络高性能的核心原理。</p><blockquote><p>问题1：为什么Netty网络处理性能高？</p><p>答：因为Netty采用了Reactor模式</p><p>问题2：为什么用了Reactor模式性能就高？</p><p>答：因为Reactor模式是基于IO多路复用的事件驱动模式。</p><p>问题3：为什么IO多路复用性能高？</p><p>答：因为IO多路复用既不会像阻塞IO那样没有数据的时候挂起工作线程，也不需要像非阻塞IO那样轮询判断是否有数据。</p><p>问题4：为什么IO多路复用既不需要挂起工作线程，也不需要轮询？</p><p>答：因为IO多路复用可以在一个监控线程里面监控很多的连接，没有IO操作的时候只要挂起监控线程；只要其中有连接可以进行IO操作的时候，操作系统就会唤起监控线程进行处理。</p><p>问题5：那还是会挂起监控线程啊，为什么这样做就性能高呢？</p><p>答：首先，如果采取阻塞工作线程的方式，对于Web这样的系统，并发的连接可能几万十几万，如果每个连接开一个线程的话，系统性能支撑不了；而如果用线程池的话，因为线程被阻塞的时候是不能用来处理其他连接，会出现等待线程的问题。</p><p>其次，线上单个系统的工作线程数配置可以达到几百上千，这样数量的线程频繁切换会有性能问题，而单个监控线程切换的性能影响可以忽略不计。</p><p>第三，工作线程没有IO操作的时候可以做其他事情，能够大大提升系统的整体性能。</p></blockquote><p>这种场景在晋升答辩的时候也会经常发生。评委在考察申请者能力的时候，很喜欢用“夺命连环问”，连续追问为什么。如果平时没有训练和积累，你很可能被问到哑口无言的地步。</p><p>对于 <strong>方案选择</strong> 相关的问题，你可以用 <a href="https://time.geekbang.org/column/article/336582">第24讲</a> 介绍的 <strong>3C方案设计法</strong>，让自己的思考更加全面，选择更加有理有据。</p><p>而对于 <strong>技术深度</strong> 相关的问题，你可以先按照 <a href="https://time.geekbang.org/column/article/331463">第19讲</a> 介绍的 <strong>链式学习法</strong> 学习某项技术，然后再搭配 <strong>5W根因分析法</strong> 来训练自己，多问自己一些为什么，把深层逻辑吃透。</p><p>这样在晋升答辩的时候，你就能从容应对，不用再害怕评委针对技术深度展开“夺命连环问”了。</p><h2 id="管理改进"><a href="#管理改进" class="headerlink" title="管理改进"></a>管理改进</h2><p>在某次项目延迟问题的讨论会上，我通过6个为什么，把项目延迟的核心原因找了出来。</p><blockquote><p>问题1：为什么项目延迟了？</p><p>答：因为要等测试环境进行测试。</p><p>问题2：为什么要等测试环境？</p><p>答：我们只有2套测试环境，2套都已经用于另外两个项目了。</p><p>问题3：为什么只有2套测试环境，不能搭建多套吗？</p><p>答：现在没有机器用来搭测试环境了，而且我们有将近20个子系统，搭建一套可用的测试环境耗时可能要一周。</p><p>问题4：为什么会没有机器，直接申请机器不就可以了？</p><p>答：运维今年的预算用完了，不能购买新机器了。</p><p>问题5：为什么一定要用新机器，测试环境对机器性能要求高吗？</p><p>答：测试环境对机器性能要求不高，基本能跑就行。</p><p>问题6：那为什么不找运维申请过保机器（使用超过3年的机器，即使没坏也要换掉）用来搭建测试环境？</p><p>答：之前没想过这个方案。</p></blockquote><p>所以解决方案很简单，直接找运维借几台过保的机器用来搭建测试环境。</p><p>不过这还只是短期的解决方案，实际上在问题3的回答中，我们还可以发现另外一个问题：搭建一套环境太耗时了。</p><p>于是测试开发部启动了一个基于Docker的快速搭建环境的项目，项目完成后，任何一个开发或者测试同学花5分钟就能生成一套全新可用的环境。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>通过这3个例子，我想你已经理解了5W根因分析法的使用技巧。在实际应用的时候，我们还需要注意以下3点：</p><p><strong>1. 问题数量不是关键，找到根本原因才是关键</strong></p><p>在介绍业务分析这个例子的时候，我已经提到，5W或者说5个为什么只是一个形象的说法，3个也可以，7个也可以，关键在于找到根本原因。</p><p>所以一个最简单的提问方法就是： <strong>下一个问题是对上一个回答的进一步深入</strong>。</p><p>虽然数量可多可少，但我建议不要少于3个，因为凭借3个以下的为什么，大概率找不出根本原因；但是也不要多于7个，因为如果问了7个以上的为什么还没找到根本原因，那就要审视一下问题本身是不是有问题了，比如关注的焦点偏移，前面问的是A，后面变成了问B了。</p><p><strong>2. 首先要明确问题本身</strong></p><p>5W根因分析法起源于生产过程，通常情况下问题都是比较明显的，比如机器停机了或者次品率升高了。但是，还有很多情况下问题本身其实是不明确的，每个人的理解可能都不太一样。</p><p>如果没有明确问题就开始问为什么，无论问题多么精彩都没有意义，甚至越精彩离题越远。</p><p>比如“成交量大幅下降”，这个问题就不明确，到底下降10%、30%还是50%才算“大幅”？是同比下降还是环比下降？是某一个子业务下降很多，还是所有子业务都在下降？</p><p>如果这些问题都不明确就开始进行根因分析，就很可能得出一大堆似是而非的原因和改进措施。</p><p><strong>3. 避免变成大型“撕逼”现场</strong></p><p>在连续追问“为什么”的时候，如果双方没有对这个方法充分达成认识，被问的人很可能觉得你在挑战和质疑他，讨论的现场就会变成大型“撕逼”现场，最后闹得不欢而散。</p><p>所以在一开始的时候，就要先解释清楚，待会儿将采用5W根因分析法来探讨根本原因，避免挑起情绪对立，引发“撕逼”。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，我们回顾一下这一讲的重点内容。</p><ol><li><p>5W根因分析法就是通过追问5个为什么来分析问题的根本原因，从而得到彻底的解决方案。</p></li><li><p>5W根因分析法起源于生产过程的问题原因分析，但也可以应用于业务分析、技术学习和管理改进等场景。</p></li><li><p>使用5W根因分析法时要注意：首先要明确问题本身；问题数量不是关键，找到根本原因才是关键；避免变成大型“撕逼”现场。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/3748a2cedbyy5762dedb220f2ae35422.jpg"></p></li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>这就是今天的全部内容，留一道课后思考题给你吧。</p><p>你是否经历过让自己印象深刻的挫折？试试用5W根因分析法自我分析一下原因，也许这次得出的答案会超出你原有的认知。</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。</p><p><img src="https://note-1252548816.cos.ap-nanjing.myqcloud.com/uPic/202401/6ffedb6836e2fb2ac4bc11796a587ac8.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;26-5W根因分析法：怎么找准问题源头才能治标又治本？&quot;&gt;&lt;a href=&quot;#26-5W根因分析法：怎么找准问题源头才能治标又治本？&quot; class=&quot;headerlink&quot; title=&quot;26 | 5W根因分析法：怎么找准问题源头才能治标又治本？&quot;&gt;&lt;/a&gt;26 </summary>
      
    
    
    
    <category term="大厂晋升指南" scheme="https://zhuansun.github.io/geekbang/categories/%E5%A4%A7%E5%8E%82%E6%99%8B%E5%8D%87%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
</feed>
